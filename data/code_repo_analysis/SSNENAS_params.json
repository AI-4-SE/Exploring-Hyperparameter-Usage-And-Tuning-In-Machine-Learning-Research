{
    "nas_lib/algos_nas/bananas.py": {
        "tensorflow": {
            "reset_default_graph_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors/predictor_mlp.py": {
        "tensorflow": {
            "slice_9": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_10": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_17": {
                "variable": {
                    "value": "fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(y_pred, lower_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(y_true, lower_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_19": {
                "x": {
                    "value": "tf.subtract(fraction, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_30": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_47": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_17": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4.5",
                            "float"
                        ]
                    ]
                }
            },
            "subtract_18": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4.5",
                            "float"
                        ]
                    ]
                }
            },
            "subtract_19": {
                "x": {
                    "value": "fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(tf.subtract(y_pred, lower_bound), tf.subtract(y_true, lower_bound))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_11": {
                "x": {
                    "value": "2 * np.pi * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_11": {
                "x": {
                    "value": "y_true - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/BRP_NAS/nasbench201/tf_model.py": {
        "tensorflow": {
            "placeholder_128": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(i) for i in args.input_size.split(','))",
                            "GeneratorExp"
                        ],
                        [
                            "(1, 32, 32, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 32, 32)",
                            "Tuple"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_315": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(i) for i in args.input_size.split(','))",
                            "GeneratorExp"
                        ],
                        [
                            "(1, 32, 32, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 32, 32)",
                            "Tuple"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_375": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_411": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_466": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_482": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(1, 1), strides=(1, 1), padding='same', data_format='channels_last', activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=(2, 2), strides=(2, 2), padding='valid', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(1, 1), strides=(1, 1), padding='same', use_bias=False, data_format=data_format, activation=None, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(2, 2), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Add()([net, net])",
                            "Call"
                        ],
                        [
                            "input_placeholder",
                            "variable"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=net.shape[1:3], strides=(1, 1), padding='valid', data_format=data_format, dtype=data_type)(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [net.shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=num_classes, use_bias=True, dtype=data_type)(input)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor['9'](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "temp",
                            "variable"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor['9'](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(2, 2), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "input_placeholder",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(net, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(net, 0)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=net.shape[1:3], strides=(1, 1), padding='valid', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [net.shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=num_classes, use_bias=True, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "build_cell(net, matrix, ops, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "build_reduction(net, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[net.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_73": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_86": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_99": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Add_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, 0)",
                            "Call"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "nets",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_136": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, 0)",
                            "Call"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "nets",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "nasbench201_dnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input, 0)",
                            "Call"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "net",
                            "variable"
                        ],
                        [
                            "nets",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[net.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "residual",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_320": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(1, 1), strides=(1, 1), padding='same', data_format='channels_last', activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=(2, 2), strides=(2, 2), padding='valid', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(1, 1), strides=(1, 1), padding='same', use_bias=False, data_format=data_format, activation=None, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(2, 2), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Add()([net, net])",
                            "Call"
                        ],
                        [
                            "input_placeholder",
                            "variable"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=net.shape[1:3], strides=(1, 1), padding='valid', data_format=data_format, dtype=data_type)(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [net.shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=num_classes, use_bias=True, dtype=data_type)(input)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor['9'](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "temp",
                            "variable"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor['9'](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(2, 2), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "input_placeholder",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(net, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(net, 0)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=net.shape[1:3], strides=(1, 1), padding='valid', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [net.shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=num_classes, use_bias=True, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "build_cell(net, matrix, ops, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "build_reduction(net, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_323": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(1, 1), strides=(1, 1), padding='same', data_format='channels_last', activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=(2, 2), strides=(2, 2), padding='valid', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(1, 1), strides=(1, 1), padding='same', use_bias=False, data_format=data_format, activation=None, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(2, 2), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Add()([net, net])",
                            "Call"
                        ],
                        [
                            "input_placeholder",
                            "variable"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(input)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=net.shape[1:3], strides=(1, 1), padding='valid', data_format=data_format, dtype=data_type)(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [net.shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=num_classes, use_bias=True, dtype=data_type)(input)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor['9'](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "temp",
                            "variable"
                        ],
                        [
                            "_opindex_to_ctor[op](input, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "_opindex_to_ctor['9'](input, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(2, 2), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=channels, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=None, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "input_placeholder",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(net, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(net, 0)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=(1, 1), padding='same', data_format=data_format, activation=tf.nn.relu, dtype=data_type, use_bias=False)(net)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.AvgPool2D(pool_size=net.shape[1:3], strides=(1, 1), padding='valid', data_format=data_format, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [net.shape[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=num_classes, use_bias=True, dtype=data_type)(net)",
                            "Call"
                        ],
                        [
                            "build_cell(net, matrix, ops, channels, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "build_reduction(net, channels * 2, data_format, data_type)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "nasbench201_dnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "stem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_264": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_275": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_286": {
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "channels * 2",
                            "BinOp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "stem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_362": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_143": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "f'stack{stack}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_329": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "'channels_last'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(tf, data_type)",
                            "Call"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "data_type",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "f'stack{stack}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "reduction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "f'cell{cell}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/BRP_NAS/nasbench201/tf_utils.py": {
        "tensorflow": {
            "ConfigProto_79": {
                "variable": {
                    "value": "sessconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ConfigProto_120": {
                "variable": {
                    "value": "sessconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "RunMetadata_215": {
                "variable": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_90": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.name[:-2] for tensor in output]",
                            "ListComp"
                        ],
                        [
                            "[tensor.name[:-2] for tensor in outputs]",
                            "ListComp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_training_nodes_91": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output)",
                            "Call"
                        ],
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output)",
                            "Call"
                        ],
                        [
                            "convert_to_graph_def(graph, output)",
                            "Call"
                        ]
                    ]
                },
                "protected_nodes": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.name[:-2] for tensor in output]",
                            "ListComp"
                        ],
                        [
                            "[tensor.name[:-2] for tensor in outputs]",
                            "ListComp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_variables_to_constants_181": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.name[:-2] for tensor in output]",
                            "ListComp"
                        ],
                        [
                            "[tensor.name[:-2] for tensor in outputs]",
                            "ListComp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_training_nodes_182": {
                "variable": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output)",
                            "Call"
                        ],
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output)",
                            "Call"
                        ],
                        [
                            "convert_to_graph_def(graph, output)",
                            "Call"
                        ]
                    ]
                },
                "protected_nodes": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.name[:-2] for tensor in output]",
                            "ListComp"
                        ],
                        [
                            "[tensor.name[:-2] for tensor in outputs]",
                            "ListComp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "profile_219": {
                "variable": {
                    "value": "flops",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "run_meta": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RunMetadata()",
                            "Call"
                        ]
                    ]
                },
                "cmd": {
                    "value": "op",
                    "type": "str",
                    "possible_values": []
                },
                "options": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.profiler.ProfileOptionBuilder.float_operation()",
                            "Call"
                        ],
                        [
                            "tf.profiler.ProfileOptionBuilder.trainable_variables_parameter()",
                            "Call"
                        ]
                    ]
                }
            },
            "profile_223": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                },
                "run_meta": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RunMetadata()",
                            "Call"
                        ]
                    ]
                },
                "cmd": {
                    "value": "op",
                    "type": "str",
                    "possible_values": []
                },
                "options": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.profiler.ProfileOptionBuilder.float_operation()",
                            "Call"
                        ],
                        [
                            "tf.profiler.ProfileOptionBuilder.trainable_variables_parameter()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_40": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_logger_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_58": {
                "logdir": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_83": {
                "config": {
                    "value": "sessconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_124": {
                "config": {
                    "value": "sessconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_173": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_217": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output)",
                            "Call"
                        ],
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), output)",
                            "Call"
                        ],
                        [
                            "convert_to_graph_def(graph, output)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_87": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_97": {
                "graph_or_graph_def": {
                    "value": "output_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.remove_training_nodes(graph_def, protected_nodes=output)",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "str(output_file.parent)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "str(output_file.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_177": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_204": {
                "graph_or_graph_def": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.remove_training_nodes(graph_def, protected_nodes=output)",
                            "Call"
                        ],
                        [
                            "converter.convert()",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "str(output_file.parent)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "str(output_file.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/MLP/PredictorMLP.py": {
        "tensorflow": {
            "slice_9": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_10": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_17": {
                "variable": {
                    "value": "fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(y_pred, lower_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(y_true, lower_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_19": {
                "x": {
                    "value": "tf.subtract(fraction, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_30": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_47": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_17": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4.5",
                            "float"
                        ]
                    ]
                }
            },
            "subtract_18": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4.5",
                            "float"
                        ]
                    ]
                }
            },
            "subtract_19": {
                "x": {
                    "value": "fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide(tf.subtract(y_pred, lower_bound), tf.subtract(y_true, lower_bound))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_11": {
                "x": {
                    "value": "2 * np.pi * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_11": {
                "x": {
                    "value": "y_true - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tools_nas/close_domain/train_multiple_gpus_close_domain.py": {
        "tensorflow": {
            "set_verbosity_25": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "tools_predictors/predictor_comparison.py": {
        "tensorflow": {
            "set_verbosity_22": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools_predictors/train_predictor_rl.py": {
        "tensorflow": {
            "set_verbosity_15": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/data/batch.py": {
        "torch": {
            "full_62": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(data_list)",
                            "Call"
                        ],
                        [
                            "i in range(len(self.__slices__[keys[0]]) - 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_70": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "item + cumsum[key]",
                            "BinOp"
                        ],
                        [
                            "torch.full((num_nodes,), i, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch[key][0]",
                            "Subscript"
                        ],
                        [
                            "torch.full((size,), i, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "data_list[0].__cat_dim__(key, item)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_48": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "item + cumsum[key]",
                            "BinOp"
                        ],
                        [
                            "torch.full((num_nodes,), i, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch[key][0]",
                            "Subscript"
                        ],
                        [
                            "torch.full((size,), i, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_57": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(data_list)",
                            "Call"
                        ],
                        [
                            "i in range(len(self.__slices__[keys[0]]) - 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_106": {
                "obj": {
                    "value": "self[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_46": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "item + cumsum[key]",
                            "BinOp"
                        ],
                        [
                            "torch.full((num_nodes,), i, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch[key][0]",
                            "Subscript"
                        ],
                        [
                            "torch.full((size,), i, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gnn_lib/data/data.py": {
        "torch": {
            "is_tensor_20": {
                "obj": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_255": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "dictionary.items()",
                            "Call"
                        ],
                        [
                            "self('edge_index', 'edge_attr')",
                            "Call"
                        ],
                        [
                            "self(*keys)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_274": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/conv/gcn_conv.py": {
        "torch": {
            "Parameter_48": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/conv/gin_conv.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/conv/graph_conv.py": {
        "torch": {
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/conv/message_passing.py": {
        "torch": {
            "index_select_113": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get(arg[:-2], None)",
                            "Call"
                        ],
                        [
                            "tmp[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.index_select(tmp, dim, edge_index[idx])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "edge_index[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/conv/sg_conv.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gnn_lib/nn/glob/attention.py": {
        "torch": {}
    },
    "gnn_lib/nn/glob/set2set.py": {
        "torch": {
            "LSTM_40": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "q_star",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/glob/sort.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_x, expand_batch_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_29": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_x.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "perm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/pool/consecutive.py": {
        "torch": {
            "unique_5": {
                "variable": {
                    "value": "(unique, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_6": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "inv.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inv.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inv.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/pool/sag_pool.py": {
        "torch": {}
    },
    "gnn_lib/nn/pool/topk_pool.py": {
        "torch": {
            "arange_53": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "perm.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "perm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_16": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x > scores_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "cum_num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[num_nodes.new_zeros(1), num_nodes.cumsum(dim=0)[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_25": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(k[i], dtype=torch.long, device=x.device) + i * max_num_nodes for i in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(mask, dim=0)",
                            "Call"
                        ],
                        [
                            "perm.new_full((num_nodes,), -1)",
                            "Call"
                        ],
                        [
                            "(row >= 0) & (col >= 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_39": {
                "start": {
                    "value": "k[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/utils/isolated.py": {
        "torch": {
            "zeros_45": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_48": {
                "variable": {
                    "value": "assoc",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_49": {
                "variable": {
                    "value": "assoc[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "assoc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "loop_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_nodes, dtype=torch.bool, device=edge_index.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_55": {
                "variable": {
                    "value": "loop_assoc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assoc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((num_nodes,), -1, dtype=torch.long, device=mask.device)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_56": {
                "variable": {
                    "value": "loop_assoc[loop_edge_index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "loop_edge_index.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "loop_assoc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index, loop_edge_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_attr, loop_edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_21": {
                "input": {
                    "value": "torch.cat((row, col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "(row, col)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/utils/loop.py": {
        "torch": {
            "arange_82": {
                "variable": {
                    "value": "loop_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index, loop_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_134": {
                "variable": {
                    "value": "loop_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "maybe_num_nodes(edge_index, num_nodes)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "row.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[:, mask], loop_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight, loop_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_125": {
                "variable": {
                    "value": "loop_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fill_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "None if edge_weight is None else edge_weight.dtype",
                    "type": "IfExp",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight[mask], loop_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/utils/scatter.py": {
        "torch": {
            "is_floating_point_28": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gnn_lib/nn/utils/to_dense_batch.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "cum_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.new_zeros(1), num_nodes.cumsum(dim=0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_36": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * max_num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn_lib/nn/utils/undirected.py": {
        "torch": {
            "stack_40": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[col, row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/algos_darts/gin_predictor_open_search.py": {
        "torch": {
            "manual_seed_42": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111222333",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_46": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111222333",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/algos_darts/gin_predictor_open_search_fixed_nums.py": {
        "torch": {
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111222333",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_49": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111222333",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/algos_nas/predictor.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_93": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_159": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_232": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/algos_nas/predictor_unsupervised.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/ccl/ccl_model/ccl_nas_model.py": {
        "torch": {
            "Tensor_29": {
                "variable": {
                    "value": "self.center_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_30": {
                "variable": {
                    "value": "self.center_feature_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_47": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q(batch_nodes1, batch_edge_idx1, batch_idx1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "final_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "final_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "center_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "final_logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "dist_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(path_encoding - path_encoding[i, :].view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_60": {
                "variable": {
                    "value": "(min_val, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(path_encoding - path_encoding[i, :].view(1, -1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_72": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posit_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[masks]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_73": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(posit_vecs, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(center, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_76": {
                "variable": {
                    "value": "positive_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posit_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[masks]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "center.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_78": {
                "variable": {
                    "value": "negative_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[negative_mask][:self.min_negative_size, :]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "center.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_pairs, negative_pairs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_74": {
                "input": {
                    "value": "torch.isnan(center)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "path_encoding - path_encoding[i, :].view(1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "negative_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_vec >= min_val + self.margin",
                            "Compare"
                        ]
                    ]
                }
            },
            "isnan_74": {
                "input": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(posit_vecs, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(center, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/ccl/ccl_nas.py": {
        "torch": {
            "CrossEntropyLoss_134": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NASBenche101Dataset(model_type='SS_CCL')",
                            "Call"
                        ],
                        [
                            "NASBenche201Dataset(model_type='SS_CCL')",
                            "Call"
                        ],
                        [
                            "DartsDataset(model_type='SS_CCL', arch_path=args.darts_arch_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BatchCollator()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_211": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "min_263": {
                "variable": {
                    "value": "(min_val, min_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_264": {
                "variable": {
                    "value": "nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_matrix == min_val",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_266": {
                "variable": {
                    "value": "max_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_matrix > min_val + 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_54": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_170": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NASBenche101Dataset(model_type='SS_CCL')",
                            "Call"
                        ],
                        [
                            "NASBenche201Dataset(model_type='SS_CCL')",
                            "Call"
                        ],
                        [
                            "DartsDataset(model_type='SS_CCL', arch_path=args.darts_arch_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_118": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CCLNas(build_model(args.arch, args.with_g_func), args.input_dim, args.moco_dim_fc, args.moco_dim, distributed=distributed, train_samples=args.train_samples, t=args.moco_t, min_negative_size=args.min_negative_size, margin=args.margin)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CCLNas(build_model(args.arch, args.with_g_func), args.input_dim, args.moco_dim_fc, args.moco_dim, distributed=distributed, train_samples=args.train_samples, t=args.moco_t, min_negative_size=args.min_negative_size, margin=args.margin)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_125": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_145": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_233": {
                "variable": {
                    "value": "center_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch=batch, path_encoding=path_encodings, device=device, search_space=args.search_space, sample_ids=sample_ids, logger=logger)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "centers.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_234": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(centers, centers.T)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_237": {
                "input": {
                    "value": "masks * center_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/cifar10_dataset.py": {
        "torch": {
            "from_numpy_128": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_66": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_69": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/cifar10_dataset_retrain.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root_path, train=True, download=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root=root_path, train=True, download=False, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root_path, train=False, download=False, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_94": {
                "indices": {
                    "value": "indices[:split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_97": {
                "indices": {
                    "value": "indices[split:num_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/collate_batch.py": {
        "torch": {
            "Tensor_19": {
                "variable": {
                    "value": "path_encoding",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/darts_api/darts_neuralnet.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_36": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.stem0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.stem1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_89": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_mult * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_mult * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/data/darts_api/darts_ops.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/data/darts_torch.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "nasbench_201_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DartsDataset('SS_CCL', '/home/aurora/data_disk_new/dataset_train/nas_bench_301/gen_archs/data_info_part1.pkl')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "BatchCollator()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/nasbench_101_torch.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "nasbench_101_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NASBenche101Dataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/nasbench_201.py": {
        "torch": {}
    },
    "nas_lib/data/nasbench_201_api/api.py": {
        "torch": {
            "load_115": {
                "variable": {
                    "value": "xdata",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "xfile_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(archive_root, '{:06d}-FULL.pth'.format(index))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "file_path_or_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path_or_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(file_path_or_dict)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(file_path_or_dict)",
                            "Call"
                        ],
                        [
                            "torch.load(file_path_or_dict, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_728": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_or_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict_or_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/data/nasbench_201_torch.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "nasbench_201_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NASBenche201Dataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/eigen/trainer_nasbench_open_darts_async.py": {
        "torch": {
            "device_93": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.025",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_deacy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_deacy)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "train_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_84": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu",
                            "Method Argument"
                        ],
                        [
                            "gpu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__132": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters['grad_clip']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/eigen/trainer_predictor.py": {
        "torch": {
            "MSELoss_44": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.nas_agent.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.nas_agent.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/eigen_predictive_compare/mlp_trainer.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_width[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_width[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularization",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_46": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda: %d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, k)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "train_d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "target_d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "self.net(train_d)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net(val_d)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(out - target_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "val_d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "self.net(train_d)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net(val_d)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "layer_width[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_width[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "out - target_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/eigen_predictive_compare/np_nas_trainer.py": {
        "torch": {
            "Adam_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MSELoss_39": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "variable": {
                    "value": "self.criterion_ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_43": {
                "variable": {
                    "value": "self.scheduler_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "T_max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_45": {
                "variable": {
                    "value": "self.scheduler_regress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_regress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "T_max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_263": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_266": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "T_max": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_269": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{device}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_209": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_343": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "val_cls_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_79": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage1(batch_nodes, batch_edge_idx, batch_idx_g, batch_nodes_reverse, batch_edge_idx_reverse).squeeze()",
                            "Call"
                        ],
                        [
                            "self.stage1(batch_nodes, batch_edge_idx, batch_idx_g, batch_nodes_reverse, batch_edge_idx_reverse).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_118": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_124": {
                "variable": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_157": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_163": {
                "variable": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_168": {
                "variable": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage1(batch_nodes, batch_edge_idx, batch_idx_g, batch_nodes_reverse, batch_edge_idx_reverse).squeeze()",
                            "Call"
                        ],
                        [
                            "self.stage1(batch_nodes, batch_edge_idx, batch_idx_g, batch_nodes_reverse, batch_edge_idx_reverse).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_186": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_195": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_cls, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_cls, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "variable": {
                    "value": "val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_296": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_303": {
                "variable": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_329": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_336": {
                "variable": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nodes_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "batch_reverse.x",
                            "Attribute"
                        ],
                        [
                            "F.normalize(batch_nodes_reverse, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_cls, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_cls, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_171": {
                "input": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_cls, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_cls, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/eigen_predictive_compare/semi_nas_trainer.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.predictor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "params['l2_reg']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "controller_train_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "controller_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ControllerDataset(train_archs, train_target, True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "controller_synthetic_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "controller_synthetic_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ControllerDataset(test_seq, None, False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_86": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict_value.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "encoder_target.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_87": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob.contiguous().view(-1, log_prob.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "decoder_target.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__90": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params['grad_bound']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/eigen_predictive_compare/utils.py": {
        "torch": {}
    },
    "nas_lib/layers/gaussian_function.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_33": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GaussianFunction.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.randn(10, 15, dtype=torch.double, requires_grad=True), torch.randn(10, 15, dtype=torch.double, requires_grad=True), vec)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_19": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_19": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_31": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/layers/gaussian_loss.py": {
        "torch": {
            "Normal_30": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "sigma[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_17": {
                "input": {
                    "value": "target_y - mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "self.sqrtpi * sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_19": {
                "input": {
                    "value": "l3 - l1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(target_y[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/models_darts/darts_graph.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_VERTICES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/models_darts/darts_ops.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/models_darts/datrs_neuralnet.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_36": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.stem0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.stem1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_89": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_mult * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_mult * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/predictor_retrain_compare/predictor_gin_ccl.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(input_dim, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "nn2_base",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "variable": {
                    "value": "self.bn2_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "nn3_base",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.bn3_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(dim1, num_classes, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x1_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(data_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x2_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_base(x1_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x3_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_base(x2_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictor_retrain_compare/predictor_gin_rl.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(input_dim, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "nn2_base",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn2_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "nn3_base",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn3_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x1_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(data_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x2_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_base(x1_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x3_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_base(x2_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors/predictor_gcn.py": {
        "torch": {
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.linear_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_23": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(data, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x1, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gmp(x2, batch), gap(x2, batch)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_before(x_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([gmp(x2, batch), gap(x2, batch)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear_before(x_embedding))",
                            "Call"
                        ],
                        [
                            "F.dropout(x_embedding, p=0.1, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors/predictor_gin.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(input_dim, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "nn2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "nn3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(data, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x1, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x2, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x_embedding_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_before(x_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "x_embedding_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_embedding_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.linear_before(x_embedding))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors/predictor_unsupervised_siamese_ged.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(input_dim, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "nn2_base",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn2_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "nn3_base",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn3_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "nn1_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(input_dim, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_36": {
                "variable": {
                    "value": "self.bn1_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "nn2_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "variable": {
                    "value": "self.bn2_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "nn3_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim1, dim1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn3_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.linear_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear_branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear_before_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.linear_mean_residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_63": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x1_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(data_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x2_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_base(x1_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x3_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_base(x2_base, edge_index_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x_embedding_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_branch1(x_embedding_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x1_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_residual(data_residual, edge_index_residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x2_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_residual(x1_residual, edge_index_residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x3_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_residual(x2_residual, edge_index_residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "x_embedding_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_branch2(x_embedding_residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "x_embedding_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_embedding_base, x_embedding_residual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x_embedding_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_before_residual(x_embedding_residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/BRP_NAS/gcn.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.DoubleTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adjacency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency",
                            "Method Argument"
                        ],
                        [
                            "adjacency",
                            "Method Argument"
                        ],
                        [
                            "adjacency",
                            "Method Argument"
                        ],
                        [
                            "adjacency",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(features, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.gc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GraphConvolution(self.nfeat if i == 0 else self.nhid, self.nhid, bias=True, weight_init=weight_init, bias_init=bias_init) for i in range(self.nlayer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LayerNorm(self.nhid).double() for i in range(self.nlayer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU().double() for i in range(self.nlayer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Dropout(self.dropout_ratio).double() for i in range(self.nlayer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.DoubleTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid + augments",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, augments]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid + augments",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_90": {
                "variable": {
                    "value": "self.final_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_92": {
                "variable": {
                    "value": "self.final_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, augments]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, a1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, a2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_77": {
                "normalized_shape": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(self.nhid + augments) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(self.nhid + augments) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/BRP_NAS/infer.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/predictors_compare/BRP_NAS/utils.py": {
        "torch": {
            "load_232": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_246": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/predictors_compare/NP_NAS/agent.py": {
        "torch": {}
    },
    "nas_lib/predictors_compare/NP_NAS/gcn_np.py": {
        "torch": {
            "BatchNorm1d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm1d_19": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.liner2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_45": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.relu(self.conv1(data, edge_index)) + F.relu(self.conv1_reverse(data_reverse, edge_index_reverse))) * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.bn1(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, training=self.training, p=0.1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.relu(self.conv2(x1, edge_index)) + F.relu(self.conv2_reverse(x1, edge_index_reverse))) * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.bn2(x2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x2, training=self.training, p=0.1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.relu(self.conv3(x2, edge_index)) + F.relu(self.conv3_reverse(x2, edge_index_reverse))) * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.bn3(x3)",
                            "Call"
                        ],
                        [
                            "F.dropout(x3, training=self.training, p=0.1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(x_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_55": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmp(x3, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear(x_embedding))",
                            "Call"
                        ],
                        [
                            "F.dropout(x_embedding, p=0.1, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_43": {
                "input": {
                    "value": "self.conv1_reverse(data_reverse, edge_index_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.conv2_reverse(x1, edge_index_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_49": {
                "input": {
                    "value": "self.conv3_reverse(x2, edge_index_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/NP_NAS/gcn_np_cas.py": {
        "torch": {
            "BatchNorm1d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm1d_21": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "144",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.liner2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_30": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.relu(self.conv1(data, edge_index)) + F.relu(self.conv1_reverse(data_reverse, edge_index_reverse))) * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.bn1(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, training=self.training, p=0.1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.relu(self.conv2(x1, edge_index)) + F.relu(self.conv2_reverse(x1, edge_index_reverse))) * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.bn2(x2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x2, training=self.training, p=0.1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.relu(self.conv3(x2, edge_index)) + F.relu(self.conv3_reverse(x2, edge_index_reverse))) * 0.5",
                            "BinOp"
                        ],
                        [
                            "self.bn3(x3)",
                            "Call"
                        ],
                        [
                            "F.dropout(x3, training=self.training, p=0.1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(x_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmp(x3, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear(x_embedding))",
                            "Call"
                        ],
                        [
                            "F.dropout(x_embedding, p=0.1, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "self.conv1_reverse(data_reverse, edge_index_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "self.conv2_reverse(x1, edge_index_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "input": {
                    "value": "self.conv3_reverse(x2, edge_index_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/SemiNAS/controller.py": {
        "torch": {}
    },
    "nas_lib/predictors_compare/SemiNAS/decoder.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "source_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim + source_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, decoder_hidden)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(x, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embedding(decoder_input[:, i:i + 1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, decoder_hidden)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(x, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "source_hids.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, source_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x, source_hids.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, source_len), dim=1).view(batch_size, -1, source_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "source_hids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_hids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_42": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mix, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_proj(combined.view(-1, self.input_dim + self.source_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_63": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_67": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, decoder_hidden)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(x, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embedding(decoder_input[:, i:i + 1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, decoder_hidden)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(x, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_89": {
                "variable": {
                    "value": "predicted_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(x.view(-1, self.hidden_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, decoder_hidden)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(x, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embedding(decoder_input[:, i:i + 1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, decoder_hidden)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.attention(x, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decoded_ids, symbol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decoder_input, symbol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/SemiNAS/encoder.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "predict_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "variable": {
                    "value": "predict_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_91": {
                "variable": {
                    "value": "new_encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs + predict_lambda * grads_on_outputs",
                            "BinOp"
                        ],
                        [
                            "F.normalize(new_encoder_outputs, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs - predict_lambda * grads_on_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "new_arch_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs + predict_lambda * grads_on_outputs",
                            "BinOp"
                        ],
                        [
                            "F.normalize(new_encoder_outputs, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs - predict_lambda * grads_on_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "new_arch_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_arch_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(new_encoder_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(new_arch_emb, 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.rnn(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "mlp_layer(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "(residual + x) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.regressor(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "predict_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(predict_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_84": {
                "input": {
                    "value": "predict_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mlp_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "self.mlp_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "self.mlp_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mlp_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/predictors_compare/SemiNAS/utils.py": {
        "torch": {
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/trainer/trainer_gnn.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "MSELoss_28": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.predictor.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[accuracy[id] for id in batch_idx]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "val_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[accuracy[id] for id in batch_idx]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "self.predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'supervised_gin_epoch_{epoch}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'supervised_gin_epoch_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "self.predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'supervised_gin_epoch_{epoch}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'supervised_gin_epoch_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/trainer/trainer_gnn_embedding.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "training_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "idx_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ProductList(idx_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "dist_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[edit_distance_normalization(arch_path_encoding_pair1[i], arch_path_encoding_pair2[i], self.node_num) for i in range(len(arch_path_encoding_pair1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "dist_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[edit_distance(arch_path_encoding_pair1[i], arch_path_encoding_pair2[i]) for i in range(len(arch_path_encoding_pair1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_232": {
                "variable": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_gt - prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "dist_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[edit_distance_normalization(arch_path_encoding_pair1[i], arch_path_encoding_pair2[i], self.node_num) for i in range(len(arch_path_encoding_pair1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "self.predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'unsupervised_ss_rl_epoch_{epoch}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'unsupervised_ss_rl_epoch_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_188": {
                "obj": {
                    "value": "self.predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'unsupervised_ss_rl_epoch_{epoch}.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'unsupervised_ss_rl_epoch_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "dist_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[edit_distance(arch_path_encoding_pair1[i], arch_path_encoding_pair2[i]) for i in range(len(arch_path_encoding_pair1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_234": {
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(dist_gt - prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_230": {
                "input": {
                    "value": "prediction.squeeze(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_233": {
                "input": {
                    "value": "errors < 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/trainer/trainer_gnn_embedding_darts.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpu}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "dist_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[edit_distance_normalization(arch_path_encoding_pair1[i], arch_path_encoding_pair2[i], self.node_num) for i in range(len(arch_path_encoding_pair1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "dist_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[edit_distance(arch_path_encoding_pair1[i], arch_path_encoding_pair2[i]) for i in range(len(arch_path_encoding_pair1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_150": {
                "variable": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_gt - prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "self.predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'unsupervised_ss_rl_epoch_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_152": {
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(dist_gt - prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_148": {
                "input": {
                    "value": "prediction.squeeze(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "errors < 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/utils/comm.py": {
        "torch": {
            "stack_91": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_105": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_119": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/utils/utils_darts.py": {
        "torch": {
            "zeros_228": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_VERTICES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob).to(device)",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_168": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/utils/utils_data.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_VERTICES_101",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_VERTICES_201",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_VERTICES_DARTS_HALF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_207": {
                "variable": {
                    "value": "(min_vals, min_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(p1 - p2), dim=-1).int().T",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "node_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_VERTICES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(torch.sum(matrix).item())",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ],
                        [
                            "int(np.sum(matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_204": {
                "input": {
                    "value": "torch.abs(p1 - p2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_86": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "matrix.T",
                            "Attribute"
                        ],
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_204": {
                "input": {
                    "value": "p1 - p2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nas_lib/utils/utils_model.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_7": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_lib/utils/utils_solver.py": {
        "torch": {
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_lr",
                            "Method Argument"
                        ],
                        [
                            "base_lr",
                            "Method Argument"
                        ],
                        [
                            "base_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_lr",
                            "Method Argument"
                        ],
                        [
                            "base_lr",
                            "Method Argument"
                        ],
                        [
                            "base_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_lr",
                            "Method Argument"
                        ],
                        [
                            "base_lr",
                            "Method Argument"
                        ],
                        [
                            "base_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MSELoss_96": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools_darts/test_darts_cifar10.py": {
        "torch": {
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "saved_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_91": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111444",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_75": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111444",
                            "int"
                        ]
                    ]
                }
            },
            "device_84": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools_darts/train_darts_cifar10.py": {
        "torch": {
            "device_131": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_146": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_158": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_121": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_125": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "DataParallel_141": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DartsCifar10NeuralNet(args.init_channels, CLASSES, args.layers, args.auxiliary, genotype, args.model_name[:-4], stem_mult=3)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__42": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_135": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools_darts/train_multiple_gpus_open_domain.py": {
        "torch": {}
    }
}