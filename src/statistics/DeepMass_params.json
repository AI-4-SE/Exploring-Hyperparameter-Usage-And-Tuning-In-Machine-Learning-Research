{
    "CMB_foreground_demo/foregrounds_utils.py": {
        "tensorflow": {
            "list_physical_devices_16": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rot90_43": {
                "image": {
                    "value": "input_foreground_array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty((nfiles, temp_map.shape[0], temp_map.shape[0], 2))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(nfiles)",
                            "Call"
                        ],
                        [
                            "range(len(grid_i_index))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "a": {
                    "value": "rotated_foreground_array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.vstack([tf.image.rot90(input_foreground_array, k=i) for i in range(4)])",
                            "Call"
                        ],
                        [
                            "np.concatenate([rotated_foreground_array, tf.image.transpose(rotated_foreground_array)]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepmass/cnn_keras.py": {
        "tensorflow": {
            "Input_51": {
                "variable": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.map_size, self.map_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_65": {
                "variable": {
                    "value": "simple",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(self.map_size, self.map_size, 1))",
                            "Call"
                        ],
                        [
                            "Input(shape=(self.map_size, self.map_size, self.channels[0]))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Conv2D(1, (3, 3), activation='sigmoid', padding='same', kernel_initializer='he_normal')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_96": {
                "variable": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.map_size, self.map_size, self.channels[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concatenate_118": {
                "variable": {
                    "value": "mergedeep",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x4, updeep]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_124": {
                "variable": {
                    "value": "merge5",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x3, up5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_130": {
                "variable": {
                    "value": "merge6",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x2, up6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_136": {
                "variable": {
                    "value": "merge7",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x1, up7]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_142": {
                "variable": {
                    "value": "unet",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(self.map_size, self.map_size, 1))",
                            "Call"
                        ],
                        [
                            "Input(shape=(self.map_size, self.map_size, self.channels[0]))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Conv2D(self.channels[1], 1, activation='sigmoid')(x7)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_55": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_56": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_59": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_60": {
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_63": {
                "filters": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_98": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AveragePooling2D_101": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_102": {
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AveragePooling2D_105": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_106": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AveragePooling2D_109": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_110": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AveragePooling2D_113": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_114": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpSampling2D_117": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_120": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpSampling2D_123": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_127": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpSampling2D_129": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_133": {
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpSampling2D_135": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_139": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_140": {
                "filters": {
                    "value": "self.channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_148": {
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deepmass/spherical_deepmass.py": {
        "tensorflow": {
            "Input_80": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(12 * self.current_nside ** 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concatenate_99": {
                "variable": {
                    "value": "x4",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x4, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_106": {
                "variable": {
                    "value": "x5",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x5, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_113": {
                "variable": {
                    "value": "x6",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[x6, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_124": {
                "variable": {
                    "value": "unet",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(12 * self.current_nside ** 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.HealpyChebyshev(self.current_nside, self.current_indices, K=self.K, Fout=1, initializer='he_normal', activation='sigmoid', use_bias=True, use_bn=False)(x7)",
                            "Call"
                        ]
                    ]
                }
            },
            "UpSampling1D_138": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "4 ** p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_130": {
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CMB_foreground_demo/wph_synthesis_script.py": {
        "torch": {
            "from_numpy_65": {
                "variable": {
                    "value": "data_torch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('./data/sim_QiU_stdr_3.npy').astype(np.complex64)",
                            "Call"
                        ],
                        [
                            "(data.real - data_mean_real) / data_std_real + 1j * (data.imag - data_mean_imag) / data_std_imag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "data_torch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[int(M / 4):int(-M / 4), int(N / 4):int(-N / 4)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "x_curr",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_curr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.reshape((M, N, 2)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "x_curr[..., 0] + 1j * x_curr[..., 1]",
                            "BinOp"
                        ],
                        [
                            "x.reshape((M, N)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_curr).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "loss_tot",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_hist_real * torch.log(target_hist_real) - target_hist_real * torch.log(hist_real + epsilon_log)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "target_hist_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softhist(data_torch.real.flatten())",
                            "Call"
                        ],
                        [
                            "target_hist_real.to(device)",
                            "Call"
                        ],
                        [
                            "target_hist_real / torch.sum(target_hist_real)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_81": {
                "input": {
                    "value": "target_hist_imag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softhist(data_torch.imag.flatten())",
                            "Call"
                        ],
                        [
                            "target_hist_imag.to(device)",
                            "Call"
                        ],
                        [
                            "target_hist_imag / torch.sum(target_hist_imag)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_84": {
                "input": {
                    "value": "target_hist_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softhist(data_torch.real.flatten())",
                            "Call"
                        ],
                        [
                            "target_hist_real.to(device)",
                            "Call"
                        ],
                        [
                            "target_hist_real / torch.sum(target_hist_real)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_85": {
                "input": {
                    "value": "target_hist_imag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softhist(data_torch.imag.flatten())",
                            "Call"
                        ],
                        [
                            "target_hist_imag.to(device)",
                            "Call"
                        ],
                        [
                            "target_hist_imag / torch.sum(target_hist_imag)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_126": {
                "variable": {
                    "value": "x_curr_wreal",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_curr, x_curr.real + 1j * 1e-09, x_curr.imag + 1j * 1e-09)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(coeffs_chunk - coeffs[..., indices]) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "target_hist_imag * torch.log(target_hist_imag) - target_hist_imag * torch.log(hist_imag + epsilon_log)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "hist_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softhist(x_curr.real.flatten())",
                            "Call"
                        ],
                        [
                            "hist_real / torch.sum(hist_real)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_147": {
                "input": {
                    "value": "hist_imag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softhist(x_curr.imag.flatten())",
                            "Call"
                        ],
                        [
                            "hist_imag / torch.sum(hist_imag)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_24": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "self.sigma * (x - self.delta / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_136": {
                "input": {
                    "value": "coeffs_chunk - coeffs[..., indices]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_150": {
                "input": {
                    "value": "hist_real + epsilon_log",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_151": {
                "input": {
                    "value": "hist_imag + epsilon_log",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "bins",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}