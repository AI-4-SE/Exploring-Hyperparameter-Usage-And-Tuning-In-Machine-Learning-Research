{
    "apps/classification/image/main.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "2809",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_268": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_184": {
                "variable": {
                    "value": "batchnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "batchnorm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_264": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_378": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_379": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_422": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "dir + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_105": {
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_200": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_205": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, output.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets, target.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_193": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_207": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_212": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_215": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_229": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/classification/pointcloud/ModelNetDataLoader.py": {
        "torch": {}
    },
    "apps/classification/pointcloud/main.py": {
        "torch": {
            "DataLoader_152": {
                "variable": {
                    "value": "trainDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(train_data, train_label, rotation=ROTATION)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "testDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testDataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNetDataLoader(test_data, test_label, rotation=ROTATION)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_188": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(classifier.parameters(), lr=0.01, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(classifier.parameters(), lr=args.learning_rate, betas=(0.9, 0.999), eps=1e-08, weight_decay=args.decay_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_209": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(points)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "apps/classification/pointcloud/pointnet.py": {
        "torch": {
            "mean_279": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.bmm(trans, trans.transpose(2, 1) - I), dim=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_327": {
                "variable": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_328": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_25": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "alpha_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_80": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_89": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_120": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_121": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_122": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "alpha_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_188": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_189": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_190": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_195": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.dropout(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_207": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_208": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_209": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_210": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_211": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_212": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_213": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_214": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_215": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_216": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cat_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_222": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_223": {
                "variable": {
                    "value": "self.bnc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_224": {
                "variable": {
                    "value": "self.bnc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_226": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4944",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_227": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_228": {
                "variable": {
                    "value": "self.convs3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_229": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "part_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_230": {
                "variable": {
                    "value": "self.bns1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_231": {
                "variable": {
                    "value": "self.bns2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_232": {
                "variable": {
                    "value": "self.bns3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "point_cloud_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.stn(point_cloud)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "trans",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_242": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(point_cloud_transformed))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_244": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_248": {
                "variable": {
                    "value": "net_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(point, label)",
                            "Call"
                        ],
                        [
                            "self.fstn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.fstn(out3)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "trans_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_251": {
                "variable": {
                    "value": "out4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(net_transformed))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_256": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bnc1(self.fc1(out_max))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_257": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bnc2(self.dropout(self.fc2(net)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "out_max",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_max, label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[expand, out1, out2, out3, out4, out5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_263": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bns1(self.convs1(concat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_264": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bns2(self.convs2(net2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_265": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bns3(self.convs3(net2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_268": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2.view(-1, self.part_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_289": {
                "variable": {
                    "value": "seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_291": {
                "variable": {
                    "value": "label_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(8, 16)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_302": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1088",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_303": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_304": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_305": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_306": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_307": {
                "variable": {
                    "value": "self.bn1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_308": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_309": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_316": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_317": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_320": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, self.k)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.stn(point_cloud)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "trans",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(point, label)",
                            "Call"
                        ],
                        [
                            "self.fstn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.fstn(out3)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "trans_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_276": {
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trans.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_279": {
                "input": {
                    "value": "torch.bmm(trans, trans.transpose(2, 1) - I)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_119": {
                "in_channels": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_198": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_253": {
                "input": {
                    "value": "out5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn5(self.conv5(out4))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_279": {
                "input": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.stn(point_cloud)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "trans",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans.transpose(2, 1) - I",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "np.eye(self.k).flatten().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_169": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Quadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.PseudoHuber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Huber, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.Welsch, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "robustpool.RobustGlobalPool2dFn.apply(x.unsqueeze(-1), robustpool.TruncatedQuadratic, alpha_tensor)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "out3.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x.view(-1, self.k), dim=-1)",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, n_pts, self.k)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "apps/classification/pointcloud/utils.py": {
        "torch": {
            "save_35": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'train_accuracy': train_accuracy, 'test_accuracy': test_accuracy, 'test_map': test_map, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path + '/%s-%04d.pth' % (modelnet, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_20": {
                "n": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size()[1]",
                            "Subscript"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_41": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_42": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, pred.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets, target.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/geometry_utilities.py": {
        "torch": {
            "einsum_41": {
                "variable": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(angle_axis, angle_axis)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "bearings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bi,bi->b', (angle_axis, angle_axis))",
                            "Call"
                        ],
                        [
                            "theta2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "r_skew",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis / theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_23": {
                "variable": {
                    "value": "r_skew",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_23": {
                "variable": {
                    "value": "r_skew",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_36": {
                "variable": {
                    "value": "(rx, ry, rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis",
                            "Method Argument"
                        ],
                        [
                            "angle_axis",
                            "Method Argument"
                        ],
                        [
                            "angle_axis",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_37": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r[..., 0]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(angle_axis, 3, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, -rz, ry, rz, ones, -rx, -ry, rx, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_94": {
                "input": {
                    "value": "bearings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(p, (0, 1), 'constant', 1.0)",
                            "Call"
                        ],
                        [
                            "bearings",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_62": {
                "equation": {
                    "value": "brs,bms->bmr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R, p)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_30": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "r.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "r.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "input": {
                    "value": "r_skew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(r).unsqueeze(-1).repeat_interleave(3, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "r_skew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(r).unsqueeze(-1).repeat_interleave(3, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ddn/pytorch/leastsquares.py": {
        "torch": {
            "device_253": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_254": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_255": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_256": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_257": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_258": {
                "variable": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_output, grad_bias)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "solve_159": {
                "variable": {
                    "value": "(w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grad_output, grad_bias), 1).view(B, U_sz, 1)",
                            "Call"
                        ],
                        [
                            "grad_output.view(B, U_sz, 1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "torch.einsum('bij,bik->bjk', R, R)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_204": {
                "variable": {
                    "value": "grad_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.einsum('bn,bnm->bm', w[:, :C].view(B, C), weightedX) + w_bias * weights.view(B, T)).view(B, 1, T)",
                            "Call"
                        ],
                        [
                            "(torch.einsum('bn,bnm->bm', w[:, :C].view(B, C), weightedX) + w_bias).view(B, 1, T)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_target, 0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_206": {
                "variable": {
                    "value": "grad_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "((target.view(B, T) - torch.einsum('bn,bnm->bm', output.view(B, C), input) - bias) * (torch.einsum('bn,bnm->bm', w[:, :C].view(B, C), input) + w_bias)).view(B, 1, T)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad_weights, 0, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradcheck_282": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T1, W1, 0.001, False, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_284": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T2, W2, 0.001, False, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_288": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T1, W1, 0.001, True, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_290": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T2, W2, 0.001, True, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_295": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T1, None, 0.001, False, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_297": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T2, None, 0.001, False, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_301": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T1, None, 0.001, True, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_303": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ],
                        [
                            "WeightedLeastSquaresFcn.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, T2, None, 0.001, True, enable_bias, inverse_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_307": {
                "input": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((B, 1, T), dtype=torch.double, device=device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_309": {
                "input": {
                    "value": "y0_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(X, T1, torch.ones_like(W1), 1e-06, False, True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y0_false",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(X, T1, None, 1e-06, False, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_319": {
                "input": {
                    "value": "y0_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(X, T1, None, 1e-06, False, True, 'cholesky')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y0_qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(X, T1, None, 1e-06, False, True, 'qr')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_67": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, U_sz, C + T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weightedsqrtT, torch.zeros(B, C))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "qr_80": {
                "variable": {
                    "value": "(Q, R)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "some": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_81": {
                "variable": {
                    "value": "Qtb",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bi->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.qr(A.permute(0, 2, 1), some=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_82": {
                "variable": {
                    "value": "(y, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Qtb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,bi->bj', Q, b).view(B, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.qr(A.permute(0, 2, 1), some=True)",
                            "Call"
                        ],
                        [
                            "R if cache_decomposition else None",
                            "IfExp"
                        ],
                        [
                            "torch.qr(A.permute(0, 2, 1), some=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "weightedXdotT",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnm,bm->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "einsum_134": {
                "equation": {
                    "value": "bnm,bm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_146": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, U_sz, C + T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "qr_157": {
                "variable": {
                    "value": "(_, R)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "some": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "solve_172": {
                "variable": {
                    "value": "(w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grad_output, grad_bias), 1).view(B, U_sz, 1)",
                            "Call"
                        ],
                        [
                            "grad_output.view(B, U_sz, 1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "AtA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((B, U_sz, U_sz), device=input.device, dtype=input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bik,bjk->bij', weightedX, input) + (beta * torch.eye(C, device=input.device, dtype=input.dtype)).view(1, C, C)",
                            "BinOp"
                        ],
                        [
                            "torch.empty((B, U_sz, U_sz), device=input.device, dtype=input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bik,bjk->bij', weightedX, input) + (ctx.beta * torch.eye(C, device=input.device, dtype=input.dtype)).view(1, C, C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_solve_174": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((grad_output, grad_bias), 1).view(B, U_sz, 1)",
                            "Call"
                        ],
                        [
                            "grad_output.view(B, U_sz, 1)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.cholesky(AtA)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_266": {
                "input": {
                    "value": "torch.einsum('bnm,bn->bm', X, y) + y0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "T1.view(B, T)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "A[:, -1, T:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_92": {
                "variable": {
                    "value": "AtA",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, U_sz, U_sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "AtA[:, :C, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "Atb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weightedXdotT, weightedTSum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_104": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AtA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((B, U_sz, U_sz), device=input.device, dtype=input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bik,bjk->bij', weightedX, input) + (beta * torch.eye(C, device=input.device, dtype=input.dtype)).view(1, C, C)",
                            "BinOp"
                        ],
                        [
                            "torch.empty((B, U_sz, U_sz), device=input.device, dtype=input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bik,bjk->bij', weightedX, input) + (ctx.beta * torch.eye(C, device=input.device, dtype=input.dtype)).view(1, C, C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_solve_105": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Atb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((weightedXdotT, weightedTSum), 1).view(B, U_sz, 1)",
                            "Call"
                        ],
                        [
                            "weightedXdotT.view(B, U_sz, 1)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.cholesky(AtA)",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_107": {
                "variable": {
                    "value": "(y, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Atb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((weightedXdotT, weightedTSum), 1).view(B, U_sz, 1)",
                            "Call"
                        ],
                        [
                            "weightedXdotT.view(B, U_sz, 1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "AtA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((B, U_sz, U_sz), device=input.device, dtype=input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bik,bjk->bij', weightedX, input) + (beta * torch.eye(C, device=input.device, dtype=input.dtype)).view(1, C, C)",
                            "BinOp"
                        ],
                        [
                            "torch.empty((B, U_sz, U_sz), device=input.device, dtype=input.dtype)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bik,bjk->bij', weightedX, input) + (ctx.beta * torch.eye(C, device=input.device, dtype=input.dtype)).view(1, C, C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "(B, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "A[:, -1, T:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_159": {
                "equation": {
                    "value": "bij,bik->bjk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.qr(A.permute(0, 2, 1), some=True)",
                            "Call"
                        ],
                        [
                            "R if cache_decomposition else None",
                            "IfExp"
                        ],
                        [
                            "torch.qr(A.permute(0, 2, 1), some=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_163": {
                "variable": {
                    "value": "AtA",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, U_sz, U_sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "AtA[:, :C, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_265": {
                "input": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((B, 1, T), dtype=torch.double, device=device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_273": {
                "input": {
                    "value": "y0tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(X, T1, None, 1e-06, False, enable_bias, inverse_mode)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(X, T1, torch.ones_like(W1), 1e-06, False, enable_bias, inverse_mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.repeat(B, 1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_64": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.repeat(B, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_65": {
                "equation": {
                    "value": "bnm,bm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_66": {
                "equation": {
                    "value": "bm,bm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "target.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_86": {
                "equation": {
                    "value": "bnm,bm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_87": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "target.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_144": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.repeat(B, 1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_144": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.repeat(B, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_145": {
                "equation": {
                    "value": "bnm,bm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_185": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.repeat(B, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "(target.view(B, T) - torch.einsum('bn,bnm->bm', output.view(B, C), input) - bias).view(B, 1, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_187": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.repeat(B, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "(torch.einsum('bn,bnm->bm', w[:, :C].view(B, C), input) + w_bias).view(B, 1, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_266": {
                "equation": {
                    "value": "bnm,bn->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((B, C, T), dtype=torch.double, device=device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_74": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_78": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "weights.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_94": {
                "equation": {
                    "value": "bik,bjk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "einsum_99": {
                "equation": {
                    "value": "bik,bjk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "eye_151": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_155": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "weights.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_165": {
                "equation": {
                    "value": "bik,bjk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "einsum_169": {
                "equation": {
                    "value": "bik,bjk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weightedX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ],
                        [
                            "input if weights is None else torch.einsum('bnm,bm->bnm', input, weights.view(B, -1))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "einsum_190": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w[:, :C].view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_201": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w[:, :C].view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_194": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w[:, :C].view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_270": {
                "equation": {
                    "value": "bnm,bn->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((B, C, T), dtype=torch.double, device=device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "einsum_193": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "output.view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_198": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w[:, :C].view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_95": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_100": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_166": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_170": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w[:, :C].view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_197": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "output.view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_186": {
                "equation": {
                    "value": "bn,bnm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "output.view(B, C)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/node.py": {
        "torch": {
            "zeros_like_173": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "torch.no_grad()(self.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "y.reshape(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "enable_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_197": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "torch.no_grad()(self.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "y.reshape(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "allclose_268": {
                "input": {
                    "value": "fY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "grad(f, y, grad_outputs=torch.ones_like(f), create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.enable_grad()(fY.reshape)(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(fY)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(B, dim=-1)",
                            "Call"
                        ],
                        [
                            "B.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_284": {
                "variable": {
                    "value": "A_decomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hY.detach()",
                            "Call"
                        ],
                        [
                            "self.linear_constraint_parameters(y)",
                            "Call"
                        ],
                        [
                            "self._expand_as_batch(A)",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_285": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(B, dim=-1)",
                            "Call"
                        ],
                        [
                            "B.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "input2": {
                    "value": "A_decomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(A, upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(A[i, ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_331": {
                "variable": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "torch.no_grad()(self.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "y.reshape(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_333": {
                "variable": {
                    "value": "(yiX,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "torch.no_grad()(self.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "y.reshape(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(y, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lstsq_515": {
                "variable": {
                    "value": "(solution, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fY[i, :].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "hY[i, :, :].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_522": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.enable_grad()(self._get_constraint_set)(xs, y)",
                            "Call"
                        ],
                        [
                            "self.equality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self._ensure2d(h)",
                            "Call"
                        ],
                        [
                            "self.equality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self.equality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self._ensure2d(h)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bpm,bm->bp', (A, y)) - d",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_533": {
                "input": {
                    "value": "hY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_constraint_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "self._batch_jacobian(h, y, create_graph=True)",
                            "Call"
                        ],
                        [
                            "hY",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(hY)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_538": {
                "input": {
                    "value": "LY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fY - torch.einsum('ab,abc->ac', (nu, hY))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(fY)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_666": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gi.isclose(torch.zeros_like(gi), rtol=0.0, atol=self.eps).long().sum() for gi in g]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "all_722": {
                "input": {
                    "value": "g <= self.eps",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_248": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.enable_grad()(self.objective)(*xs, y=y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "torch.no_grad()(self.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "y.reshape(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "self._gradient_init(xs, y, v, ctx)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(f)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "input": {
                    "value": "fY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "grad(f, y, grad_outputs=torch.ones_like(f), create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.enable_grad()(fY.reshape)(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(B, dim=-1)",
                            "Call"
                        ],
                        [
                            "B.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_439": {
                "equation": {
                    "value": "bpm,bmq->bpq",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_440": {
                "equation": {
                    "value": "bpm,bm->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, -1.0 * u)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_446": {
                "equation": {
                    "value": "bmp,bp->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(t, s)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_522": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.enable_grad()(self._get_constraint_set)(xs, y)",
                            "Call"
                        ],
                        [
                            "self.equality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self._ensure2d(h)",
                            "Call"
                        ],
                        [
                            "self.equality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self.equality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self._ensure2d(h)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bpm,bm->bp', (A, y)) - d",
                            "BinOp"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_533": {
                "input": {
                    "value": "hY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_constraint_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "self._batch_jacobian(h, y, create_graph=True)",
                            "Call"
                        ],
                        [
                            "hY",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_537": {
                "equation": {
                    "value": "ab,abc->ac",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(nu, hY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_538": {
                "input": {
                    "value": "fY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "grad(f, y, grad_outputs=torch.ones_like(f), create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.enable_grad()(fY.reshape)(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_788": {
                "equation": {
                    "value": "bpm,bm->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_808": {
                "equation": {
                    "value": "bpm,bmq->bpq",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_809": {
                "equation": {
                    "value": "bpm,bm->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, -1.0 * u)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_815": {
                "equation": {
                    "value": "bmp,bp->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(t, s)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_824": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "gradient",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gradient, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_127": {
                "n": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "H.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_184": {
                "tensors": {
                    "value": "jacobian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jacobian",
                            "Call"
                        ],
                        [
                            "y.new_zeros(self.b, m, n)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "input": {
                    "value": "y.shape + xs[i].shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "enable_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_427": {
                "n": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "H.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_427": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_456": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bmc,bm->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Bi, uts)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "enable_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_711": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bmc,bm->bc', (Bi, uts))",
                            "Call"
                        ],
                        [
                            "g - torch.einsum('bpc,bp->bc', (Ci, s))",
                            "BinOp"
                        ],
                        [
                            "self.inequality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self._ensure2d(g)",
                            "Call"
                        ],
                        [
                            "self.inequality_constraints(*xs, y=y)",
                            "Call"
                        ],
                        [
                            "self._ensure2d(g)",
                            "Call"
                        ],
                        [
                            "g.masked_select(mask).reshape(self.b, -1) if mask.any() else None",
                            "IfExp"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_717": {
                "variable": {
                    "value": "constraint_set",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_797": {
                "n": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "H.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_797": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_841": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "x_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(xs_split, xs_sizes, self.n)",
                            "Call"
                        ],
                        [
                            "zip(xs_split, xs_sizes)",
                            "Call"
                        ],
                        [
                            "zip(xs_split, xs_sizes, self.n)",
                            "Call"
                        ],
                        [
                            "zip(xs_split, xs_sizes, self.n)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "input": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(xs_split, xs_sizes, self.n)",
                            "Call"
                        ],
                        [
                            "zip(xs_split, xs_sizes)",
                            "Call"
                        ],
                        [
                            "zip(xs_split, xs_sizes, self.n)",
                            "Call"
                        ],
                        [
                            "zip(xs_split, xs_sizes, self.n)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_248": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.enable_grad()(self.objective)(*xs, y=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_260": {
                "input": {
                    "value": "fY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "grad(f, y, grad_outputs=torch.ones_like(f), create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.enable_grad()(fY.reshape)(self.b, -1)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "self._get_objective_derivatives(xs, y)",
                            "Call"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ],
                        [
                            "fY",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_260": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_290": {
                "variable": {
                    "value": "A_decomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_291": {
                "variable": {
                    "value": "X[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "B[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "A_decomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(A, upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(A[i, ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_423": {
                "equation": {
                    "value": "b,bmn->bmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(nu[:, i], hiYY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_615": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_143": {
                "equation": {
                    "value": "bmc,bm->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Bi, u)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "solve_294": {
                "variable": {
                    "value": "(X[i, ...], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "B[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "A[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_459": {
                "equation": {
                    "value": "bpc,bp->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Ci, s)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_823": {
                "equation": {
                    "value": "bmc,bm->bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Bi, u)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_454": {
                "equation": {
                    "value": "b,bmc->bmc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(nu[:, j], hjXiY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "enable_grad_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_666": {
                "input": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_416": {
                "equation": {
                    "value": "ab,abc->ac",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(nu, hY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/optimal_transport.py": {
        "torch": {
            "randn_292": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 5, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradcheck_298": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_301": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(torch.exp(-1.0 * M), None, None, 1.0, 1e-06, 1000, True, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_305": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 1.0, 1e-06, 1000, False, 'full')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_308": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 10.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_311": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 10.0, 1e-06, 1000, False, 'full')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_314": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((M.shape[0], M.shape[1]), dtype=torch.double, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_315": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((M.shape[0], M.shape[2]), dtype=torch.double, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_317": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-09, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_321": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((M.shape[0], M.shape[1]), dtype=torch.double, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_322": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((M.shape[0], M.shape[2]), dtype=torch.double, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_324": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, None, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_327": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, c, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_330": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_333": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 10.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_337": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((1, M.shape[1]), dtype=torch.double, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_338": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((1, M.shape[2]), dtype=torch.double, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_340": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_343": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-06, 1000, False, 'full')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_52": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((3, 5, 7), dtype=torch.double, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "M.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_54": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P / alpha.view(B, H, 1) * r",
                            "BinOp"
                        ],
                        [
                            "P / beta.view(B, 1, W) * c",
                            "BinOp"
                        ],
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P * c",
                            "BinOp"
                        ],
                        [
                            "_sinkhorn_inline(M, r, c, gamma, eps, maxiters, logspace)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(M)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn.apply(M, r, c, self.gamma, self.eps, self.maxiters, self.logspace, self.method)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P / alpha.view(B, H, 1) * r",
                            "BinOp"
                        ],
                        [
                            "P / beta.view(B, 1, W) * c",
                            "BinOp"
                        ],
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P * c",
                            "BinOp"
                        ],
                        [
                            "_sinkhorn_inline(M, r, c, gamma, eps, maxiters, logspace)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(M)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn.apply(M, r, c, self.gamma, self.eps, self.maxiters, self.logspace, self.method)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_81": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((3, 5, 7), dtype=torch.double, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "M.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_83": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P / alpha.view(B, H, 1) * r",
                            "BinOp"
                        ],
                        [
                            "P / beta.view(B, 1, W) * c",
                            "BinOp"
                        ],
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P * c",
                            "BinOp"
                        ],
                        [
                            "_sinkhorn_inline(M, r, c, gamma, eps, maxiters, logspace)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(M)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn.apply(M, r, c, self.gamma, self.eps, self.maxiters, self.logspace, self.method)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P / alpha.view(B, H, 1) * r",
                            "BinOp"
                        ],
                        [
                            "P / beta.view(B, 1, W) * c",
                            "BinOp"
                        ],
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P * c",
                            "BinOp"
                        ],
                        [
                            "_sinkhorn_inline(M, r, c, gamma, eps, maxiters, logspace)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(M)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn.apply(M, r, c, self.gamma, self.eps, self.maxiters, self.logspace, self.method)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P / alpha.view(B, H, 1) * r",
                            "BinOp"
                        ],
                        [
                            "P / beta.view(B, 1, W) * c",
                            "BinOp"
                        ],
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P * c",
                            "BinOp"
                        ],
                        [
                            "_sinkhorn_inline(M, r, c, gamma, eps, maxiters, logspace)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(M)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn.apply(M, r, c, self.gamma, self.eps, self.maxiters, self.logspace, self.method)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_155": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P / alpha.view(B, H, 1) * r",
                            "BinOp"
                        ],
                        [
                            "P / beta.view(B, 1, W) * c",
                            "BinOp"
                        ],
                        [
                            "torch.pow(M, gamma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-1.0 * gamma * (M - torch.amin(M, 2, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "P * c",
                            "BinOp"
                        ],
                        [
                            "_sinkhorn_inline(M, r, c, gamma, eps, maxiters, logspace)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(M)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn.apply(M, r, c, self.gamma, self.eps, self.maxiters, self.logspace, self.method)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "vHAt1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dJdM[:, 1:H, 0:W]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "vHAt2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dJdM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0 * ctx.gamma * P * dJdP",
                            "BinOp"
                        ],
                        [
                            "dJdM / (-1.0 * M)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_290": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_46": {
                "input": {
                    "value": "M > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_75": {
                "input": {
                    "value": "M > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cholesky_solve_179": {
                "variable": {
                    "value": "block_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "PdivC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P[:, 1:H, 0:W] / beta.view(B, 1, W)",
                            "BinOp"
                        ]
                    ]
                },
                "input2": {
                    "value": "block_11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(RminusPPdivC)",
                            "Call"
                        ],
                        [
                            "torch.eye(H - 1, device=M.device, dtype=M.dtype).view(1, H - 1, H - 1).repeat(B, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_187": {
                "variable": {
                    "value": "AinvHAt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, H + W - 1, H + W - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "M.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_embed_188": {
                "variable": {
                    "value": "AinvHAt[:, 0:H - 1, 0:H - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha[:, 1:H]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_embed_189": {
                "variable": {
                    "value": "AinvHAt[:, H - 1:H + W - 1, H - 1:H + W - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(P, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_193": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.cat((vHAt1, vHAt2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_275": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((3, 5, 7), dtype=torch.double, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "M.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_295": {
                "input": {
                    "value": "torch.isclose(sinkhorn(M), f(M))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_296": {
                "input": {
                    "value": "torch.isclose(sinkhorn(M), sinkhorn(torch.exp(-1.0 * M), logspace=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_314": {
                "*size": {
                    "value": "(M.shape[0], M.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_315": {
                "*size": {
                    "value": "(M.shape[0], M.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_321": {
                "*size": {
                    "value": "(M.shape[0], M.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_322": {
                "*size": {
                    "value": "(M.shape[0], M.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_337": {
                "*size": {
                    "value": "(1, M.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_338": {
                "*size": {
                    "value": "(1, M.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "torch.abs(beta - c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_92": {
                "input": {
                    "value": "torch.abs(beta - c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[1]), dtype=torch.double, requires_grad=False), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[1]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((1, M.shape[1]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 / H if r is None else r.unsqueeze(dim=2)",
                            "IfExp"
                        ],
                        [
                            "1.0 / H if r is None else r.unsqueeze(dim=2)",
                            "IfExp"
                        ],
                        [
                            "ctx.inv_r_sum * r",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_147": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[2]), dtype=torch.double, requires_grad=False), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[2]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((1, M.shape[2]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 / W if c is None else c.unsqueeze(dim=1)",
                            "IfExp"
                        ],
                        [
                            "1.0 / W if c is None else c.unsqueeze(dim=1)",
                            "IfExp"
                        ],
                        [
                            "ctx.inv_c_sum * c",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_167": {
                "variable": {
                    "value": "block_11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RminusPPdivC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(alpha[:, 1:H]) - torch.einsum('bij,bkj->bik', P[:, 1:H, 0:W], PdivC)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isclose_295": {
                "input": {
                    "value": "sinkhorn(M)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "f(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isclose_296": {
                "input": {
                    "value": "sinkhorn(M)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sinkhorn(torch.exp(-1.0 * M), logspace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_301": {
                "input": {
                    "value": "-1.0 * M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "beta - c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_92": {
                "input": {
                    "value": "beta - c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_embed_165": {
                "input": {
                    "value": "alpha[:, 1:H]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_165": {
                "equation": {
                    "value": "bij,bkj->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "P[:, 1:H, 0:W]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_170": {
                "variable": {
                    "value": "block_11",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "H - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "M.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_embed_180": {
                "input": {
                    "value": "1.0 / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_180": {
                "equation": {
                    "value": "bji,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "block_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky_solve(PdivC, block_11)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_182": {
                "input": {
                    "value": "vHAt1.view(B, H - 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "block_11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(RminusPPdivC)",
                            "Call"
                        ],
                        [
                            "torch.eye(H - 1, device=M.device, dtype=M.dtype).view(1, H - 1, H - 1).repeat(B, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_182": {
                "equation": {
                    "value": "bi,bji->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vHAt2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(dJdM, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_183": {
                "equation": {
                    "value": "bi,bij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vHAt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(dJdM[:, 1:H, 0:W], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "(vHAt1, vHAt2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_193": {
                "input": {
                    "value": "AinvHAt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((B, H + W - 1, H + W - 1), device=M.device, dtype=M.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "amin_54": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((3, 5, 7), dtype=torch.double, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "M.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "amin_83": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((3, 5, 7), dtype=torch.double, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "M.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ],
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[1]), dtype=torch.double, requires_grad=False), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[1]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((1, M.shape[1]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 / H if r is None else r.unsqueeze(dim=2)",
                            "IfExp"
                        ],
                        [
                            "1.0 / H if r is None else r.unsqueeze(dim=2)",
                            "IfExp"
                        ],
                        [
                            "ctx.inv_r_sum * r",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[2]), dtype=torch.double, requires_grad=False), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((M.shape[0], M.shape[2]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "normalize(torch.rand((1, M.shape[2]), dtype=torch.double, requires_grad=True), p=1.0)",
                            "Call"
                        ],
                        [
                            "1.0 / W if c is None else c.unsqueeze(dim=1)",
                            "IfExp"
                        ],
                        [
                            "1.0 / W if c is None else c.unsqueeze(dim=1)",
                            "IfExp"
                        ],
                        [
                            "ctx.inv_c_sum * c",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_208": {
                "input": {
                    "value": "r[:, 1:H] * v1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "(torch.zeros(B, 1, device=r.device), v1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "c * v2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_296": {
                "input": {
                    "value": "-1.0 * M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_173": {
                "variable": {
                    "value": "block_11[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "RminusPPdivC[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "r.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/pnp_node.py": {
        "torch": {
            "sum_81": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p3d_projected - p2d) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p3d_projected - p2d) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_70": {
                "equation": {
                    "value": "bnd,bnd->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(p2d_bearings, p3d_transform)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_82": {
                "equation": {
                    "value": "bn,bn->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w, z2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_98": {
                "equation": {
                    "value": "bn,bn->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w, huber(z2, self.alpha))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LBFGS_155": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "max_eval": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tolerance_grad": {
                    "value": "1e-40",
                    "type": "float",
                    "possible_values": []
                },
                "tolerance_change": {
                    "value": "1e-40",
                    "type": "float",
                    "possible_values": []
                },
                "history_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "line_search_fn": {
                    "value": "strong_wolfe",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_94": {
                "condition": {
                    "value": "z2 <= alpha ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * z2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * (z2.sqrt() - 0.5 * alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_144": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.solvePnPRansac(p3d_np[i, :, :], p2d_np[i, :, :], K_np, dist_coeff_np, iterationsCount=max_num_iterations, reprojectionError=reprojection_error_threshold, flags=cv2.SOLVEPNP_EPNP)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(rvec, dtype=p2d.dtype, device=p2d.device).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "p2d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p2d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "rvec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_146": {
                "variable": {
                    "value": "tvec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.solvePnPRansac(p3d_np[i, :, :], p2d_np[i, :, :], K_np, dist_coeff_np, iterationsCount=max_num_iterations, reprojectionError=reprojection_error_threshold, flags=cv2.SOLVEPNP_EPNP)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tvec, dtype=p2d.dtype, device=p2d.device).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "p2d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p2d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "variable": {
                    "value": "tvec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "enable_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_148": {
                "input": {
                    "value": "tvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.solvePnPRansac(p3d_np[i, :, :], p2d_np[i, :, :], K_np, dist_coeff_np, iterationsCount=max_num_iterations, reprojectionError=reprojection_error_threshold, flags=cv2.SOLVEPNP_EPNP)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tvec, dtype=p2d.dtype, device=p2d.device).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/projections.py": {
        "torch": {
            "sum_53": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu * torch.arange(1, v.size()[-1] + 1, dtype=v.dtype, device=v.device) > mu_cumulative_sum - z",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_70": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_173": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs().sum(dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "v.norm(p=2, dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "u.max(dim=-1, keepdim=True)[0].gt(z)",
                            "Call"
                        ],
                        [
                            "method.project(input, radius.item())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(v - theta).clamp(min=0.0)",
                            "Call"
                        ],
                        [
                            "beta * torch.where(v < 0, -torch.ones_like(v), torch.ones_like(v))",
                            "BinOp"
                        ],
                        [
                            "L1Sphere.project(v, z=z)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, w, v)",
                            "Call"
                        ],
                        [
                            "z * v.div(v.norm(p=2, dim=-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "L2Sphere.project(v, z=z)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, w, v)",
                            "Call"
                        ],
                        [
                            "u * torch.where(v < 0, -torch.ones_like(v), torch.ones_like(v))",
                            "BinOp"
                        ],
                        [
                            "u * torch.where(v < 0, -torch.ones_like(v), torch.ones_like(v))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_182": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs().sum(dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "v.norm(p=2, dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "u.max(dim=-1, keepdim=True)[0].gt(z)",
                            "Call"
                        ],
                        [
                            "method.project(input, radius.item())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_output - mask * (masked_output.sum(-1, keepdim=True) / mask.sum(-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "DYh.abs() * grad_output - DYh * ((DYh * grad_output).sum(-1, keepdim=True) / (DYh * DYh).sum(-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "L1Sphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "ratio * (grad_output - output * (output * grad_output).sum(-1, keepdim=True).div(output_norm.pow(2)))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "L2Sphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "grad_output - hY.abs() * grad_output",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "LInfSphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ctx.method.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_211": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_211": {
                "variable": {
                    "value": "unit_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(v).norm(p=2, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_212": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(output > 0.0, torch.ones_like(input), torch.zeros_like(input))",
                            "Call"
                        ],
                        [
                            "torch.isclose(v, torch.zeros_like(v), rtol=0.0, atol=1e-12).sum(dim=-1, keepdim=True) == v.size(-1)",
                            "Compare"
                        ],
                        [
                            "output.abs().ge(output.abs().max(dim=-1, keepdim=True)[0])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unit_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(v).div(torch.ones_like(v).norm(p=2, dim=-1, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_264": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs().sum(dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "v.norm(p=2, dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "u.max(dim=-1, keepdim=True)[0].gt(z)",
                            "Call"
                        ],
                        [
                            "method.project(input, radius.item())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(v - theta).clamp(min=0.0)",
                            "Call"
                        ],
                        [
                            "beta * torch.where(v < 0, -torch.ones_like(v), torch.ones_like(v))",
                            "BinOp"
                        ],
                        [
                            "L1Sphere.project(v, z=z)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, w, v)",
                            "Call"
                        ],
                        [
                            "z * v.div(v.norm(p=2, dim=-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "L2Sphere.project(v, z=z)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, w, v)",
                            "Call"
                        ],
                        [
                            "u * torch.where(v < 0, -torch.ones_like(v), torch.ones_like(v))",
                            "BinOp"
                        ],
                        [
                            "u * torch.where(v < 0, -torch.ones_like(v), torch.ones_like(v))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_273": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs().sum(dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "v.norm(p=2, dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "u.max(dim=-1, keepdim=True)[0].gt(z)",
                            "Call"
                        ],
                        [
                            "method.project(input, radius.item())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_output - mask * (masked_output.sum(-1, keepdim=True) / mask.sum(-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "DYh.abs() * grad_output - DYh * ((DYh * grad_output).sum(-1, keepdim=True) / (DYh * DYh).sum(-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "L1Sphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "ratio * (grad_output - output * (output * grad_output).sum(-1, keepdim=True).div(output_norm.pow(2)))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "L2Sphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "grad_output - hY.abs() * grad_output",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "LInfSphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ctx.method.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_306": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "u.gt(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "torch.where(u.gt(z), z, u)",
                            "Call"
                        ],
                        [
                            "torch.where(u.ge(u.max(dim=-1, keepdim=True)[0]), z, u)",
                            "Call"
                        ],
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "torch.where(u.gt(z), z, u)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_307": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "u.ge(u.max(dim=-1, keepdim=True)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "torch.where(u.gt(z), z, u)",
                            "Call"
                        ],
                        [
                            "torch.where(u.ge(u.max(dim=-1, keepdim=True)[0]), z, u)",
                            "Call"
                        ],
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "torch.where(u.gt(z), z, u)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_358": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "u.gt(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "torch.where(u.gt(z), z, u)",
                            "Call"
                        ],
                        [
                            "torch.where(u.ge(u.max(dim=-1, keepdim=True)[0]), z, u)",
                            "Call"
                        ],
                        [
                            "v.abs()",
                            "Call"
                        ],
                        [
                            "torch.where(u.gt(z), z, u)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_369": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_outside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.abs().sum(dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "v.norm(p=2, dim=-1, keepdim=True).gt(z)",
                            "Call"
                        ],
                        [
                            "u.max(dim=-1, keepdim=True)[0].gt(z)",
                            "Call"
                        ],
                        [
                            "method.project(input, radius.item())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_outside",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_output - mask * (masked_output.sum(-1, keepdim=True) / mask.sum(-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "DYh.abs() * grad_output - DYh * ((DYh * grad_output).sum(-1, keepdim=True) / (DYh * DYh).sum(-1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "L1Sphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "ratio * (grad_output - output * (output * grad_output).sum(-1, keepdim=True).div(output_norm.pow(2)))",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "L2Sphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "grad_output - hY.abs() * grad_output",
                            "BinOp"
                        ],
                        [
                            "grad_input.reshape(output_size)",
                            "Call"
                        ],
                        [
                            "LInfSphere.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ],
                        [
                            "torch.where(is_outside, grad_input, grad_output)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ctx.method.gradient(grad_output, output, input, is_outside)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_70": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "input.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_70": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "input.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_119": {
                "condition": {
                    "value": "v < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-torch.ones_like(v)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isclose_210": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_210": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_211": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_309": {
                "condition": {
                    "value": "v < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-torch.ones_like(v)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_360": {
                "condition": {
                    "value": "v < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-torch.ones_like(v)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_395": {
                "data": {
                    "value": "[radius]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_55": {
                "input": {
                    "value": "mu_cumulative_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.cumsum(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "rho - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_119": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_309": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_360": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_53": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "v.size()[-1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask, unit_vector, v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ddn/pytorch/robust_vec_pool.py": {
        "torch": {
            "randn_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_71": {
                "variable": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.pow(z, 2.0) / alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_87": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LBFGS_134": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_eval": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tolerance_grad": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "tolerance_change": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "history_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "line_search_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "einsum_220": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bik->bk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky_solve(y_grad.view(B, C, -1), L).view(B, C)",
                            "Call"
                        ],
                        [
                            "torch.empty_like(y_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_246": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_260": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_82": {
                "condition": {
                    "value": "torch.abs(z) <= alpha",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * torch.pow(z, 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * torch.abs(z) - 0.5 * alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_139": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.view(B, C, 1) - x.view(B, C, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_201": {
                "input": {
                    "value": "k2 == 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cholesky_207": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H + ctx.hess_reg * torch.eye(C, dtype=x.dtype, device=x.device).view(1, C, C)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_solve_208": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_grad.view(B, C, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(H + ctx.hess_reg * torch.eye(C, dtype=x.dtype, device=x.device).view(1, C, C))",
                            "Call"
                        ],
                        [
                            "torch.cholesky(H[b, :, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_248": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 3, 5, 5), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_252": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 3, 5, 5), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradcheck_268": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RobustVectorPool2dFcn().apply",
                            "Attribute"
                        ],
                        [
                            "penalty.phi(z, alpha).sum()",
                            "Call"
                        ],
                        [
                            "penalty.phi(torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1), alpha).view(B, -1).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.minimum(f, f_median)",
                            "Call"
                        ],
                        [
                            "torch.minimum(f, f_final)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(x, p, alpha, 0, 0.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_52": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_86": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_88": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_89": {
                "condition": {
                    "value": "indx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ],
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ],
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.zeros_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-1.0 * alpha_on_z / z2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "-0.5 * torch.pow(z, 2.0) / alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_104": {
                "input": {
                    "value": "-0.5 * torch.pow(z, 2.0) / alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_114": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_115": {
                "condition": {
                    "value": "indx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ],
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ],
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.pow(z, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.full_like(z, alpha * alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_120": {
                "condition": {
                    "value": "indx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ],
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ],
                        [
                            "torch.abs(z) <= alpha",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(B, C, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(B, C, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_167": {
                "variable": {
                    "value": "(y_median, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(B, C, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(f <= f_median).view(B, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(x, p, 1.0)",
                            "Call"
                        ],
                        [
                            "y.clone()",
                            "Call"
                        ],
                        [
                            "torch.mean(x.view(B, C, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "RobustVectorPool2dFcn._optimize(x, y_mean, penalty, alpha)",
                            "Call"
                        ],
                        [
                            "torch.where((f <= f_median).view(B, 1), y, y_median)",
                            "Call"
                        ],
                        [
                            "RobustVectorPool2dFcn._optimize(x, y, penalty, alpha)",
                            "Call"
                        ],
                        [
                            "torch.where((f < f_final).view(B, 1), y, y_final)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y_median",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.median(x.view(B, C, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "RobustVectorPool2dFcn._optimize(x, y_median, penalty, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_171": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RobustVectorPool2dFcn().apply",
                            "Attribute"
                        ],
                        [
                            "penalty.phi(z, alpha).sum()",
                            "Call"
                        ],
                        [
                            "penalty.phi(torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1), alpha).view(B, -1).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.minimum(f, f_median)",
                            "Call"
                        ],
                        [
                            "torch.minimum(f, f_final)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_median",
                    "type": "variable",
                    "possible_values": [
                        [
                            "penalty.phi(torch.linalg.norm(y_median.view(B, C, 1) - x.view(B, C, -1), dim=1), alpha).view(B, -1).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_198": {
                "input": {
                    "value": "x_minus_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(B, C, 1) - x.view(B, C, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_205": {
                "equation": {
                    "value": "bik,bjk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x_minus_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(B, C, 1) - x.view(B, C, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_like_211": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histc_261": {
                "input": {
                    "value": "z.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "input": {
                    "value": "1.0 + torch.pow(z, 2.0) / alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_82": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_89": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_115": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_115": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "alpha * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_204": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_71": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_72": {
                "input": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(1.0 + torch.pow(z, 2.0) / alpha2)",
                            "Call"
                        ],
                        [
                            "torch.exp(-0.5 * torch.pow(z, 2.0) / alpha2) / alpha2",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_175": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.view(B, C, -1).shape[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "restarts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_179": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(f < f_final).view(B, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(x, p, 1.0)",
                            "Call"
                        ],
                        [
                            "y.clone()",
                            "Call"
                        ],
                        [
                            "torch.mean(x.view(B, C, -1), dim=2)",
                            "Call"
                        ],
                        [
                            "RobustVectorPool2dFcn._optimize(x, y_mean, penalty, alpha)",
                            "Call"
                        ],
                        [
                            "torch.where((f <= f_median).view(B, 1), y, y_median)",
                            "Call"
                        ],
                        [
                            "RobustVectorPool2dFcn._optimize(x, y, penalty, alpha)",
                            "Call"
                        ],
                        [
                            "torch.where((f < f_final).view(B, 1), y, y_final)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RobustVectorPool2dFcn._optimize(x, y_init, penalty, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_180": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RobustVectorPool2dFcn().apply",
                            "Attribute"
                        ],
                        [
                            "penalty.phi(z, alpha).sum()",
                            "Call"
                        ],
                        [
                            "penalty.phi(torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1), alpha).view(B, -1).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.minimum(f, f_median)",
                            "Call"
                        ],
                        [
                            "torch.minimum(f, f_final)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "penalty.phi(torch.linalg.norm(y_final.view(B, C, 1) - x.view(B, C, -1), dim=1), alpha).view(B, -1).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_214": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cholesky_solve_215": {
                "variable": {
                    "value": "v[b, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y_grad[b, :].view(C, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(H + ctx.hess_reg * torch.eye(C, dtype=x.dtype, device=x.device).view(1, C, C))",
                            "Call"
                        ],
                        [
                            "torch.cholesky(H[b, :, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_221": {
                "equation": {
                    "value": "bk,bik->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bi,bik->bk', v, k2 * x_minus_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_99": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_104": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_207": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_66": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(y.view(y.shape[0], y.shape[1], -1) - x.view(x.shape[0], x.shape[1], -1), dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(y.view(B, C, 1) - x.view(B, C, -1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.linalg.norm(x_minus_y, dim=1, keepdim=True) + 1e-09",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_165": {
                "input": {
                    "value": "y.view(B, C, 1) - x.view(B, C, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_169": {
                "input": {
                    "value": "y_median.view(B, C, 1) - x.view(B, C, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lstsq_217": {
                "input": {
                    "value": "y_grad[b, :].view(C, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "H[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_178": {
                "input": {
                    "value": "y_final.view(B, C, 1) - x.view(B, C, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/robustpool.py": {
        "torch": {
            "pow_80": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_82": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "w_sum.abs() <= 1e-09",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w.div(w_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_113": {
                "variable": {
                    "value": "phi_at_z",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "z <= alpha",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * torch.pow(z, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * (z - 0.5 * alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_119": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "z.abs() <= alpha",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_121": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "w_sum.abs() <= 1e-09",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w.div(w_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "w_sum.abs() <= 1e-09",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w.div(w_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_159": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(z) / (z.size(-1) * z.size(-2))",
                            "BinOp"
                        ],
                        [
                            "torch.where(w_sum.abs() <= 1e-09, torch.zeros_like(w), w.div(w_sum))",
                            "Call"
                        ],
                        [
                            "torch.where(w_sum.abs() <= 1e-09, torch.zeros_like(w), w.div(w_sum))",
                            "Call"
                        ],
                        [
                            "torch.where(w_sum.abs() <= 1e-09, torch.zeros_like(w), w.div(w_sum))",
                            "Call"
                        ],
                        [
                            "torch.clamp(Dy_at_x, -1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.where(w_sum.abs() <= 1e-09, torch.zeros_like(w), w.div(w_sum))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_189": {
                "variable": {
                    "value": "phi_at_z",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "z <= alpha",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * torch.pow(z, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * alpha * alpha * torch.ones_like(z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_195": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "z.abs() <= alpha",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_197": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "w_sum.abs() <= 1e-09",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w.div(w_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LBFGS_207": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_eval": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tolerance_grad": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "tolerance_change": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "history_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "line_search_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "where_247": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "f_mean <= f_median",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mean([-2, -1]).clone().requires_grad_()",
                            "Call"
                        ],
                        [
                            "RobustGlobalPool2dFn.runOptimisation(x, y_mean, method, alpha_scalar)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_median",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.flatten(start_dim=-2).median(dim=-1)[0].clone().requires_grad_()",
                            "Call"
                        ],
                        [
                            "RobustGlobalPool2dFn.runOptimisation(x, y_median, method, alpha_scalar)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_39": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_82": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1.0 + torch.pow(z, 2) / (alpha * alpha), -1.5)",
                            "Call"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ],
                        [
                            "(1.0 - z2_on_alpha2) * torch.exp(-0.5 * z2_on_alpha2) / alpha2",
                            "BinOp"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_119": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1.0 + torch.pow(z, 2) / (alpha * alpha), -1.5)",
                            "Call"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ],
                        [
                            "(1.0 - z2_on_alpha2) * torch.exp(-0.5 * z2_on_alpha2) / alpha2",
                            "BinOp"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_148": {
                "input": {
                    "value": "-torch.pow(z, 2) / (2.0 * alpha * alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_155": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1.0 + torch.pow(z, 2) / (alpha * alpha), -1.5)",
                            "Call"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ],
                        [
                            "(1.0 - z2_on_alpha2) * torch.exp(-0.5 * z2_on_alpha2) / alpha2",
                            "BinOp"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_195": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_195": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_197": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1.0 + torch.pow(z, 2) / (alpha * alpha), -1.5)",
                            "Call"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ],
                        [
                            "(1.0 - z2_on_alpha2) * torch.exp(-0.5 * z2_on_alpha2) / alpha2",
                            "BinOp"
                        ],
                        [
                            "torch.where(z.abs() <= alpha, torch.ones_like(z), torch.zeros_like(z))",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_274": {
                "data": {
                    "value": "[alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "input": {
                    "value": "1.0 + torch.pow(z, 2) / alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_113": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_156": {
                "input": {
                    "value": "-0.5 * z2_on_alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_189": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_189": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_148": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_74": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "z.abs()",
                            "Call"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ddn/pytorch/sample_nodes.py": {
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "y_stationary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(x), (-3.0 * x ** 2.0 - delta) / (4.0 * x), (-3.0 * x ** 2.0 + delta) / (4.0 * x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.index_select(a, dim=0, index=i).unsqueeze(0) for (a, i) in zip(y_stationary, y_min_indx)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pow_98": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(-1).unsqueeze(-1) - x",
                            "BinOp"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "ctx['z']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_100": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "w_sum.abs() <= 1e-09",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w.div(w_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "x_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.pow(x, 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, -1.0 * torch.ones_like(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_153": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 0] == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 / y[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_183": {
                "variable": {
                    "value": "nu",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x[:, 1] == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x[:, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 / y[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_222": {
                "variable": {
                    "value": "x_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_223": {
                "variable": {
                    "value": "x_outer",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bm,bn->bmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_224": {
                "variable": {
                    "value": "eye_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_245": {
                "variable": {
                    "value": "x_norm_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "x_norm_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_246": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_norm_sq <= 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x / torch.sqrt(x_norm_sq)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_254": {
                "variable": {
                    "value": "x_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_255": {
                "variable": {
                    "value": "x_outer",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bm,bn->bmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_256": {
                "variable": {
                    "value": "eye_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_257": {
                "variable": {
                    "value": "Dy_at_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_inner.unsqueeze(-1).unsqueeze(-1) <= 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "eye_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(x.size(1), dtype=x.dtype, device=x.device).expand_as(x_outer)",
                            "Call"
                        ],
                        [
                            "torch.eye(x.size(1), dtype=x.dtype, device=x.device).expand_as(x_outer)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "(torch.einsum('b,bmn->bmn', (x_inner, eye_batch)) - x_outer) / torch.pow(torch.einsum('bm,bm->b', (x, x)), 1.5).unsqueeze(-1).unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.index_select(a, dim=0, index=i).unsqueeze(0) for (a, i) in zip(y_stationary, y_min_indx)])",
                            "Call"
                        ],
                        [
                            "self.solve(x)",
                            "Call"
                        ],
                        [
                            "y.detach()",
                            "Call"
                        ],
                        [
                            "x.mean([-2, -1]).clone().requires_grad_()",
                            "Call"
                        ],
                        [
                            "self.runOptimisation(x, alpha, y)",
                            "Call"
                        ],
                        [
                            "y.detach()",
                            "Call"
                        ],
                        [
                            "self.solve(x, alpha)",
                            "Call"
                        ],
                        [
                            "-1.0 * x_aug / t",
                            "BinOp"
                        ],
                        [
                            "-1.0 * torch.abs(x[:, 0]).unsqueeze(-1) * x.new_ones(x.size(0), 2) / math.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "-1.0 * torch.abs(x[:, 1]).unsqueeze(-1) * torch.cat((torch.ones_like(x[:, 0:1]), x[:, 0:1]), dim=-1) / torch.sqrt(1.0 + torch.pow(x[:, 0], 2.0)).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x / torch.sqrt(torch.einsum('bm,bm->b', (x, x))).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.where(x_norm_sq <= 1.0, x.clone(), x / torch.sqrt(x_norm_sq))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LBFGS_64": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_eval": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tolerance_grad": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "tolerance_change": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "history_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "line_search_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_like_95": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.index_select(a, dim=0, index=i).unsqueeze(0) for (a, i) in zip(y_stationary, y_min_indx)])",
                            "Call"
                        ],
                        [
                            "self.solve(x)",
                            "Call"
                        ],
                        [
                            "y.detach()",
                            "Call"
                        ],
                        [
                            "x.mean([-2, -1]).clone().requires_grad_()",
                            "Call"
                        ],
                        [
                            "self.runOptimisation(x, alpha, y)",
                            "Call"
                        ],
                        [
                            "y.detach()",
                            "Call"
                        ],
                        [
                            "self.solve(x, alpha)",
                            "Call"
                        ],
                        [
                            "-1.0 * x_aug / t",
                            "BinOp"
                        ],
                        [
                            "-1.0 * torch.abs(x[:, 0]).unsqueeze(-1) * x.new_ones(x.size(0), 2) / math.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "-1.0 * torch.abs(x[:, 1]).unsqueeze(-1) * torch.cat((torch.ones_like(x[:, 0:1]), x[:, 0:1]), dim=-1) / torch.sqrt(1.0 + torch.pow(x[:, 0], 2.0)).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x / torch.sqrt(torch.einsum('bm,bm->b', (x, x))).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.where(x_norm_sq <= 1.0, x.clone(), x / torch.sqrt(x_norm_sq))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_221": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_253": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_22": {
                "equation": {
                    "value": "b,bm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, x - self.x_target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_49": {
                "equation": {
                    "value": "bm,bm->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, -1.0 * (y ** 3 + 3.0 * x * y ** 2) / (3.0 * x * y ** 2 + 3.0 * x ** 2 * y - 6.0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "enable_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(1.0 + torch.pow(z, 2) / alpha2, -1.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_101": {
                "equation": {
                    "value": "b,bmn->bmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, Dy_at_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_117": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(y, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_133": {
                "equation": {
                    "value": "bm,bmn->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, (x_aug / t).unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_149": {
                "equation": {
                    "value": "b,b->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x[:, 0], x[:, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "equation": {
                    "value": "bm,bmn->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, Dy_at_x.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_176": {
                "equation": {
                    "value": "b,b->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x[:, 0], y[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_179": {
                "equation": {
                    "value": "b,b->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x[:, 1], x[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_182": {
                "input": {
                    "value": "1.0 + torch.pow(x[:, 0], 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_182": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_183": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_192": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_192": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_193": {
                "input": {
                    "value": "1.0 + torch.pow(x[:, 0], 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_195": {
                "equation": {
                    "value": "bm,bmn->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, Dy_at_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_208": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(y, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(y, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_214": {
                "input": {
                    "value": "torch.einsum('bm,bm->b', (x, x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_214": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_225": {
                "input": {
                    "value": "torch.einsum('bm,bm->b', (x, x))",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_226": {
                "equation": {
                    "value": "bm,bmn->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, Dy_at_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_239": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(y, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_242": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(y, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_259": {
                "equation": {
                    "value": "bm,bmn->bn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(v, Dy_at_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_38": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(x[:, 1]).unsqueeze(-1) * torch.cat((x[:, 0:1], -1.0 * torch.ones_like(x[:, 0:1])), dim=-1) / torch.pow(1.0 + torch.pow(x[:, 0], 2.0), 1.5).unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "1.0 + torch.pow(z, 2) / alpha2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_121": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "(torch.ones_like(x[:, 0:1]), x[:, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_192": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "(x[:, 0:1], -1.0 * torch.ones_like(x[:, 0:1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "(torch.ones_like(x[:, 0:1]), x[:, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_225": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_246": {
                "input": {
                    "value": "x_norm_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bm,bm->b', (x, x)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_258": {
                "input": {
                    "value": "torch.einsum('bm,bm->b', (x, x))",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_131": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x.detach()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_152": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_162": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_193": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_182": {
                "input": {
                    "value": "x[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_193": {
                "input": {
                    "value": "x[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_214": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_59": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(-1).unsqueeze(-1) - x",
                            "BinOp"
                        ],
                        [
                            "(y.unsqueeze(-1).unsqueeze(-1) - x).clone()",
                            "Call"
                        ],
                        [
                            "ctx['z']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_182": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_192": {
                "input": {
                    "value": "x[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_193": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/testLeastsquares.py": {
        "torch": {
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_92": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_93": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_95": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_96": {
                "variable": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_65": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_67": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "profile_47": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu') if device is None else device",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_75": {
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "tests/testOptimalTransport.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 50, 50)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_149": {
                "variable": {
                    "value": "r_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((1, 50), dtype=M_true.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_150": {
                "variable": {
                    "value": "c_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((1, 50), dtype=M_true.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_157": {
                "variable": {
                    "value": "M_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(M_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_163": {
                "variable": {
                    "value": "M_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(M_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_173": {
                "variable": {
                    "value": "r_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(r_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_174": {
                "variable": {
                    "value": "c_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(c_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_325": {
                "variable": {
                    "value": "M_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 500, 500)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_61": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_81": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_82": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamW_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[M]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamW_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[M, r, c]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_146": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_201": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_203": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_212": {
                "variable": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, ni, ni)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_216": {
                "variable": {
                    "value": "M_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(M_true) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_288": {
                "seed": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_296": {
                "variable": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, ni, ni)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_298": {
                "variable": {
                    "value": "M_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(M_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_352": {
                "variable": {
                    "value": "M_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradcheck_68": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 1.0, 1e-09, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_69": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 1.0, 1e-09, 1000, False, 'full')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_70": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 10.0, 1e-09, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_71": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, None, 10.0, 1e-09, 1000, False, 'full')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_74": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, None, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_75": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, None, c, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_77": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_78": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 10.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_84": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-06, 1000, False, 'block')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_85": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f in enumerate(fcns)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "OptimalTransportLayer(eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(M, r, c, 1.0, 1e-06, 1000, False, 'full')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_105": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fcn(M, r, c) - P_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_131": {
                "variable": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_132": {
                "variable": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_133": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fcn(M, nr, nc) - P_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_149": {
                "*size": {
                    "value": "(1, 50)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M_true.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_150": {
                "*size": {
                    "value": "(1, 50)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M_true.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_157": {
                "input": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 50, 50), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_163": {
                "input": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 50, 50), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_173": {
                "input": {
                    "value": "r_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.rand((1, 50), dtype=M_true.dtype), p=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_174": {
                "input": {
                    "value": "c_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(torch.rand((1, 50), dtype=M_true.dtype), p=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_43": {
                "input": {
                    "value": "torch.sum(P, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.full((B, H), 1.0 / H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_44": {
                "input": {
                    "value": "torch.sum(P, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.full((B, W), 1.0 / W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_47": {
                "input": {
                    "value": "torch.sum(P, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.full((B, H), 1.0 / H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_48": {
                "input": {
                    "value": "torch.sum(P, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.full((B, W), 1.0 / W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_50": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_51": {
                "input": {
                    "value": "torch.sum(P, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normalize(r, p=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_52": {
                "input": {
                    "value": "torch.sum(P, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normalize(c, p=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_55": {
                "input": {
                    "value": "torch.sum(P, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normalize(r, p=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "input": {
                    "value": "torch.sum(P, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normalize(c, p=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_337": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_339": {
                "input": {
                    "value": "P - torch.eye(M.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "backward_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_346": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_348": {
                "input": {
                    "value": "P - torch.eye(M.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "backward_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_357": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_359": {
                "input": {
                    "value": "P - torch.eye(n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "backward_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_366": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_368": {
                "input": {
                    "value": "P - torch.eye(n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "backward_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_405": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_410": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_43": {
                "size": {
                    "value": "(B, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0 / H",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_44": {
                "size": {
                    "value": "(B, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0 / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_47": {
                "size": {
                    "value": "(B, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0 / H",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_48": {
                "size": {
                    "value": "(B, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0 / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_51": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, H), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, H), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, H), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_52": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_55": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, H), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, H), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, H), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinkhorn(M, eps=0.0, maxiters=maxiters)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=0.0, maxiters=10)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "f(M)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, None, None, 1e-09)",
                            "Call"
                        ],
                        [
                            "sinkhorn(M, normalize(r, p=1.0), normalize(c, p=1.0), eps=1e-09)",
                            "Call"
                        ],
                        [
                            "OptimalTransportFcn().apply(M, r, c, 1e-09)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_56": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_131": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, H), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, H), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, H), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_132": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_init.clone()",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype)",
                            "Call"
                        ],
                        [
                            "torch.rand((B, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((1, W), dtype=M.dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_407": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_412": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_231": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_298": {
                "input": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 50, 50), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_216": {
                "input": {
                    "value": "M_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 50, 50), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.randn((batch_size, ni, ni), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "profile_232": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_memory_allocated_238": {
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "eye_339": {
                "n": {
                    "value": "M.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_348": {
                "n": {
                    "value": "M.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_359": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
                            "List"
                        ],
                        [
                            "[5, 10, 25, 50, 100, 200, 300, 500]",
                            "List"
                        ],
                        [
                            "probsize_range",
                            "variable"
                        ]
                    ]
                }
            },
            "eye_368": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
                            "List"
                        ],
                        [
                            "[5, 10, 25, 50, 100, 200, 300, 500]",
                            "List"
                        ],
                        [
                            "probsize_range",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "tests/testPnPNode.py": {
        "torch": {
            "randn_21": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "p3d_transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z * xy, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_29": {
                "variable": {
                    "value": "p3d",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "brs,bms->bmr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R.transpose(-2, -1), p3d_transformed - t.unsqueeze(-2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_66": {
                "variable": {
                    "value": "Dy",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DL(p2d, p3d, w, K)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(p2d, p3d, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_79": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "DL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DeclarativeLayer(node)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(p2d, p3d, w, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_26": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_31": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_66": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DL(p2d, p3d, w, K)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/testPyTorchDeclNodes.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.25], [1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradcheck_41": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "DL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DeclarativeLayer(node)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x, alpha)",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "(x,)",
                            "Tuple"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_33": {
                "input": {
                    "value": "Dys[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Dys_analytic[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "grad_38": {
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.no_grad()(node.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "DL(*xs)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "xs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "torch.einsum('bm,bm->b', (x, x))[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_38": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.no_grad()(node.solve)(*xs)",
                            "Call"
                        ],
                        [
                            "DL(*xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_106": {
                "equation": {
                    "value": "bm,bm->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/testRobustVecPooling.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_143": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_235": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, fi, ni, ni)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand_like(x) < outlier_ratio",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "10.0 * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((batch_size, fi, ni, ni), dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand_like(x) < outlier_ratio, 10.0 * x, x)",
                            "Call"
                        ],
                        [
                            "x_init.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_255": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_237": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_289": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_291": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[j].view(batch_size, fi, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_208": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.view(batch_size, fi, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_208": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_255": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for j in range(repeats)]",
                            "ListComp"
                        ],
                        [
                            "fcn(x.clone(), p, 1.0)",
                            "Call"
                        ],
                        [
                            "fcn(x_clone, p, 1.0)",
                            "Call"
                        ],
                        [
                            "rvp.RobustVectorPool2dFcn().apply(x, penalty)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_262": {
                "input": {
                    "value": "torch.square(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_297": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_300": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_302": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_like_161": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((batch_size, fi, ni, ni), dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand_like(x) < outlier_ratio, 10.0 * x, x)",
                            "Call"
                        ],
                        [
                            "x_init.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_187": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_196": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.view(batch_size, fi, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_196": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_188": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "profile_195": {
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_memory_allocated_204": {
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "max_memory_allocated_210": {
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "square_262": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for j in range(repeats)]",
                            "ListComp"
                        ],
                        [
                            "fcn(x.clone(), p, 1.0)",
                            "Call"
                        ],
                        [
                            "fcn(x_clone, p, 1.0)",
                            "Call"
                        ],
                        [
                            "rvp.RobustVectorPool2dFcn().apply(x, penalty)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}