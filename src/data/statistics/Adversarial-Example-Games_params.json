{
    "flows/flows.py": {
        "sklearn": {},
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_168": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "zero_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_307": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_310": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_316": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_383": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_386": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, i_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "torch.arange(input_size).float() % 2",
                            "BinOp"
                        ],
                        [
                            "torch.stack([mask, i_mask]).repeat(int(n_blocks / 2), 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_62": {},
            "sum_93": {
                "input": {
                    "value": "self.base_dist.log_prob(u) + sum_log_abs_det_jacobians",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_98": {},
            "zeros_66": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_67": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_73": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_100": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_113": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_146": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x, y)",
                            "Call"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "z_mu0",
                            "variable"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * x_0",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "z_mu0",
                            "variable"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "z_mu0",
                            "variable"
                        ],
                        [
                            "x_proj_mu0[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module(x, y)",
                            "Call"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "z_mu0",
                            "variable"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * x_0",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "z_mu0",
                            "variable"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "z_mu0",
                            "variable"
                        ],
                        [
                            "x_proj_mu0[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "clamp(x, min=-max_clamp_norm, max=max_clamp_norm)",
                            "Call"
                        ],
                        [
                            "exp_map_mu0(x_mu0, self.radius)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x_hyper, self.radius)",
                            "Call"
                        ],
                        [
                            "self.inverse(z)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_167": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_175": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1, zero_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1, column)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_240": {},
            "zeros_like_287": {
                "input": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_288": {
                "input": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_302": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_314": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_315": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_364": {
                "input": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_365": {
                "input": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_381": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_391": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_392": {
                "*size": {
                    "value": "input_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_453": {
                "input": {
                    "value": "mu_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ],
                        [
                            "e_i(i=0, shape=self.base_dist_mean.shape, device=self.base_dist_mean.device) * self.radius",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_454": {
                "input": {
                    "value": "self.base_dist_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_140": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_209": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_275": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_353": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_441": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_126": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_331": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_413": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](x_)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_, edge_index)",
                            "Call"
                        ],
                        [
                            "self.s[i](z_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classifiers/madry_challenge/madry_et_al_utils.py": {
        "tensorflow": {
            "ConfigProto_27": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_31": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_35": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_path",
                            "Method Argument"
                        ],
                        [
                            "weights_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_34": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.bw_gradient_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "variable": {
                    "value": "bw_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.logits * self.bw_gradient_pre",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_50": {
                "ys": {
                    "value": "bw_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.logits * self.bw_gradient_pre)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_80": {
                "ndarray": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/__init__.py": {
        "torch": {
            "device_count_135": {
                "variable": {
                    "value": "device_count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_complete_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_154": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorDataset_164": {
                "variable": {
                    "value": "adv_img_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "adv_img_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "adv_img_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(adv_complete, y_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(adv_img_list, batch_size=args.test_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.unsqueeze(0) for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, list_dir[0])",
                            "Call"
                        ],
                        [
                            "os.path.join(path, list_dir[i])",
                            "Call"
                        ],
                        [
                            "os.path.join(path, list_dir[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/attack_helpers.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (args.classes,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_const * loss1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (args.classes,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (args.classes,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_70": {
                "variable": {
                    "value": "(max_input, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred - max_input.view(-1, 1).repeat(1, pred.shape[1])",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "softval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred - max_input.view(-1, 1).repeat(1, pred.shape[1])",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other - real + confidence",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.clamp(other - real + confidence, min=0.0)",
                            "UnaryOp"
                        ],
                        [
                            "torch.clamp(other - real + confidence, min=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_136": {
                "variable": {
                    "value": "norm_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_179": {
                "variable": {
                    "value": "d_params_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[log_prob.sum()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_183": {
                "variable": {
                    "value": "d_params_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[f_cv]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_201": {
                "variable": {
                    "value": "d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[var.mean()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cv.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_223": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred - max_input.view(-1, 1).repeat(1, pred.shape[1])",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_225": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[:, targ]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_237": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred - max_input.view(-1, 1).repeat(1, pred.shape[1])",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_64": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-nn.CrossEntropyLoss(reduction='sum')(pred, targ)",
                            "UnaryOp"
                        ],
                        [
                            "loss / len(targ)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(scale_const * loss1)",
                            "Call"
                        ],
                        [
                            "real - other",
                            "BinOp"
                        ],
                        [
                            "-torch.log(other)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss1)",
                            "Call"
                        ],
                        [
                            "nn.CrossEntropyLoss(reduction='sum')(pred, targ)",
                            "Call"
                        ],
                        [
                            "loss / len(targ)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_75": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-nn.CrossEntropyLoss(reduction='sum')(pred, targ)",
                            "UnaryOp"
                        ],
                        [
                            "loss / len(targ)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(scale_const * loss1)",
                            "Call"
                        ],
                        [
                            "real - other",
                            "BinOp"
                        ],
                        [
                            "-torch.log(other)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss1)",
                            "Call"
                        ],
                        [
                            "nn.CrossEntropyLoss(reduction='sum')(pred, targ)",
                            "Call"
                        ],
                        [
                            "loss / len(targ)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_150": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_43": {
                "input": {
                    "value": "other - real + confidence",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_74": {
                "input": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((1.0 - target_var) * output - target_var * 10000.0).max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "((1.0 - target_var) * output - target_var * 10000.0).max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "((1.0 - target_onehot) * softval).sum(1)",
                            "Call"
                        ],
                        [
                            "((1.0 - target) * output - target * 10000.0).max(1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_99": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grad_162": {
                "outputs": {
                    "value": "[policy_loss.mean()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[log_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_24": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/attacks.py": {
        "torch": {
            "zeros_82": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (args.classes,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real - other + confidence",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_const * loss1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_57": {
                "input": {
                    "value": "x.data + delta.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_180": {
                "variable": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach() + delta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_inputs, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_177": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_126": {
                "input": {
                    "value": "x.data + delta.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/autoattack.py": {
        "torch": {
            "device_323": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.unsqueeze(0) for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_367": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_368": {
                "variable": {
                    "value": "device_count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_orig.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x_orig.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "num_robust",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_125": {
                "variable": {
                    "value": "robust_lin_idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_189": {
                "variable": {
                    "value": "num_non_robust_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "false_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~y.eq(output.max(dim=1)[1]).to(robust_flags.device)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_193": {
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/autopgd_pt.py": {
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_282": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_288": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "criterion_indiv",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_143": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_like_341": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_353": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_405": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_406": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_189": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_196": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_275": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_399": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "enable_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_221": {
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "enable_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_304": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_326": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_327": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_123": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_272": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_331": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_334": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_115": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_116": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_295": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_326": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_327": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_115": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_116": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_137": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_273": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_325": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_326": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_327": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_348": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_276": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_120": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_123": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_331": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_334": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_332": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_335": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/autozoom_attack.py": {
        "torch": {
            "log_softmax_185": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logit, dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(img)",
                            "Call"
                        ],
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "success",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_439": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(self.real_modifier, self.BATCH_SIZE * 2 + 1, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((self.real_modifier, self.real_modifier + self.beta * var_noise.reshape(self.num_rand_vec, self.num_channels, self.modifier_size, self.modifier_size)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_505": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(self.real_modifier, self.BATCH_SIZE * 2 + 1, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((self.real_modifier, self.real_modifier + self.beta * var_noise.reshape(self.num_rand_vec, self.num_channels, self.modifier_size, self.modifier_size)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_82": {
                "input": {
                    "value": "(1 + x) / (1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_146": {
                "variable": {
                    "value": "cond1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_modifier",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "self.modifier_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "le_147": {
                "variable": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_modifier",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "self.modifier_up",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_148": {
                "variable": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_modifier",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "self.modifier_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "le_149": {
                "variable": {
                    "value": "cond4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.img_modifier",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "self.modifier_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_423": {
                "variable": {
                    "value": "self.img_modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(var).cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(var).cuda().float()",
                            "Call"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.image_size, self.image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_463": {
                "variable": {
                    "value": "self.img_modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.image_size, self.image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_486": {
                "variable": {
                    "value": "self.img_modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(var).cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(var).cuda().float()",
                            "Call"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ],
                        [
                            "modifier",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.image_size, self.image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_538": {
                "variable": {
                    "value": "self.img_modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.image_size, self.image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_193": {
                "input": {
                    "value": "second_max_logit - target_logit + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_201": {
                "input": {
                    "value": "gt_logit - second_max_logit + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "(newimg - (F.tanh(timg) + 0.5 * 1.99999) / 2).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "(newimg - timg).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_151": {
                "input": {
                    "value": "cond4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.le(img_modifier, self.modifier_down).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.modifier_down",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_278": {
                "input": {
                    "value": "img_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_279": {
                "input": {
                    "value": "img_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_348": {
                "variable": {
                    "value": "adv_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(o_bestattack)",
                            "Call"
                        ],
                        [
                            "self.model(o_bestattack)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_142": {
                "input": {
                    "value": "img_modifier + timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_150": {
                "input": {
                    "value": "cond2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.le(img_modifier, self.modifier_up).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cond3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(img_modifier, self.modifier_down).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_191": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_192": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_199": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_200": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_356": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_124": {
                "input": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "variable"
                        ],
                        [
                            "img",
                            "variable"
                        ],
                        [
                            "timg",
                            "Method Argument"
                        ],
                        [
                            "timg",
                            "Method Argument"
                        ],
                        [
                            "timg",
                            "Method Argument"
                        ],
                        [
                            "timg",
                            "Method Argument"
                        ],
                        [
                            "timg",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/codec.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "loaded_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_78": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_19": {
                "size": {
                    "value": "(resize, resize)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_60": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_70": {
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tanh_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_80": {
                "size": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attacks/diverse_input_attack.py": {
        "torch": {
            "device_127": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Bernoulli_56": {
                "variable": {
                    "value": "self.apply_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([self.transform_prob])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_63": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.size()",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "image_resize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.resize_factor * w)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_66": {
                "variable": {
                    "value": "self.pad_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "h_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "self.pad_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "w_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_40": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(rnd.item(), rnd.item())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input_tensor, size=(rnd.item(), rnd.item()), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad_left, self.pad_right, self.pad_top, self.pad_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[self.transform_prob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_106": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "self.decay_factor * g + normalize_by_pnorm(delta.grad.data, p=1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/fab_pt.py": {
        "torch": {
            "max_72": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[y.shape[-1], *imgs.size()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([y.shape[-1], *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ],
                        [
                            "torch.zeros([2, *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, *imgs.size()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_124": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([y.shape[-1], *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ],
                        [
                            "torch.zeros([2, *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y2[torch.arange(imgs.shape[0]), la], y2[torch.arange(imgs.shape[0]), la_target]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_145": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_150": {
                "variable": {
                    "value": "indp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(t.shape).to(self.device) * c5 - t * (2 * c5 - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_158": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cumsum_162": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_174": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_200": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c2] - sb[c2, lb]) / -s[c2, lb]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_200": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_219": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_219": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_221": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_222": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_223": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_224": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_227": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "rs2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rs[:, 1:], torch.zeros(rs.shape[0], 1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((-w5.squeeze() * rs[:, 0]).unsqueeze(1), torch.cumsum((-rs2 + rs) * ws, dim=1) - w5 * rs[:, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_253": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_297": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_298": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_299": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_300": {
                "variable": {
                    "value": "(_, indr_rev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sort(r, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_302": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_302": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_306": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c.unsqueeze(-1), ds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_309": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c.unsqueeze(-1), ds), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_318": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(s.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_377": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_560": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_564": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_178": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_195": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c_l] - sb[c_l, -1]) / -s[c_l, -1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_257": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_322": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_163": {
                "input": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ws * d[u.unsqueeze(1), indp2]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_174": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_236": {
                "input": {
                    "value": "w3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w3[u, indr]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_252": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_253": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_317": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_318": {
                "input": {
                    "value": "torch.tensor(s.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_380": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_563": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_708": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_713": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_714": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_112": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_119": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_121": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_203": {
                "input": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max((b[c_l] - sb[c_l, -1]) / -s[c_l, -1], torch.zeros(sb[c_l, -1].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.max((b[c2] - sb[c2, lb]) / -s[c2, lb], torch.zeros(sb[c2, lb].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_204": {
                "input": {
                    "value": "-lmbd_opt",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "*size": {
                    "value": "rs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_277": {
                "input": {
                    "value": "ws[c2, lb] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_298": {
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_459": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_460": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_470": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_474": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_643": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_644": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_654": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_658": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "*size": {
                    "value": "sb[c2, lb].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_240": {
                "input": {
                    "value": "(-rs2 + rs) * ws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_398": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_581": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_729": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_127": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "*size": {
                    "value": "sb[c_l, -1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_409": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_592": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_754": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_95": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_96": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_389": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_446": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_470": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_474": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_477": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_572": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_630": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_632": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_654": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_658": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_661": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_451": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_452": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_453": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_635": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_636": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_637": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_659": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_390": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_390": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_458": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_573": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_573": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_640": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_641": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_642": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_399": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_399": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_582": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_582": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_410": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_410": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_593": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_593": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_391": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_574": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_400": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_583": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_411": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_594": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/iterative_attacks.py": {
        "torch": {
            "unsqueeze_40": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(nx)",
                            "Call"
                        ],
                        [
                            "model(nx + eta)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_74": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(nx)",
                            "Call"
                        ],
                        [
                            "model(nx + eta)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_46": {
                "input": {
                    "value": "nx.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_77": {
                "input": {
                    "value": "nx.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/momentum_iterative_attack.py": {
        "torch": {
            "device_87": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_120": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/my_diverse_input_attack.py": {
        "torch": {
            "device_177": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.unsqueeze(0) for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_236": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_237": {
                "variable": {
                    "value": "device_count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Bernoulli_55": {
                "variable": {
                    "value": "self.apply_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([self.transform_prob])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_62": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor.size()",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "image_resize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.resize_factor * w)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_65": {
                "variable": {
                    "value": "self.pad_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "h_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_67": {
                "variable": {
                    "value": "self.pad_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "w_rem.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_39": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_72": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(rnd.item(), rnd.item())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input_tensor, size=(rnd.item(), rnd.item()), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad_left, self.pad_right, self.pad_top, self.pad_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_complete_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[self.transform_prob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_208": {
                "variable": {
                    "value": "adv_models[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "temp_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_105": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "self.decay_factor * g + normalize_by_pnorm(delta.grad.data, p=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_209": {
                "f": {
                    "value": "adv_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dir_test_models, 'pretrained_classifiers', args.dataset, 'ensemble_adv_trained', adv_model_names[i] + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/my_translation_invariant_attack.py": {
        "torch": {
            "device_161": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.unsqueeze(0) for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_221": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_222": {
                "variable": {
                    "value": "device_count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "stack_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stack_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([kernel, kernel, kernel]).swapaxes(2, 0)",
                            "Call"
                        ],
                        [
                            "np.stack(stack_kernel_list).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.tensor(stack_kernel).permute(0, 3, 1, 2).to(args.dev)",
                            "Call"
                        ],
                        [
                            "stack_kernel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_234": {
                "variable": {
                    "value": "stack_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-nsig, nsig, kernlen)",
                            "Call"
                        ],
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-nsig, nsig, kernlen)",
                            "Call"
                        ],
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_51": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "delta.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "delta.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.stack_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_complete_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "adv_models[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "temp_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_89": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "self.decay_factor * g + normalize_by_pnorm(delta.grad.data, p=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_193": {
                "f": {
                    "value": "adv_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dir_test_models, 'pretrained_classifiers', args.dataset, 'ensemble_adv_trained', adv_model_names[i] + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/nattack.py": {
        "torch": {
            "device_235": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.4914, 0.4822, 0.4465]).reshape([1, 3, 1, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.2023, 0.1994, 0.201]).reshape([1, 3, 1, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.0]).reshape([1, 1, 1, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1.0]).reshape([1, 1, 1, 1]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "clipinput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(clipdist + (np.tanh(newimg) * self.boxmul + self.boxplus)).reshape(self.npop, self.nc, self.h, self.w)",
                            "Call"
                        ],
                        [
                            "np.asarray(clipinput, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "realclipinput.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attacks/no_box_attack.py": {
        "torch": {
            "device_578": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'saved_models/generator.pt'",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(args.save_model, f'generator.pt')",
                            "Call"
                        ],
                        [
                            "'saved_models/generator.pt'",
                            "str"
                        ],
                        [
                            "os.path.join(args.save_model, 'generator.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_128": {
                "variable": {
                    "value": "clamped_adv_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.G(x)",
                            "Call"
                        ],
                        [
                            "adv_inputs.view_as(x)",
                            "Call"
                        ],
                        [
                            "self.G(x)",
                            "Call"
                        ],
                        [
                            "self.G(x, torch.tensor([epsilon]).to(self.args.dev), target=target)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_inputs, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.perturb(x, compute_kl=True, target=target)",
                            "Call"
                        ],
                        [
                            "self.perturb(x, compute_kl=True, anneal_eps=anneal_eps)",
                            "Call"
                        ],
                        [
                            "self.perturb(x, compute_kl=True, anneal_eps=anneal_eps, target=target)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.perturb(x, anneal_eps=anneal_eps), min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "adv_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_130": {
                "variable": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.G(x)",
                            "Call"
                        ],
                        [
                            "adv_inputs.view_as(x)",
                            "Call"
                        ],
                        [
                            "self.G(x)",
                            "Call"
                        ],
                        [
                            "self.G(x, torch.tensor([epsilon]).to(self.args.dev), target=target)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_inputs, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.perturb(x, compute_kl=True, target=target)",
                            "Call"
                        ],
                        [
                            "self.perturb(x, compute_kl=True, anneal_eps=anneal_eps)",
                            "Call"
                        ],
                        [
                            "self.perturb(x, compute_kl=True, anneal_eps=anneal_eps, target=target)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.perturb(x, anneal_eps=anneal_eps), min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "adv_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "grad_161": {
                "variable": {
                    "value": "grad_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_misclassify + loss_soft_perturb + kl_div + args.hinge_coeff * loss_perturb",
                            "BinOp"
                        ],
                        [
                            "loss_misclassify + loss_soft_perturb + kl_div",
                            "BinOp"
                        ],
                        [
                            "self.gen_update(args, epoch, batch_idx, x, target, adv_inputs, l_train_classif, kl_div, perturb_loss_func, gen_opt)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_212": {
                "variable": {
                    "value": "grad_model",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_model + args.gp_coeff * norm_grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.predict.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_226": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(args.dev)",
                            "Call"
                        ],
                        [
                            "data.to(args.dev)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(x, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_227": {
                "variable": {
                    "value": "success_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(args.dev)",
                            "Call"
                        ],
                        [
                            "data.to(args.dev)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(x, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_288": {
                "variable": {
                    "value": "gen_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.momentum, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_633": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_loader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.random.randint(len(test_loader.dataset), size=(num_samples,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_635": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(test_loader.dataset, np.random.randint(len(test_loader.dataset), size=(num_samples,)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(eval_loader, batch_size=args.test_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_73": {
                "variable": {
                    "value": "self.pick_rob_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([1 - args.robust_sample_prob])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_96": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "cat_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "num_target * [adv_target]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "cat_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "num_target * [target]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "loss_soft_perturb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clean_pred, adv_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "cat_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_205": {
                "variable": {
                    "value": "grad_model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_ens(epoch, batch_idx, self.predict, x, target, model_opt, x_advs=x_advs, opt_step=False)",
                            "Call"
                        ],
                        [
                            "ce_loss_func(args, cat_pred, cat_target)",
                            "Call"
                        ],
                        [
                            "loss_model + args.lambda_on_clean * ce_loss_func(args, clean_pred, clean_target)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.critic_update(args, epoch, train_loader, batch_idx, x, target, adv_pred, model_opt, pgd_adversary)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(args.dev)",
                            "Call"
                        ],
                        [
                            "data.to(args.dev)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(x, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_211": {
                "variable": {
                    "value": "norm_grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_257": {
                "variable": {
                    "value": "new_successes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask - success_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_266": {
                "variable": {
                    "value": "grad_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_misclassify + loss_soft_perturb + kl_div + args.hinge_coeff * loss_perturb",
                            "BinOp"
                        ],
                        [
                            "loss_misclassify + loss_soft_perturb + kl_div",
                            "BinOp"
                        ],
                        [
                            "self.gen_update(args, epoch, batch_idx, x, target, adv_inputs, l_train_classif, kl_div, perturb_loss_func, gen_opt)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_655": {
                "variable": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attacker.perturb(x_test[:args.batch_size], target=y_test[:args.batch_size])",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_complete, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "torch.cat(adv_complete_list)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_104": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "params": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred, predict(adv_inputs))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "cat_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cat_pred, pgd_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "cat_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cat_target, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_247": {
                "variable": {
                    "value": "loss_soft_perturb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Bernoulli_329": {
                "variable": {
                    "value": "self.pick_rob_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([1 - pick_prob])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_366": {
                "variable": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.perturb(x, anneal_eps=anneal_eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_651": {
                "variable": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adv_complete_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_670": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "[1 - args.robust_sample_prob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "args.robust_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[epsilon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_302": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_329": {
                "data": {
                    "value": "[1 - pick_prob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_415": {
                "obj": {
                    "value": "{'model': self.G.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'saved_models/generator.pt'",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(args.save_model, f'generator.pt')",
                            "Call"
                        ],
                        [
                            "'saved_models/generator.pt'",
                            "str"
                        ],
                        [
                            "os.path.join(args.save_model, 'generator.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_66": {
                "f": {
                    "value": "adv_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dir_test_models, 'pretrained_classifiers', args.dataset, 'ensemble_adv_trained', adv_model_names + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/pgd.py": {
        "torch": {
            "CrossEntropyLoss_25": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_53": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(advdata)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(self.args.dev)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_60": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(advdata)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(self.args.dev)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attacks/run_autozoom.py": {
        "torch": {
            "device_293": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.total_images",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "self.correct_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "self.not_done_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "variable": {
                    "value": "self.success_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "variable": {
                    "value": "self.success_query_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_44": {
                "variable": {
                    "value": "self.not_done_loss_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_45": {
                "variable": {
                    "value": "self.not_done_prob_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_74": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_index * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(batch_index + 1) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_311": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_70": {
                "variable": {
                    "value": "diff_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_img.view(-1).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_81": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "CLASS_NUM[args.dataset]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'mnist': 10, 'FashionMNIST': 10, 'cifar': 10, 'CIFAR-100': 100, 'ImageNet': 1000, 'SVHN': 10, 'TinyImageNet': 200}",
                            "Dict"
                        ]
                    ]
                },
                "size": {
                    "value": "true_labels.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_tuple[0]",
                            "Subscript"
                        ],
                        [
                            "data_tuple[1]",
                            "Subscript"
                        ],
                        [
                            "data_tuple[0]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(images, size=target_model.module.input_size[-1], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "target_model.module.input_size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_84": {
                "variable": {
                    "value": "target_labels[invalid_target_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "logit.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "target_labels[invalid_target_index].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fmod_93": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_labels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "CLASS_NUM[args.dataset]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_54": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_61": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "logit.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attacks/run_clean_classifiers.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.unsqueeze(0) for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader.dataset]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_104": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_105": {
                "variable": {
                    "value": "device_count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attacks/sgm_attack.py": {
        "torch": {
            "std_42": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_123": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_158": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_168": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/square_pt.py": {
        "torch": {
            "cross_entropy_71": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(y_pred)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "self.random_target_classes(y_pred, n_classes)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_112": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_int(0, len(l))",
                            "Call"
                        ],
                        [
                            "2 * torch.rand(shape).to(self.device) - 1",
                            "BinOp"
                        ],
                        [
                            "low + (high - low) * torch.rand(shape).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "x.abs().view(x.shape[0], -1).max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_399": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_400": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_196": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.eps * self.random_choice([x.shape[0], c, 1, w])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_199": {
                "variable": {
                    "value": "n_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_111": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_115": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "[1]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[c, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_222": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_new, x_curr - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_224": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_236": {
                "variable": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_259": {
                "variable": {
                    "value": "delta_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_272": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.normalize(delta_init) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_275": {
                "variable": {
                    "value": "n_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_297": {
                "variable": {
                    "value": "new_deltas_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_304": {
                "variable": {
                    "value": "new_deltas_mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_308": {
                "variable": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_deltas_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x_curr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_311": {
                "variable": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x_curr.shape[0], c, s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_326": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr + self.normalize(delta_curr) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_340": {
                "variable": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_222": {
                "input": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_319": {
                "input": {
                    "value": "(self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_321": {
                "input": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt() * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_320": {
                "input": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt() * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/translation_invariant_attack.py": {
        "torch": {
            "device_168": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "stack_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stack_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(stack_kernel_list)[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(stack_kernel).to(args.dev)",
                            "Call"
                        ],
                        [
                            "np.stack(stack_list)",
                            "Call"
                        ],
                        [
                            "stack_kernel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-nsig, nsig, kernlen)",
                            "Call"
                        ],
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-nsig, nsig, kernlen)",
                            "Call"
                        ],
                        [
                            "self._verify_and_process_inputs(x, y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_52": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "delta.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "delta.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.stack_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_90": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "self.decay_factor * g + normalize_by_pnorm(delta.grad.data, p=1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cnn_models/densenet.py": {
        "torch": {
            "randn_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.bn(out)), 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_18": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_19": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "input": {
                    "value": "self.bn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/dpn.py": {
        "torch": {
            "randn_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride in enumerate(strides)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :d, :, :] + out[:, :d, :, :], x[:, d:, :, :], out[:, d:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :d, :, :] + out[:, :d, :, :], x[:, d:, :, :], out[:, d:, :, :]], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes[3] + (num_blocks[3] + 1) * dense_depth[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :d, :, :] + out[:, :d, :, :], x[:, d:, :, :], out[:, d:, :, :]], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(last_planes, out_planes + dense_depth, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "last_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride in enumerate(strides)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/googlenet.py": {
        "torch": {
            "randn_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, n1x1, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, n3x3red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, n5x5red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.b4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.pre_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 192, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_79": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[y1, y2, y3, y4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n1x1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n1x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n3x3red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3red",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "n3x3red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3red",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "n3x3red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3red",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5red",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "n5x5red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5red",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "n5x5red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5red",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "pool_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "pool_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/lenet.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * h * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_18": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_20": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2, padding=1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/mnist_ensemble_adv_train_models.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 20 * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 12 * 12",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc4(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc4(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 * 28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.dir_test_models, 'pretrained_classifiers', args.dataset, 'ensemble_adv_trained', model_type + '.pt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cnn_models/mobilenet.py": {
        "torch": {
            "randn_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_21": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/mobilenetv2.py": {
        "torch": {
            "randn_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x) if self.stride == 1 else out",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cnn_models/pnasnet.py": {
        "torch": {
            "randn_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_35": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * out_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_61": {
                "variable": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1 + y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y3 + y4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b1, b2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "self.linear(out.view(out.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_38": {
                "input": {
                    "value": "y1 + y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_69": {
                "input": {
                    "value": "self.bn2(self.conv2(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/preact_resnet.py": {
        "torch": {
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_115": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/resnext.py": {
        "torch": {
            "randn_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "cardinality",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cardinality * bottleneck_width * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * group_width, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/senet.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_34": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_69": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_101": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_66": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/shufflenet.py": {
        "torch": {
            "randn_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groups",
                            "Attribute"
                        ],
                        [
                            "1 if in_planes == 24 else groups",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['out_planes']",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['groups']",
                            "Subscript"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['out_planes']",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.shuffle1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat([out, res], 1)) if self.stride == 2 else F.relu(out + res)",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "out + res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "[out, res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/shufflenetv2.py": {
        "torch": {
            "randn_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(out2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_128": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x2)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out1, out2], 1)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/vgg.py": {
        "torch": {
            "randn_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_38": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/vgg_robustnet.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "self.buffer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_57": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_models/wide_resnet.py": {
        "torch": {
            "is_available_103": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_121": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_118": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wide_ResNet(**vars(args))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, device_ids=range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(torch.cuda.device_count())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SGD_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.learning_rate(args.lr, epoch)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_167": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_195": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output, '%s/%s/model_%i.pt' % (args.dataset, 'wide_resnet', args.seed))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "defenses/adver_train_mnist.py": {
        "torch": {
            "is_available_47": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_path, 'adv_trained')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_path, 'natural')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_path, model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_98": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(clndata)",
                            "Call"
                        ],
                        [
                            "model(advdata)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_120": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(clndata)",
                            "Call"
                        ],
                        [
                            "model(advdata)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_73": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_129": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(clndata)",
                            "Call"
                        ],
                        [
                            "model(advdata)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "defenses/ensemble_adver_train_mnist.py": {
        "torch": {
            "device_170": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_264": {
                "variable": {
                    "value": "args.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "variable": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + scaled_grad",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(adv_x, 0, 1)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "symbolic_fgs(adv_x, grad, eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loss1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_169": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path + args.namestr + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "Adam_39": {
                "variable": {
                    "value": "gen_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "attacker.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.momentum, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_155": {
                "variable": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(adv_iterator)",
                            "Call"
                        ],
                        [
                            "torch.clamp(adv_inputs, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "attacker.perturb(x)",
                            "Call"
                        ],
                        [
                            "attacker.perturb(x, target=target)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_157": {
                "input": {
                    "value": "dist_perturb > args.epsilon + 1e-06",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_159": {
                "input": {
                    "value": "dist_perturb <= args.epsilon + 1e-06",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_166": {
                "input": {
                    "value": "adv_inputs >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "flows/flow_helpers.py": {
        "torch": {
            "linear_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu + (1 - self.mask) * (u * s.exp() + t)",
                            "BinOp"
                        ],
                        [
                            "x_hat * torch.sqrt(var + self.eps) + mean",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.s_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*s_net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_181": {
                "variable": {
                    "value": "self.log_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_182": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_235": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_254": {
                "variable": {
                    "value": "sigma_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tangent_mu0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inverse_exp_map_mu0(x, self.radius)",
                            "Call"
                        ],
                        [
                            "inverse_exp_map_mu0(x, self.radius)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.cond_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(n_outputs, cond_label_size) / math.sqrt(cond_label_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "input_size + (cond_label_size if cond_label_size is not None else 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.t_net[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_185": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_203": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_220": {
                "input": {
                    "value": "-self.log_gamma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_84": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_119": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_gamma.exp() * x_hat + self.beta",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.cond_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[y, mx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[y, mx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_155": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "[y, mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[y, mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_221": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_223": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_86": {
                "start": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_90": {
                "n": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_93": {
                "low": {
                    "value": "min_prev_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ],
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(hidden_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "cond_label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_87": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_95": {
                "low": {
                    "value": "min_prev_degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ],
                        [
                            "min(degrees[-1].min().item(), input_size - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/__init__.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GeneratorCNN28(arg_parse.dev, epsilon=arg_parse.epsilon, norm=arg_parse.attack_ball, img_channels=1, img_dim=784).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "MnistGenerator(norm=arg_parse.attack_ball).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "Generator(input_size=784).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(G)",
                            "Call"
                        ],
                        [
                            "ConvGenerator(3, Bottleneck, [6, 12, 24, 16], deterministic, *args, **kwargs, norm=arg_parse.attack_ball).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "ResnetGenerator(arg_parse.dev, 3, 3, epsilon=arg_parse.epsilon, norm=arg_parse.attack_ball).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(G)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GeneratorCNN28(arg_parse.dev, epsilon=arg_parse.epsilon, norm=arg_parse.attack_ball, img_channels=1, img_dim=784).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "MnistGenerator(norm=arg_parse.attack_ball).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "Generator(input_size=784).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(G)",
                            "Call"
                        ],
                        [
                            "ConvGenerator(3, Bottleneck, [6, 12, 24, 16], deterministic, *args, **kwargs, norm=arg_parse.attack_ball).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "ResnetGenerator(arg_parse.dev, 3, 3, epsilon=arg_parse.epsilon, norm=arg_parse.attack_ball).to(arg_parse.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(G)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/ae_models.py": {
        "torch": {
            "MSELoss_199": {
                "variable": {
                    "value": "reconstruction_function",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "KLD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KLD_element",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_33": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_37": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_38": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "log_std.exp()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(std[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_40": {
                "variable": {
                    "value": "covar_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(std[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_42": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(std[0])).cuda()",
                            "Call"
                        ],
                        [
                            "self.fc1(h)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.fc21(h)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(h)",
                            "Call"
                        ],
                        [
                            "self.fc21(h)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "covar_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(len(std[0])).cuda()",
                            "Call"
                        ],
                        [
                            "std * covar_mat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_50": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.mean_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.log_std_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_std_linear(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.LOG_SIG_MIN, max=self.LOG_SIG_MAX)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.LOG_SIG_MIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.LOG_SIG_MAX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_112": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean_linear(x)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "log_std.exp()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(image_channels, 16, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "192",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "192",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "192",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnFlatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_175": {
                "variable": {
                    "value": "esp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*mu.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(30, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 16, 3, stride=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(8, 16, 3, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ],
                        [
                            "latent",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_282": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_283": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_316": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_317": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_145": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_147": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_150": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_162": {
                "in_channels": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "192",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_163": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_164": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_166": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_167": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_168": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_240": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_247": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_249": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_286": {
                "f": {
                    "value": "fn_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_287": {
                "f": {
                    "value": "fn_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_293": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_294": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_295": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_297": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_298": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_301": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_302": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_303": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_304": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_305": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_320": {
                "f": {
                    "value": "fn_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_321": {
                "f": {
                    "value": "fn_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/dcgan28.py": {
        "torch": {
            "Sequential_132": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "_conv(img_channels, h_filters, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.fcx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "img_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "784",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * img_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.fcz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(2 * img_dim + 100, h_filters * 8, 3, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_234": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_239": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fcz(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_240": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fcx(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_67": {
                "input": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight / sigma",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_134": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "num_features": {
                    "value": "h_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_137": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "h_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_140": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_206": {
                "in_channels": {
                    "value": "2 * img_dim + 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "num_features": {
                    "value": "_H_FILTERS * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_209": {
                "in_channels": {
                    "value": "h_filters * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_210": {
                "num_features": {
                    "value": "_H_FILTERS * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_212": {
                "in_channels": {
                    "value": "h_filters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "num_features": {
                    "value": "_H_FILTERS * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_214": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_215": {
                "in_channels": {
                    "value": "h_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "img_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_247": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.view(-1, self.img_dim) - x",
                            "BinOp"
                        ],
                        [
                            "self.epsilon * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + self.epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/generators.py": {
        "torch": {
            "max_13": {
                "variable": {
                    "value": "(max_input, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - max_input.view(-1, 1).repeat(1, input.shape[1])",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "softval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - max_input.view(-1, 1).repeat(1, input.shape[1])",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softval * (input - input.exp().sum(1).log().view(-1, 1).repeat(1, 10))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "softval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - max_input.view(-1, 1).repeat(1, input.shape[1])",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.other_params",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_22": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(input, dim)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(input, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_18": {
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy",
                            "Call"
                        ],
                        [
                            "torch.sum(softval * (input - input.exp().sum(1).log().view(-1, 1).repeat(1, 10)), 1)",
                            "Call"
                        ],
                        [
                            "sample(input, dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.bn(out)), 4)",
                            "Call"
                        ],
                        [
                            "0.5 * (self.decoder(h) + 1.0)",
                            "BinOp"
                        ],
                        [
                            "x + self.conv_block(x)",
                            "BinOp"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc1_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc1_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.fc2_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.fc2_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_113": {
                "variable": {
                    "value": "h_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_mu(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "h_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_sig(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_119": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_128": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nchannels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.linear_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(num_planes + 1 + latent, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_244": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_1(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_245": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_2(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_275": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, epsilon.repeat(x.shape[0], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_282": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_3(one_hot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channels, ngf, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.fcy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.fcz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channels, ngf, 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_397": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fcz(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_398": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fcy(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_411": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, 3, stride=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(64, 32, 3, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_429": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32 * 2 * 2 + 1, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32 * 2 * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "self.fc_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32 * 2 * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h.view(-1, 32 * 2 * 2), epsilon.repeat(x.shape[0], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_448": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reparameterize(mu, logvar)",
                            "Call"
                        ],
                        [
                            "mu + logvar.mul(0.5).exp_()",
                            "BinOp"
                        ],
                        [
                            "z.view(-1, self.latent, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear_3(one_hot))",
                            "Call"
                        ],
                        [
                            "self.fc_z(one_hot)",
                            "Call"
                        ],
                        [
                            "z + self.fc_input(target_onehot)",
                            "BinOp"
                        ],
                        [
                            "F.relu(z)",
                            "Call"
                        ],
                        [
                            "self.fc_z(one_hot)",
                            "Call"
                        ],
                        [
                            "F.relu(z)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_449": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_511": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "variable": {
                    "value": "self.fc_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_513": {
                "variable": {
                    "value": "self.fc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(16 * 32 * 32 - 63, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_540": {
                "variable": {
                    "value": "self.pre_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*pre_model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_558": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h.view(batch_size, -1), epsilon.repeat(batch_size, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_572": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reparameterize(mu, logvar)",
                            "Call"
                        ],
                        [
                            "mu + logvar.mul(0.5).exp_()",
                            "BinOp"
                        ],
                        [
                            "z.view(-1, self.latent, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear_3(one_hot))",
                            "Call"
                        ],
                        [
                            "self.fc_z(one_hot)",
                            "Call"
                        ],
                        [
                            "z + self.fc_input(target_onehot)",
                            "BinOp"
                        ],
                        [
                            "F.relu(z)",
                            "Call"
                        ],
                        [
                            "self.fc_z(one_hot)",
                            "Call"
                        ],
                        [
                            "F.relu(z)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_573": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - max_input.view(-1, 1).repeat(1, input.shape[1])",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.other_params",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_136": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.amor_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_flows * self.latent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.amor_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_flows * self.latent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.amor_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_flows",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_341": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_392": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "nb_digits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_394": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_digits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_403": {
                "obj": {
                    "value": "self.generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (10,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_476": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_477": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_569": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (10,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_578": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decoder(h)",
                            "Call"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "out - x",
                            "BinOp"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + self.epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_633": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "softval.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_214": {
                "in_channels": {
                    "value": "num_planes + 1 + latent",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "num_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_218": {
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_219": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_222": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_223": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_226": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_275": {
                "input": {
                    "value": "self.bn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_280": {
                "input": {
                    "value": "self.linear_1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_290": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decoder(h)",
                            "Call"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "out - x",
                            "BinOp"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + self.epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_295": {
                "input": {
                    "value": "x + delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_308": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_309": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_313": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_317": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_320": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_321": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_325": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_328": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_331": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_344": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_360": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_361": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_365": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_369": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_373": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_377": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_380": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_382": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_383": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_385": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_406": {
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ],
                        [
                            "fn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_413": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_414": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_416": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_417": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_420": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_421": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_422": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_423": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_424": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_430": {
                "in_features": {
                    "value": "32 * 2 * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_431": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_432": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_456": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decoder(h)",
                            "Call"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "out - x",
                            "BinOp"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + self.epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ],
                        [
                            "self.model(h)",
                            "Call"
                        ],
                        [
                            "epsilon.item() * delta",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_480": {
                "f": {
                    "value": "fn_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_enc",
                            "Method Argument"
                        ],
                        [
                            "fn_enc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_481": {
                "f": {
                    "value": "fn_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn_dec",
                            "Method Argument"
                        ],
                        [
                            "fn_dec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_514": {
                "in_features": {
                    "value": "16 * 32 * 32 - 63",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_515": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_516": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_520": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_521": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_523": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_554": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_555": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_618": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.other_params",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.other_params",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_618": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_631": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.other_params",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.other_params",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_138": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "in_channels": {
                    "value": "ngf * mult - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_531": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_548": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_553": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_610": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_620": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_624": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_612": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_626": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.pre_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*pre_model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_75": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.ngf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_z(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_83": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_input - input",
                            "BinOp"
                        ],
                        [
                            "self.epsilon * delta / 2",
                            "BinOp"
                        ],
                        [
                            "~mask_norm * delta + self.epsilon * delta * mask_norm / norm",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_35": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_65": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_115": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_129": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_117": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_131": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/spectral_normalization.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_29": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_30": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_29": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset_split.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "list_split_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root, '%s/split_%i/data.pt' % (name, num_splits))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_30": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([trainset, testset])",
                            "Call"
                        ],
                        [
                            "trainset",
                            "variable"
                        ],
                        [
                            "split_dataset",
                            "variable"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[offset - length:offset]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConcatDataset_99": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[trainset, testset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "list_split_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(path_to_split)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "path_to_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root, '%s/split_%i/data.pt' % (name, num_splits))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/extragradient.py": {
        "torch": {}
    },
    "utils/logger.py": {
        "torch": {}
    },
    "utils/sls/sls.py": {
        "torch": {
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/sls/utils.py": {
        "torch": {
            "sqrt_79": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "torch.sqrt(grad_norm)",
                            "Call"
                        ],
                        [
                            "grad_norm + torch.sum(torch.mul(g, g))",
                            "BinOp"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ],
                        [
                            "grad_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_rng_state_97": {
                "variable": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_98": {
                "variable": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_102": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_78": {
                "input": {
                    "value": "torch.mul(g, g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_rng_state_107": {
                "new_state": {
                    "value": "cpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_108": {
                "new_state": {
                    "value": "gpu_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_78": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_list",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_list",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "norm_57": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_61": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "variable": {
                    "value": "cuda_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_85": {
                "variable": {
                    "value": "cuda_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_278": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(torch.cuda.device_count())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True).to(args.dev)",
                            "Call"
                        ],
                        [
                            "args.madry_model[path]",
                            "Subscript"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "args.madry_model",
                            "Attribute"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "model_mnist(type=args.type)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "main_cifar(args, name=name)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "main_mnist(args, filename=filename)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "train_cifar(args, name=name, augment=augment)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_288": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_328": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(torch.cuda.device_count())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True).to(args.dev)",
                            "Call"
                        ],
                        [
                            "args.madry_model[path]",
                            "Subscript"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "args.madry_model",
                            "Attribute"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "model_mnist(type=args.type)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "main_cifar(args, name=name)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "main_mnist(args, filename=filename)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "train_cifar(args, name=name, augment=augment)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_374": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_418": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_513": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ],
                        [
                            "datasets.MNIST(root=root, train=True, download=True, transform=mnist_transforms)",
                            "Call"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_517": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "datasets.MNIST(root=root, train=False, transform=mnist_transforms)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_596": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ],
                        [
                            "datasets.MNIST(root=root, train=True, download=True, transform=mnist_transforms)",
                            "Call"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ],
                        [
                            "dataset['train']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_598": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "datasets.MNIST(root=root, train=False, transform=mnist_transforms)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_653": {
                "variable": {
                    "value": "dataset_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dataset_1, dataset_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "torch.norm(x - y, p=2, dim=(1, 2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_70": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_71": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(torch.cuda.device_count())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True).to(args.dev)",
                            "Call"
                        ],
                        [
                            "args.madry_model[path]",
                            "Subscript"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "args.madry_model",
                            "Attribute"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "model_mnist(type=args.type)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "main_cifar(args, name=name)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "main_mnist(args, filename=filename)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "train_cifar(args, name=name, augment=augment)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(torch.cuda.device_count())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/mnist_cnn.pt'",
                            "str"
                        ],
                        [
                            "os.path.join('./saved_models/', 'mnist_%s.pt' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join('./pretrained_classifiers/cifar/', '%s/' % name, 'model_%s.pt' % i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_338": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConcatDataset_481": {
                "variable": {
                    "value": "split_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "train_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ConcatDataset_482": {
                "variable": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "test_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_492": {
                "variable": {
                    "value": "split_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(train_splits)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(train_splits)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_494": {
                "variable": {
                    "value": "split_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_502": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(test_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_test_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_506": {
                "variable": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "datasets.MNIST(root=root, train=False, transform=mnist_transforms)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_564": {
                "variable": {
                    "value": "split_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "train_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ConcatDataset_565": {
                "variable": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "test_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_575": {
                "variable": {
                    "value": "split_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(train_splits)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(train_splits)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_577": {
                "variable": {
                    "value": "split_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_585": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(test_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_test_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_589": {
                "variable": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "datasets.MNIST(root=root, train=False, transform=mnist_transforms)",
                            "Call"
                        ],
                        [
                            "Subset(test_set, indices)",
                            "Call"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ],
                        [
                            "dataset['test']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_654": {
                "dataset": {
                    "value": "dataset_tot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([dataset_1, dataset_2])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_36": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_54": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.learning_rate(lr, num_epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_351": {
                "variable": {
                    "value": "_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.learning_rate(lr, num_epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_486": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(split_test_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_test_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_490": {
                "variable": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_504": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_505": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_test_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_569": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(split_test_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_test_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.random.manual_seed(1234)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_573": {
                "variable": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "split_test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(test_splits)",
                            "Call"
                        ],
                        [
                            "Subset(split_test_dataset, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(test_set), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ],
                        [
                            "torch.randint(len(split_test_dataset), size=(num_test_samples,), generator=generator)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_test_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_587": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_588": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_test_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_360": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/mnist_cnn.pt'",
                            "str"
                        ],
                        [
                            "os.path.join('./saved_models/', 'mnist_%s.pt' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join('./pretrained_classifiers/cifar/', '%s/' % name, 'model_%s.pt' % i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_488": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_489": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_test_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_571": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_572": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_test_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_269": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(torch.cuda.device_count())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True).to(args.dev)",
                            "Call"
                        ],
                        [
                            "args.madry_model[path]",
                            "Subscript"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "args.madry_model",
                            "Attribute"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, path)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "model_mnist(type=args.type)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "get_madry_et_al_tf_model(args.dataset, filename)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "main_cifar(args, name=name)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "main_mnist(args, filename=filename)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "MadryLeNet(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "Net(args.nc, args.h, args.w).to(args.dev)",
                            "Call"
                        ],
                        [
                            "init_func().to(args.dev)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "train_cifar(args, name=name, augment=augment)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_271": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/mnist_cnn.pt'",
                            "str"
                        ],
                        [
                            "os.path.join('./saved_models/', 'mnist_%s.pt' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join('./pretrained_classifiers/cifar/', '%s/' % name, 'model_%s.pt' % i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_245": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/mnist_cnn.pt'",
                            "str"
                        ],
                        [
                            "os.path.join('./saved_models/', 'mnist_%s.pt' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join('./pretrained_classifiers/cifar/', '%s/' % name, 'model_%s.pt' % i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_249": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/mnist_cnn.pt'",
                            "str"
                        ],
                        [
                            "os.path.join('./saved_models/', 'mnist_%s.pt' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join('./pretrained_classifiers/cifar/', '%s/' % name, 'model_%s.pt' % i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}