{
    "extended_model.py": {
        "tensorflow": {
            "Variable_8": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.V, embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_10": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([self.V, embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_50": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.num_units",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_55": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.max_input_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.max_output_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.noise_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_73": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_80": {
                "variable": {
                    "value": "self.target_mask_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_output_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_82": {
                "variable": {
                    "value": "self.target_mask_int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_output_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_84": {
                "variable": {
                    "value": "self.input_mask_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_input_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "variable": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_score / self.args.switch_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_31": {
                "variable": {
                    "value": "primitive",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_primitive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(2 * self.switch - 1)",
                            "Call"
                        ],
                        [
                            "self.switch",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "primitive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embeddings(self.x, self.args.embedding_size)",
                            "Call"
                        ],
                        [
                            "tf.multiply(switch_primitive, primitive, name='primitive')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "primitive",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_32": {
                "variable": {
                    "value": "function",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_function",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(1 - 2 * self.switch)",
                            "Call"
                        ],
                        [
                            "1 - self.switch",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "function",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embeddings(self.x, self.args.function_embedding_size)",
                            "Call"
                        ],
                        [
                            "tf.multiply(switch_function, function, name='function')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "function",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_score / self.args.switch_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_96": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_sum * self.target_mask_float / tf.to_float(self.batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_121": {
                "variable": {
                    "value": "word_equality",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.y, self.prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "self.word_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(valid_word_equality, -1) / tf.to_float(self.y_len)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_127": {
                "variable": {
                    "value": "sent_equality",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "word_equality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(self.y, self.prediction))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "self.sent_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_equality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(word_equality, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "compute_switch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "switch_primitive",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "2 * self.switch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "switch_function",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "1 - 2 * self.switch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "compute_switch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "generate_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(self.switch * tf.log(self.switch) + (1 - self.switch) * tf.log(1 - self.switch))",
                            "UnaryOp"
                        ],
                        [
                            "self.switch * (1 - self.switch)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent * self.input_mask_float / tf.to_float(self.batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "ss_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ss_value ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_120": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_121": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_97": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "input": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "ss * self.input_mask_float",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_112": {
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "valid_word_equality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_equality * self.target_mask_float",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_124": {
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_107": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_103": {
                "x": {
                    "value": "1 - self.switch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "simple_model.py": {
        "tensorflow": {
            "variables_initializer_78": {
                "variable": {
                    "value": "self.reset_optimizer_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer.variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_80": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_81": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "function_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_input_length * self.V]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "function_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ff(function_concat, 1, 32, self.max_output_length * self.max_input_length)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_output_length, self.max_input_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_135": {
                "variable": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "x_one_hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.max_input_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.max_output_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.noise_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_169": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_172": {
                "variable": {
                    "value": "self.target_mask_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_output_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_174": {
                "variable": {
                    "value": "self.target_mask_int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_output_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_176": {
                "variable": {
                    "value": "self.input_mask_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_input_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_292": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "self.max_input_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_300": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x[:self.max_output_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_315": {
                "variable": {
                    "value": "encoder_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.args.num_units / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_316": {
                "variable": {
                    "value": "encoder_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.args.num_units / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_323": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_state[0].h, encoder_state[1].h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_324": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoder_state[0].c, encoder_state[1].c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_325": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.attention, primitive)",
                            "Call"
                        ],
                        [
                            "tf.concat([encoder_state[0].h, encoder_state[1].h], 1)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(zip(X, Y, X_len, Y_len))",
                            "Call"
                        ],
                        [
                            "tf.concat([encoder_state[0].c, encoder_state[1].c], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_329": {
                "variable": {
                    "value": "encoder_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.args.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_363": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.num_units",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_368": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_37": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.decay_steps",
                            "Attribute"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.96",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, decay_steps, decay_base, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_54": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_55": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables(scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_83": {
                "logdir": {
                    "value": "logs/ + self.args.experiment_id + /model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "hidden",
                            "Name"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(score_stack, [-1, self.max_output_length, self.max_input_length], name='score')",
                            "Call"
                        ],
                        [
                            "self.ff(outputs, 1, 32, self.max_input_length)",
                            "Call"
                        ],
                        [
                            "self.ff(logits, 1, 32, self.max_input_length)",
                            "Call"
                        ],
                        [
                            "score / self.args.attention_temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_score / self.args.switch_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_152": {
                "variable": {
                    "value": "primitive",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_primitive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(2 * self.switch - 1)",
                            "Call"
                        ],
                        [
                            "self.switch",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.x, self.V, name='x_one_hot')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "primitive",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_153": {
                "variable": {
                    "value": "function",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "switch_function",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(1 - 2 * self.switch)",
                            "Call"
                        ],
                        [
                            "1 - self.switch",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.x, self.V, name='x_one_hot')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "function",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_158": {
                "variable": {
                    "value": "primitive",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "primitive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_one_hot",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(primitive, embedding_size)",
                            "Call"
                        ],
                        [
                            "tf.multiply(switch_primitive, x_one_hot, name='primitive')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.embedding_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dense_159": {
                "variable": {
                    "value": "function",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "function",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_one_hot",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(function, embedding_size)",
                            "Call"
                        ],
                        [
                            "tf.multiply(switch_function, x_one_hot, name='function')",
                            "Call"
                        ],
                        [
                            "primitive",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.embedding_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_197": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "primitive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_one_hot",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(primitive, embedding_size)",
                            "Call"
                        ],
                        [
                            "tf.multiply(switch_primitive, x_one_hot, name='primitive')",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_203": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ff(h, 1, 32, self.U, use_bias=not self.args.remove_prediction_bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_204": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_sum * self.target_mask_float / tf.to_float(self.batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_228": {
                "variable": {
                    "value": "word_equality",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.y, self.prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_230": {
                "variable": {
                    "value": "self.word_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(valid_word_equality, -1) / tf.to_float(self.y_len)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_234": {
                "variable": {
                    "value": "sent_equality",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "word_equality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(self.y, self.prediction))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_235": {
                "variable": {
                    "value": "self.sent_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sent_equality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(word_equality, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_305": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_318": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.args.num_units / 2)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.args.num_units / 2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_321": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "encoder_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.args.num_units / 2)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "encoder_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.args.num_units / 2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_331": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.args.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_334": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "encoder_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(self.args.num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x, nodes, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, self.max_input_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "variable": {
                    "value": "unsqueezed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=self.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_342": {
                "variable": {
                    "value": "decoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unsqueezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(zeros, [-1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.max_output_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_345": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.U, self.args.output_embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_347": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([self.U, self.args.output_embedding_size], -1.0, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_348": {
                "variable": {
                    "value": "decoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, self.y)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_norm_11": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "IndexedSlices_12": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_norm(grad.values, max_norm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "grad.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_14": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients",
                            "Name"
                        ],
                        [
                            "tf.IndexedSlices(tmp, grad.indices, grad.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_norm(grad, max_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_23": {
                "seed": {
                    "value": "random.randint(2, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_25": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_46": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, decay_steps, decay_base, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, decay_steps, decay_base, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_59": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.args.max_gradient_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(rep)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rep ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "noise_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_norm / tf.to_float(self.batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "variable": {
                    "value": "norm_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm * self.input_mask_float",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "noise_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "noise_reg_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_sum / tf.to_float(self.x_len)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "attention_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "attention_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "compute_switch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "switch_primitive",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "2 * self.switch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "switch_function",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "1 - 2 * self.switch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "noise_regularization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "generate_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "evaluation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "variable": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(self.switch * tf.log(self.switch) + (1 - self.switch) * tf.log(1 - self.switch))",
                            "UnaryOp"
                        ],
                        [
                            "self.switch * (1 - self.switch)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent * self.input_mask_float / tf.to_float(self.batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_220": {
                "variable": {
                    "value": "ss_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ss_value ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicRNNCell_294": {
                "num_units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "BasicRNNCell_295": {
                "num_units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "attention_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "attention_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_326": {
                "values": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "attention_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "attention_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_386": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score / self.args.attention_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "prediction_network",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_227": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ff(h, 1, 32, self.U, use_bias=not self.args.remove_prediction_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_228": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_101": {
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_109": {
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_204": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "input": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "ss * self.input_mask_float",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_219": {
                "x": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "valid_word_equality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_equality * self.target_mask_float",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_231": {
                "x": {
                    "value": "self.y_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_383": {
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(score_stack, [-1, self.max_output_length, self.max_input_length], name='score')",
                            "Call"
                        ],
                        [
                            "self.ff(outputs, 1, 32, self.max_input_length)",
                            "Call"
                        ],
                        [
                            "self.ff(logits, 1, 32, self.max_input_length)",
                            "Call"
                        ],
                        [
                            "score / self.args.attention_temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_383": {
                "input": {
                    "value": "self.input_mask_float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_384": {
                "input_tensor": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(score) * tf.expand_dims(self.input_mask_float, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_106": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_214": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_209": {
                "x": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_210": {
                "x": {
                    "value": "1 - self.switch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}