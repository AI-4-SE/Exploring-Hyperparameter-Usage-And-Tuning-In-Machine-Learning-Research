{
    "flownet_models.py": {
        "tensorflow": {
            "pad_51": {
                "variable": {
                    "value": "inb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inb, [[0, 0], [0, 0], [pad, pad], [pad, pad]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [pad, pad], [pad, pad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_61": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(res, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "img_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(img, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_74": {
                "variable": {
                    "value": "(dx, dy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_75": {
                "variable": {
                    "value": "(xf, yf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.cast(tf.range(w), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.cast(tf.range(h), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xf - tf.floor(xf)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yf - tf.floor(yf)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_82": {
                "variable": {
                    "value": "xL",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.floor(xf), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_83": {
                "variable": {
                    "value": "xR",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.floor(xf) + 1, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_84": {
                "variable": {
                    "value": "yT",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.floor(yf), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "yB",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.floor(yf) + 1, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_87": {
                "variable": {
                    "value": "batch_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(tf.range(B), axis=-1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(xf - tf.floor(xf), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_119": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_23": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [p, p], [p, p]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_27": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_ids * h * w + y * w + x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_ids * h * w + y * w + x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "tf.transpose(val, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, shp[1], h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.shape.as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(x)[2:] * factor",
                            "BinOp"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.shape.as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(x)[2:] * factor",
                            "BinOp"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[left, right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "rgb_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_178": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "x1x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, self.height, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1x2, resampled_img1, flownetc_flow / DISP_SCALE, norm_diff_img0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1x2, resampled_img1, flownets1_flow / DISP_SCALE, norm_diff_img0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_215": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1, flownetsd_flow, flownets2_flow, norm_flownetsd_flow, norm_flownets2_flow, diff_flownetsd_img1, diff_flownets2_img1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_239": {
                "variable": {
                    "value": "conv0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_246": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_249": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_252": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_256": {
                "variable": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow2",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_259": {
                "variable": {
                    "value": "flow2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(interconv2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow2_to_1",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_261": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(x, 1), 128, name='conv2_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 128, name='conv2_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 2), 128, kernel_size=5, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 2), 128, kernel_size=5, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv1, x, flow2_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_265": {
                "variable": {
                    "value": "interconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_conv1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_269": {
                "variable": {
                    "value": "flow1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(interconv1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_272": {
                "variable": {
                    "value": "flow1_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv1, 1), 2, name='predict_flow1', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow1_to_0",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_274": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x1x2, resampled_img1, flownetc_flow / DISP_SCALE, norm_diff_img0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv1, x, flow2_up], axis=1, name='concat1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv0",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_277": {
                "variable": {
                    "value": "concat0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv0, x, flow1_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_278": {
                "variable": {
                    "value": "interconv0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_conv0",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_281": {
                "variable": {
                    "value": "flow0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(interconv0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow0",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_304": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_307": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_310": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_313": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_317": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_323": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_326": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_329": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_332": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_335": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_338": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_342": {
                "variable": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv6, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow6",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_345": {
                "variable": {
                    "value": "flow6_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow6_to_5",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_347": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_350": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv5, x, flow6_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_351": {
                "variable": {
                    "value": "interconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_conv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_354": {
                "variable": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(interconv5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow5",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_357": {
                "variable": {
                    "value": "flow5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow5_to_4",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_359": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_362": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv4, x, flow5_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_363": {
                "variable": {
                    "value": "interconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_conv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_366": {
                "variable": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(interconv4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow4",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_369": {
                "variable": {
                    "value": "flow4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow4_to_3",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_371": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_374": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv3, x, flow4_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_375": {
                "variable": {
                    "value": "interconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_conv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_378": {
                "variable": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(interconv3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow3",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_381": {
                "variable": {
                    "value": "flow3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow3_to_2",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_383": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x1, flownetsd_flow, flownets2_flow, norm_flownetsd_flow, norm_flownets2_flow, diff_flownetsd_img1, diff_flownets2_img1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3_1, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_386": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2, x, flow3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_387": {
                "variable": {
                    "value": "interconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_conv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_390": {
                "variable": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(interconv2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow2",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_417": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_420": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_424": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_428": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_435": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_439": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_442": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_446": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_449": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_454": {
                "variable": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv6, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow6",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_457": {
                "variable": {
                    "value": "flow6_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow6_to_5",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_460": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_464": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv5, x, flow6_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_465": {
                "variable": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow5",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_468": {
                "variable": {
                    "value": "flow5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow5_to_4",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_471": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_475": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv4, x, flow5_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_476": {
                "variable": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow4",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_479": {
                "variable": {
                    "value": "flow4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow4_to_3",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_482": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_486": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv3, x, flow4_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_487": {
                "variable": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow3",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_490": {
                "variable": {
                    "value": "flow3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow3_to_2",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_493": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x1, flownetsd_flow, flownets2_flow, norm_flownetsd_flow, norm_flownets2_flow, diff_flownetsd_img1, diff_flownets2_img1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3_1, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_497": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2, x, flow3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_498": {
                "variable": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow2",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_521": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x1x2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_524": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_527": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_531": {
                "variable": {
                    "value": "(conv2a, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(x, 1), 128, name='conv2_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 128, name='conv2_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 2), 128, kernel_size=5, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 2), 128, kernel_size=5, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_532": {
                "variable": {
                    "value": "(conv3a, conv3b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(x, 1), 256, name='conv3_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 256, name='conv3_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_540": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "correlation(conv3a, conv3b, kernel_size=1, max_displacement=20, stride_1=1, stride_2=2, pad=20, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(corr, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_542": {
                "variable": {
                    "value": "conv_redir",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3a",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_redir",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_546": {
                "variable": {
                    "value": "in_conv3_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_redir, corr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "in_conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_547": {
                "variable": {
                    "value": "conv3_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(in_conv3_1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_551": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv3_1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_554": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_557": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_560": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_563": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_566": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6_1",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_570": {
                "variable": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(conv6, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow6",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_573": {
                "variable": {
                    "value": "flow6_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv6, 1), 2, name='predict_flow6', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow6_to_5",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_575": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 1024, name='conv6_1', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv5",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_579": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv5, x, flow6_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_580": {
                "variable": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat5, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow5",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_583": {
                "variable": {
                    "value": "flow5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat5, 1), 2, name='predict_flow5', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow5_to_4",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_585": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv5, x, flow6_up], axis=1, name='concat5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv4",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_588": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv4, x, flow5_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_589": {
                "variable": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow4",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_592": {
                "variable": {
                    "value": "flow4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat4, 1), 2, name='predict_flow4', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow4_to_3",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_594": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv4, x, flow5_up], axis=1, name='concat4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv3",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_597": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv3_1, x, flow4_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_598": {
                "variable": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow3",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_601": {
                "variable": {
                    "value": "flow3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat3, 1), 2, name='predict_flow3', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "upsampled_flow3_to_2",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_603": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x1, flownetsd_flow, flownets2_flow, norm_flownetsd_flow, norm_flownets2_flow, diff_flownetsd_img1, diff_flownets2_img1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ],
                        [
                            "tf.concat([conv3_1, x, flow4_up], axis=1, name='concat3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: tf.nn.leaky_relu(x, 0.1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_606": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2a, x, flow3_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_607": {
                "variable": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad(concat2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predict_flow2",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_58": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(inb, [[0, 0], [0, 0], [pad, pad], [pad, pad]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, start_h, start_w]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ina * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "a": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "tf.range(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "tf.floor(xf)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "tf.floor(xf) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "tf.floor(yf)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_85": {
                "x": {
                    "value": "tf.floor(yf) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "tf.range(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_92": {
                "params": {
                    "value": "img_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(img, [0, 2, 3, 1]), [-1, c])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_ids * h * w + y * w + x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(idx, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "get(yT, xL)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "get(yT, xR)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "get(yB, xL)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "get(yB, xR)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, h, w, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "a": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(alpha)",
                            "Call"
                        ],
                        [
                            "val + (0 + alpha) * (0 + beta) * tf.reshape(get(yB, xR), [-1, h, w, c])",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_285": {
                "input": {
                    "value": "flow0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(interconv0, 1), 2, name='predict_flow0', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "flow2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_408": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(x, 2, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_502": {
                "input": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(interconv2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "flow2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_611": {
                "input": {
                    "value": "flow2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(interconv2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(concat2, 1), 2, name='predict_flow2', strides=1, activation=tf.identity, padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "flow2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_79": {
                "x": {
                    "value": "xf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xf + dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_80": {
                "x": {
                    "value": "yf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "yf + dy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_82": {
                "x": {
                    "value": "xf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xf + dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_84": {
                "x": {
                    "value": "yf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "yf + dy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_136": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "right",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_160": {
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.graph_structure(x)",
                            "Call"
                        ],
                        [
                            "self.postprocess(prediction)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "flownet_s1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "flownet_s2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "flownet_sd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "flownet_fusion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_83": {
                "x": {
                    "value": "xf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xf + dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_85": {
                "x": {
                    "value": "yf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "yf + dy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_408": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_239": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_243": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_246": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_249": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_252": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_261": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_274": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_300": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_304": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_307": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_310": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_313": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_317": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_320": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_323": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_326": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_329": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_332": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_335": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_338": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_347": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_359": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_371": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_383": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_417": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_421": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_425": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_429": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_432": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_436": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_439": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_443": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_446": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_450": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_460": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_471": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_482": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_493": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_522": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_525": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_528": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_543": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_548": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_552": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_555": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_558": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_561": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_564": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_567": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_575": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_585": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_594": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_603": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, shp, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(x, shp, align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, right], axis=0)",
                            "Call"
                        ],
                        [
                            "self.preprocess(left, right)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv0, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv2, 32, name='deconv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat1, 16, name='deconv0', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv0', strides=1, activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 1), 64, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv1, 1), 128, name='conv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 1), 256, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(x, 2, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv2, 2), 256, kernel_size=5, name='conv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(x1x2, 3), 64, kernel_size=7, name='conv1', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv3_1, 1), 512, name='conv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv4, 1), 512, name='conv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(pad(conv5, 1), 1024, name='conv6', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='valid', strides=2, kernel_size=3, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(conv6, 512, name='deconv5', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat5, 256, name='deconv4', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat4, 128, name='deconv3', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(concat3, 64, name='deconv2', activation=lambda x: tf.nn.leaky_relu(x, 0.1), padding='same', data_format='channels_first', strides=2, kernel_size=4)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "concat_88": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features_4_warped, features_3_warped, features_2_warped, features_warped]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features_warped, features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_347": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flow3_f_warped, flow2_f_warped, flow1_f_warped, flow_f, images_pre_rec_f]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_51": {
                "variable": {
                    "value": "features_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features_0, features_1, features_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "analysis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "synthesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "bit_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entropy_bottleneck.compress(y)",
                            "Call"
                        ],
                        [
                            "entropy_bottleneck.compress(y, dev_tilde)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "analysis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "synthesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_312": {
                "variable": {
                    "value": "bit_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entropy_bottleneck.compress(y)",
                            "Call"
                        ],
                        [
                            "entropy_bottleneck.compress(y, dev_tilde)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_218": {
                "input_tensor": {
                    "value": "tf.log(likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "layer_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_315": {
                "input_tensor": {
                    "value": "tf.log(likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_218": {
                "x": {
                    "value": "likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_310": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_315": {
                "x": {
                    "value": "likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules.py": {
        "tensorflow": {
            "unstack_73": {
                "variable": {
                    "value": "(batch_size, height, width, filters)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_74": {
                "variable": {
                    "value": "(Bg, Yg, Xg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(height)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(flow, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_84": {
                "variable": {
                    "value": "warped_gy",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grid_y, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flow[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_85": {
                "variable": {
                    "value": "warped_gx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grid_x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flow[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unstack_87": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_88": {
                "variable": {
                    "value": "warped_gy",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "warped_gy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(grid_y, flow[:, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(warped_gy, 0, h - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_89": {
                "variable": {
                    "value": "warped_gx",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "warped_gx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(grid_x, flow[:, :, :, 0])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(warped_gx, 0, w - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "warped_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grid_b, warped_gy, warped_gx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_93": {
                "variable": {
                    "value": "warped_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "warped_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([grid_b, warped_gy, warped_gx], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_97": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "grid_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grid_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grid_b, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grid_y, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(grid_x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_103": {
                "variable": {
                    "value": "(fx, fy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(flow, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_104": {
                "variable": {
                    "value": "fx_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_106": {
                "variable": {
                    "value": "fy_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "h_lim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "w_lim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_112": {
                "variable": {
                    "value": "gy_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grid_y + fy_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h_lim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(h - 1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_113": {
                "variable": {
                    "value": "gy_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grid_y + fy_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h_lim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(h - 1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_114": {
                "variable": {
                    "value": "gx_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grid_x + fx_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w_lim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(w - 1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_115": {
                "variable": {
                    "value": "gx_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grid_x + fx_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w_lim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(w - 1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_117": {
                "variable": {
                    "value": "g_00",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([grid_b, gy_0, gx_0], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "g_01",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([grid_b, gy_0, gx_1], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "g_10",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([grid_b, gy_1, gx_0], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_120": {
                "variable": {
                    "value": "g_11",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([grid_b, gy_1, gx_1], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_123": {
                "variable": {
                    "value": "x_00",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "g_00",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([grid_b, gy_0, gx_0], axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_124": {
                "variable": {
                    "value": "x_01",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "g_01",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([grid_b, gy_0, gx_1], axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_125": {
                "variable": {
                    "value": "x_10",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "g_10",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([grid_b, gy_1, gx_0], axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_126": {
                "variable": {
                    "value": "x_11",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "g_11",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([grid_b, gy_1, gx_1], axis=3), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "c_00",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(fy_1 - fy) * (fx_1 - fx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "variable": {
                    "value": "c_01",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(fy_1 - fy) * (fx - fx_0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "variable": {
                    "value": "c_10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(fy - fy_0) * (fx_1 - fx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "variable": {
                    "value": "c_11",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(fy - fy_0) * (fx - fx_0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_252": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_342": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_375": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_97": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_117": {
                "values": {
                    "value": "[grid_b, gy_0, gx_0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_118": {
                "values": {
                    "value": "[grid_b, gy_0, gx_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_119": {
                "values": {
                    "value": "[grid_b, gy_1, gx_0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_120": {
                "values": {
                    "value": "[grid_b, gy_1, gx_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_161": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unstack_199": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_200": {
                "variable": {
                    "value": "U_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_bilinear_201": {
                "variable": {
                    "value": "V_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "YUV",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Y, U_up, V_up]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_204": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_206": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_225": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_228": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_231": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_234": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_237": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_240": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_259": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_260": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(64, (3, 3), (2, 2), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_261": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(64, (3, 3), (2, 2), 'same')(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unstack_262": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_263": {
                "variable": {
                    "value": "x2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.resblock(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(2 * h, 2 * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_265": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_266": {
                "variable": {
                    "value": "x1_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.resblock(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(2 * h, 2 * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_282": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(input_channel, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_333": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_350": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_353": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_356": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_359": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_362": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_365": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_382": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_383": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(48, (3, 3), (2, 2), 'same')(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_384": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.Conv2D(48, (3, 3), (2, 2), 'same')(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unstack_385": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_386": {
                "variable": {
                    "value": "x2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.resblock(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(2 * h, 2 * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unstack_388": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_389": {
                "variable": {
                    "value": "x1_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.resblock(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(2 * h, 2 * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (2, 2), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(self.filters[l], (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(YUV)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(24, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(12, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([images, features], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(3, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(tf.concat([images, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(self.resblock(x)) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(self.resblock(x)))",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same')(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(64, (3, 3), (1, 1), 'same', dilation_rate=(4, 4))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same', dilation_rate=(8, 8))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(16, 16))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(32, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same', dilation_rate=(1, 1))(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(tf.concat([x, features], axis=3))",
                            "Call"
                        ],
                        [
                            "self.resblock(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (1, 1), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x) + x1_up",
                            "BinOp"
                        ],
                        [
                            "self.resblock(self.resblock(x))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_51": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.Conv2D(f, (3, 3), (1, 1), 'same')(features)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(conv, 0.1)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unstack_65": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(flows)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_67": {
                "variable": {
                    "value": "features_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "tf.concat([features, f], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, features], axis=3)",
                            "Call"
                        ],
                        [
                            "conv",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(2 * h, 2 * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_253": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "analysis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(input_channel, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_288": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(input_channel, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "synthesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_299": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(input_channel, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_302": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(input_channel, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_305": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2DTranspose(num_filters, (5, 5), (2, 2), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ],
                        [
                            "tf.layers.Conv2D(input_channel, (3, 3), (1, 1), 'same')(tensor)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_317": {
                "variable": {
                    "value": "bit_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entropy_bottleneck.compress(y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_343": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_376": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_47": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, f]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_57": {
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_158": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_160": {
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_162": {
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_175": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_199": {
                "input": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2D_203": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_205": {
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_207": {
                "filters": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_226": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_229": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_232": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_235": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_238": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_241": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_252": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_257": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_257": {
                "values": {
                    "value": "[images, features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_262": {
                "input": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (2, 2), 'same')(x1), 0.1)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (2, 2), 'same')(x1), 0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_265": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (2, 2), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x1) + x2_up",
                            "BinOp"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (2, 2), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x1) + x2_up",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_297": {
                "name_or_scope": {
                    "value": "layer_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_320": {
                "input_tensor": {
                    "value": "tf.log(likelihoods)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_332": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_342": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_348": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_351": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_354": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_357": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_360": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_363": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_366": {
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_375": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_380": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_380": {
                "values": {
                    "value": "[x, features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_385": {
                "input": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (2, 2), 'same')(x1), 0.1)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (2, 2), 'same')(x1), 0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_388": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(64, (3, 3), (2, 2), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x1) + x2_up",
                            "BinOp"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.layers.Conv2D(48, (3, 3), (2, 2), 'same')(x), 0.1)",
                            "Call"
                        ],
                        [
                            "self.resblock(x1) + x2_up",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2D_392": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_27": {
                "filters": {
                    "value": "self.filters[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_50": {
                "filters": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[flows_up_prev, features_up_prev]",
                            "List"
                        ],
                        [
                            "self.filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "flows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same')(features)",
                            "Call"
                        ],
                        [
                            "flows + flows_up_prev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "resize_bilinear_66": {
                "images": {
                    "value": "flows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.Conv2D(2, (3, 3), (1, 1), 'same')(features)",
                            "Call"
                        ],
                        [
                            "flows + flows_up_prev",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(2 * h, 2 * w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_259": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_260": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_261": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_269": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_284": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_287": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_290": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_298": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_301": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_304": {
                "filters": {
                    "value": "input_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_320": {
                "x": {
                    "value": "likelihoods",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2D_382": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_383": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_384": {
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_23": {
                "filters": {
                    "value": "self.filters[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "filters": {
                    "value": "self.filters[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/__init__.py": {
        "tensorflow": {}
    },
    "tensorflow_compression/python/layers/entropy_models.py": {
        "tensorflow": {
            "InputSpec_168": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_258": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "ndim * [None]",
                            "BinOp"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputSpec_263": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "input_shape.ndims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: channels}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_308": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[-target, 0, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_321": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "abs(logits - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_331": {
                "variable": {
                    "value": "minima",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._medians - quantiles[:, :, 0:1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_332": {
                "variable": {
                    "value": "maxima",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "quantiles[:, :, 2:3] - self._medians",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_333": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minima",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_max(self._medians - quantiles[:, :, 0:1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxima",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_max(quantiles[:, :, 2:3] - self._medians)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_334": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.maximum(minima, maxima)",
                            "Call"
                        ],
                        [
                            "math_ops.ceil(minmax)",
                            "Call"
                        ],
                        [
                            "math_ops.maximum(minmax, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_335": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.maximum(minima, maxima)",
                            "Call"
                        ],
                        [
                            "math_ops.ceil(minmax)",
                            "Call"
                        ],
                        [
                            "math_ops.maximum(minmax, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_338": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_341": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_352": {
                "variable": {
                    "value": "pmf",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[math_ops.add_n([pmf[:, 0, :1], math_ops.sigmoid(lower[:, 0, :1])]), pmf[:, 0, 1:-1], math_ops.add_n([pmf[:, 0, -1:], math_ops.sigmoid(-upper[:, 0, -1:])])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "assign_375": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._quantized_cdf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder_ops.pmf_to_quantized_cdf(pmf, precision=self.range_coder_precision)",
                            "Call"
                        ],
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ],
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ]
                    ]
                },
                "validate_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_403": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_406": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_413": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(ndim))",
                            "Call"
                        ],
                        [
                            "list(range(1, ndim))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_414": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_415": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(shape[0], 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_435": {
                "variable": {
                    "value": "sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sign",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-math_ops.sign(math_ops.add_n([lower, upper]))",
                            "UnaryOp"
                        ],
                        [
                            "-math_ops.sign(math_ops.add_n([lower, upper]))",
                            "UnaryOp"
                        ],
                        [
                            "array_ops.stop_gradient(sign)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_446": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.shape(values)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_447": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(ndim))",
                            "Call"
                        ],
                        [
                            "list(range(1, ndim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_448": {
                "variable": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(math_ops.sigmoid(sign * upper) - math_ops.sigmoid(sign * lower))",
                            "Call"
                        ],
                        [
                            "tfc_math_ops.lower_bound(likelihood, likelihood_bound)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(likelihood, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(likelihood, order)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.shape(values)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_449": {
                "variable": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(math_ops.sigmoid(sign * upper) - math_ops.sigmoid(sign * lower))",
                            "Call"
                        ],
                        [
                            "tfc_math_ops.lower_bound(likelihood, likelihood_bound)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(likelihood, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(likelihood, order)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(ndim))",
                            "Call"
                        ],
                        [
                            "list(range(1, ndim))",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_604": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "ndim * [None]",
                            "BinOp"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_226": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(matrix)",
                            "Call"
                        ],
                        [
                            "self.add_variable('matrix_{}'.format(i), dtype=self.dtype, shape=(channels, filters[i + 1], filters[i]), initializer=init_ops.Constant(init))",
                            "Call"
                        ],
                        [
                            "nn.softplus(matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.matmul(matrix, logits)",
                            "Call"
                        ],
                        [
                            "logits + factor * math_ops.tanh(logits)",
                            "BinOp"
                        ],
                        [
                            "self._logits_cumulative(quantiles, stop_gradient=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_278": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(matrix)",
                            "Call"
                        ],
                        [
                            "self.add_variable('matrix_{}'.format(i), dtype=self.dtype, shape=(channels, filters[i + 1], filters[i]), initializer=init_ops.Constant(init))",
                            "Call"
                        ],
                        [
                            "nn.softplus(matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_313": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-self.init_scale, 0, self.init_scale]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "round_327": {
                "variable": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_420": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[values, noise]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_439": {
                "variable": {
                    "value": "likelihood_bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.likelihood_bound",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_469": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_496": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_497": {
                "variable": {
                    "value": "medians",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_504": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.5, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(0.5, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(0.5, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_505": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.cast(num_levels, self.dtype) - half",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_507": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_512": {
                "variable": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "loop_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_540": {
                "variable": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functional_ops.map_fn(loop_body, values, dtype=dtypes.string, back_prop=False)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(strings)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_541": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.shape(values)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_569": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "loop_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functional_ops.map_fn(loop_body, values, dtype=dtypes.string, back_prop=False)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(strings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_571": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functional_ops.map_fn(loop_body, strings, dtype=dtypes.int16, back_prop=False)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(outputs, self.dtype)",
                            "Call"
                        ],
                        [
                            "outputs - offsets[slices[:-1]]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_573": {
                "variable": {
                    "value": "medians",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_599": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_601": {
                "name": {
                    "value": "pmf",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._pmf",
                            "Attribute"
                        ],
                        [
                            "image * (255 / math_ops.reduce_max(image, axis=1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(image + 0.5, dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "image[None, :, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_225": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(matrix)",
                            "Call"
                        ],
                        [
                            "self.add_variable('matrix_{}'.format(i), dtype=self.dtype, shape=(channels, filters[i + 1], filters[i]), initializer=init_ops.Constant(init))",
                            "Call"
                        ],
                        [
                            "nn.softplus(matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_230": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._biases[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(bias)",
                            "Call"
                        ],
                        [
                            "self.add_variable('bias_{}'.format(i), dtype=self.dtype, shape=(channels, filters[i + 1], 1), initializer=init_ops.RandomUniform(-0.5, 0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_292": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._factors[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(factor)",
                            "Call"
                        ],
                        [
                            "self.add_variable('factor_{}'.format(i), dtype=self.dtype, shape=(channels, filters[i + 1], 1), initializer=init_ops.Zeros())",
                            "Call"
                        ],
                        [
                            "math_ops.tanh(factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_315": {
                "input": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.log(np.expm1(1 / scale / filters[i + 1]))",
                            "Call"
                        ],
                        [
                            "constant_op.constant([[[-self.init_scale, 0, self.init_scale]]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(shape[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_348": {
                "x": {
                    "value": "math_ops.add_n([lower, upper])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_with_default_367": {
                "input": {
                    "value": "array_ops.zeros((channels, 1), dtype=dtypes.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(channels, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_424": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_434": {
                "x": {
                    "value": "math_ops.add_n([lower, upper])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "executing_eagerly_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_468": {
                "name": {
                    "value": "self._name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_539": {
                "name": {
                    "value": "self._name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_596": {
                "name": {
                    "value": "self._name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_236": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._factors[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(factor)",
                            "Call"
                        ],
                        [
                            "self.add_variable('factor_{}'.format(i), dtype=self.dtype, shape=(channels, filters[i + 1], 1), initializer=init_ops.Zeros())",
                            "Call"
                        ],
                        [
                            "math_ops.tanh(factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_348": {
                "inputs": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_349": {
                "x": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_353": {
                "inputs": {
                    "value": "[pmf[:, 0, :1], math_ops.sigmoid(lower[:, 0, :1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_355": {
                "inputs": {
                    "value": "[pmf[:, 0, -1:], math_ops.sigmoid(-upper[:, 0, -1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "shape": {
                    "value": "(channels, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_419": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, order)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, (shape[0], 1, -1))",
                            "Call"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(values, shape)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(values, order)",
                            "Call"
                        ],
                        [
                            "inputs + offsets[slices[:-1]]",
                            "BinOp"
                        ],
                        [
                            "math_ops.maximum(values, half)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(values, math_ops.cast(num_levels, self.dtype) - half)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(values, dtypes.int16)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_434": {
                "inputs": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_437": {
                "x": {
                    "value": "sign * lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "executing_eagerly_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_574": {
                "x": {
                    "value": "num_levels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_577": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_598": {
                "input_tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._pmf",
                            "Attribute"
                        ],
                        [
                            "image * (255 / math_ops.reduce_max(image, axis=1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(image + 0.5, dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "image[None, :, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_237": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.matmul(matrix, logits)",
                            "Call"
                        ],
                        [
                            "logits + factor * math_ops.tanh(logits)",
                            "BinOp"
                        ],
                        [
                            "self._logits_cumulative(quantiles, stop_gradient=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Constant_277": {
                "value": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.log(np.expm1(1 / scale / filters[i + 1]))",
                            "Call"
                        ],
                        [
                            "constant_op.constant([[[-self.init_scale, 0, self.init_scale]]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomUniform_284": {
                "minval": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "round_422": {
                "x": {
                    "value": "values - self._medians",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_493": {
                "input": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder_ops.pmf_to_quantized_cdf(pmf, precision=self.range_coder_precision)",
                            "Call"
                        ],
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ],
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_498": {
                "x": {
                    "value": "num_levels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_506": {
                "x": {
                    "value": "num_levels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.shape(cdf)[-1] - 1",
                            "BinOp"
                        ],
                        [
                            "array_ops.shape(cdf)[-1] - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_564": {
                "input": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder_ops.pmf_to_quantized_cdf(pmf, precision=self.range_coder_precision)",
                            "Call"
                        ],
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ],
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Zeros_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_353": {
                "x": {
                    "value": "lower[:, 0, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_355": {
                "x": {
                    "value": "-upper[:, 0, -1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/layers/entropy_models_gauss.py": {
        "tensorflow": {
            "InputSpec_168": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_258": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "ndim * [None]",
                            "BinOp"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputSpec_267": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "input_shape.ndims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: channels}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_301": {
                "variable": {
                    "value": "tail_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1 / (65536.0 * 100)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n, self.h, self.w, self.c, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_302": {
                "variable": {
                    "value": "median_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n, self.h, self.w, self.c, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_303": {
                "variable": {
                    "value": "head_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1 - 1 / (65536.0 * 100)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n, self.h, self.w, self.c, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_304": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n, self.h, self.w, self.c, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_305": {
                "variable": {
                    "value": "norm_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.0, dtype=self.dtype, shape=(self.n, self.h, self.w, self.c, 1))",
                            "Call"
                        ],
                        [
                            "constant_op.constant(0.0, dtype=self.dtype, shape=(self.n, self.h, self.w, self.c, 1))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_stddev",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_max_317": {
                "variable": {
                    "value": "minima",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._medians - tail_quantile",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_318": {
                "variable": {
                    "value": "maxima",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "head_quantile - self._medians",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_319": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minima",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_max(self._medians - tail_quantile)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxima",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_max(head_quantile - self._medians)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_320": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.maximum(minima, maxima)",
                            "Call"
                        ],
                        [
                            "math_ops.ceil(minmax)",
                            "Call"
                        ],
                        [
                            "math_ops.maximum(minmax, 1)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(minmax, 1000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_321": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.maximum(minima, maxima)",
                            "Call"
                        ],
                        [
                            "math_ops.ceil(minmax)",
                            "Call"
                        ],
                        [
                            "math_ops.maximum(minmax, 1)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(minmax, 1000.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_322": {
                "variable": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.maximum(minima, maxima)",
                            "Call"
                        ],
                        [
                            "math_ops.ceil(minmax)",
                            "Call"
                        ],
                        [
                            "math_ops.maximum(minmax, 1)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(minmax, 1000.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "range_325": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_328": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_336": {
                "variable": {
                    "value": "pmf",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[math_ops.add_n([pmf[:, :, :, :, :1], norm_dist.cdf(samples[:, :, :, :, :1] - half)]), pmf[:, :, :, :, 1:-1], math_ops.add_n([pmf[:, :, :, :, -1:], norm_dist.cdf(-(samples[:, :, :, :, -1:] + half))])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_345": {
                "variable": {
                    "value": "self._quantized_cdf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._quantized_cdf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_373": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_374": {
                "variable": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_376": {
                "variable": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_378": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_394": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n, self.h, self.w, self.c, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_395": {
                "variable": {
                    "value": "norm_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.0, dtype=self.dtype, shape=(self.n, self.h, self.w, self.c, 1))",
                            "Call"
                        ],
                        [
                            "constant_op.constant(0.0, dtype=self.dtype, shape=(self.n, self.h, self.w, self.c, 1))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_stddev",
                            "Name"
                        ]
                    ]
                }
            },
            "squeeze_407": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_408": {
                "variable": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(norm_dist.cdf(values + half) - norm_dist.cdf(values - half))",
                            "Call"
                        ],
                        [
                            "tfc_math_ops.lower_bound(likelihood, likelihood_bound)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(likelihood, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_580": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "ndim * [None]",
                            "BinOp"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_226": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.matmul(matrix, logits)",
                            "Call"
                        ],
                        [
                            "logits + factor * math_ops.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_313": {
                "variable": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_388": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[values, noise]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_398": {
                "variable": {
                    "value": "likelihood_bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.likelihood_bound",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_449": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_457": {
                "variable": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_458": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(inputs, axis=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_459": {
                "variable": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(input_stddev)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(input_stddev, axis=4)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_468": {
                "variable": {
                    "value": "half_num_levels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_levels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_471": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_478": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.5, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(0.5, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_479": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.cast(num_levels, self.dtype) - half",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_481": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_483": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_488": {
                "variable": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "loop_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_516": {
                "variable": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(strings)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_517": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_545": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "loop_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "strings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(strings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_547": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functional_ops.map_fn(loop_body, strings, dtype=dtypes.int16, back_prop=False)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(outputs, self.dtype)",
                            "Call"
                        ],
                        [
                            "outputs - offsets[slices[:-1]]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_549": {
                "variable": {
                    "value": "medians",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._medians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_575": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_577": {
                "name": {
                    "value": "pmf",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._pmf",
                            "Attribute"
                        ],
                        [
                            "image * (255 / math_ops.reduce_max(image, axis=1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(image + 0.5, dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "image[None, :, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_225": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._matrices[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_230": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._biases[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_392": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_448": {
                "name": {
                    "value": "self._name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "shape": {
                    "value": "inputs.shape[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_515": {
                "name": {
                    "value": "self._name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_572": {
                "name": {
                    "value": "self._name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_236": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._factors[i]",
                            "Subscript"
                        ],
                        [
                            "array_ops.stop_gradient(factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_337": {
                "inputs": {
                    "value": "[pmf[:, :, :, :, :1], norm_dist.cdf(samples[:, :, :, :, :1] - half)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_339": {
                "inputs": {
                    "value": "[pmf[:, :, :, :, -1:], norm_dist.cdf(-(samples[:, :, :, :, -1:] + half))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_387": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.add_n([values, noise])",
                            "Call"
                        ],
                        [
                            "math_ops.round(values - self._medians) + self._medians",
                            "BinOp"
                        ],
                        [
                            "math_ops.round(values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(values, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_550": {
                "x": {
                    "value": "num_levels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_574": {
                "input_tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._pmf",
                            "Attribute"
                        ],
                        [
                            "image * (255 / math_ops.reduce_max(image, axis=1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "math_ops.cast(image + 0.5, dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "image[None, :, :, None]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_237": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "math_ops.matmul(matrix, logits)",
                            "Call"
                        ],
                        [
                            "logits + factor * math_ops.tanh(logits)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_390": {
                "x": {
                    "value": "values - self._medians",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_467": {
                "input": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_480": {
                "x": {
                    "value": "num_levels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.shape(cdf)[-1] - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_540": {
                "input": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._quantized_cdf[slices[1:]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/layers/entropy_models_test.py": {
        "tensorflow": {
            "placeholder_36": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_52": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_69": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_91": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_114": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 3, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_235": {
                "variable": {
                    "value": "bitstrings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "quantized_cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "bitstrings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_253": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_278": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_291": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "input_tensor": {
                    "value": "tf.log(likelihood)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_297": {
                "input_tensor": {
                    "value": "tf.log(likelihood)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, None, None, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 3, None, None))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (2, 3, 10))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, None, None, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 3, None, None))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (2, 3, 10))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_136": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, None, None, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 3, None, None))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (2, 3, 10))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, None, None, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 3, None, None))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (2, 3, 10))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_176": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, None, None, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 3, None, None))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (2, 3, 10))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, None, None, 2))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 3, None, None))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (2, 3, 10))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 1))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (1, None, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_295": {
                "x": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_297": {
                "x": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/layers/gdn.py": {
        "tensorflow": {
            "InputSpec_119": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_130": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputSpec_136": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "input_shape.ndims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: num_channels}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "convert_to_tensor_151": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "math_ops.square(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_160": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(math_ops.square(inputs), self.gamma)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "nn.convolution(math_ops.square(inputs), gamma, 'VALID')",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "math_ops.tensordot(math_ops.square(inputs), self.gamma, [[self._channel_axis()], [0]])",
                            "Call"
                        ],
                        [
                            "norm_pool + self.beta",
                            "BinOp"
                        ],
                        [
                            "math_ops.sqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "math_ops.rsqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(norm_pool, axes)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(math_ops.square(inputs), self.gamma)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "nn.convolution(math_ops.square(inputs), gamma, 'VALID')",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "math_ops.tensordot(math_ops.square(inputs), self.gamma, [[self._channel_axis()], [0]])",
                            "Call"
                        ],
                        [
                            "norm_pool + self.beta",
                            "BinOp"
                        ],
                        [
                            "math_ops.sqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "math_ops.rsqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(norm_pool, axes)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_180": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(math_ops.square(inputs), self.gamma)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "nn.convolution(math_ops.square(inputs), gamma, 'VALID')",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "math_ops.tensordot(math_ops.square(inputs), self.gamma, [[self._channel_axis()], [0]])",
                            "Call"
                        ],
                        [
                            "norm_pool + self.beta",
                            "BinOp"
                        ],
                        [
                            "math_ops.sqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "math_ops.rsqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(norm_pool, axes)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_188": {
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ndim - 2) * [1] + shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convolution_164": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "math_ops.square(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(self.gamma, (ndim - 2) * [1] + shape)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_165": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(math_ops.square(inputs), self.gamma)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "nn.convolution(math_ops.square(inputs), gamma, 'VALID')",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "math_ops.tensordot(math_ops.square(inputs), self.gamma, [[self._channel_axis()], [0]])",
                            "Call"
                        ],
                        [
                            "norm_pool + self.beta",
                            "BinOp"
                        ],
                        [
                            "math_ops.sqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "math_ops.rsqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(norm_pool, axes)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_168": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "math_ops.square(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[self._channel_axis()], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "executing_eagerly_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ones_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_146": {
                "gain": {
                    "value": "self._gamma_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_159": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "norm_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(math_ops.square(inputs), self.gamma)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "nn.convolution(math_ops.square(inputs), gamma, 'VALID')",
                            "Call"
                        ],
                        [
                            "nn.bias_add(norm_pool, self.beta)",
                            "Call"
                        ],
                        [
                            "math_ops.tensordot(math_ops.square(inputs), self.gamma, [[self._channel_axis()], [0]])",
                            "Call"
                        ],
                        [
                            "norm_pool + self.beta",
                            "BinOp"
                        ],
                        [
                            "math_ops.sqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "math_ops.rsqrt(norm_pool)",
                            "Call"
                        ],
                        [
                            "array_ops.transpose(norm_pool, axes)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(ndim - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_164": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_169": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "nn.relu(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/layers/gdn_test.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "main_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/layers/initializers.py": {
        "tensorflow": {
            "constant_48": {
                "variable": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.gain]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scatter_nd_49": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[s // 2 for s in support]]",
                            "List"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.constant([self.gain], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple(shape[:-2]) + (1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_53": {
                "num_rows": {
                    "value": "shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/layers/parameterizers.py": {
        "tensorflow": {
            "constant_149": {
                "variable": {
                    "value": "pedestal",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.reparam_offset ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_150": {
                "variable": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(self.minimum + self.reparam_offset ** 2) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initializer(var_shape, dtype=var_dtype, partition_info=partition_info)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(init, (-1, rdft_shape[-1]))",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(irdft_matrix, init, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "initializer(shape, dtype=dtype, partition_info=partition_info)",
                            "Call"
                        ],
                        [
                            "math_ops.sqrt(init + pedestal)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, rdft_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "irdft_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spectral_ops.irdft_matrix(var_shape[:-2], dtype=var_dtype)",
                            "Call"
                        ],
                        [
                            "irdft_matrix[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initializer(var_shape, dtype=var_dtype, partition_info=partition_info)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(init, (-1, rdft_shape[-1]))",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(irdft_matrix, init, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "initializer(shape, dtype=dtype, partition_info=partition_info)",
                            "Call"
                        ],
                        [
                            "math_ops.sqrt(init + pedestal)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "irdft_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spectral_ops.irdft_matrix(var_shape[:-2], dtype=var_dtype)",
                            "Call"
                        ],
                        [
                            "irdft_matrix[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "rdft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getter(name=rdft_name, shape=rdft_shape, dtype=rdft_dtype, initializer=rdft_initializer, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(irdft_matrix, rdft)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(var, var_shape)",
                            "Call"
                        ],
                        [
                            "getter(name=reparam_name, shape=shape, dtype=dtype, initializer=reparam_initializer, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "cmath_ops.lower_bound(var, bound)",
                            "Call"
                        ],
                        [
                            "math_ops.square(var) - pedestal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "var_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape",
                            "Name"
                        ]
                    ]
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "init + pedestal",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_161": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(irdft_matrix, rdft)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(var, var_shape)",
                            "Call"
                        ],
                        [
                            "getter(name=reparam_name, shape=shape, dtype=dtype, initializer=reparam_initializer, regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "cmath_ops.lower_bound(var, bound)",
                            "Call"
                        ],
                        [
                            "math_ops.square(var) - pedestal",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/layers/parameterizers_test.py": {
        "tensorflow": {
            "main_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/layers/signal_conv.py": {
        "tensorflow": {
            "InputSpec_303": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "self._rank + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_392": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(inputs)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank(self._rank + 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputSpec_422": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "self._rank + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: input_channels}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "convert_to_tensor_428": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_429": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_626": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(inputs)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank(self._rank + 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "VarianceScaling_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_440": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "padding_ops.same_padding_for_kernel(self.kernel_support, self.corr, self.strides_up)",
                            "Call"
                        ],
                        [
                            "[[0, 0]] + list(padding) + [[0, 0]]",
                            "BinOp"
                        ],
                        [
                            "[[0, 0], [0, 0]] + list(padding)",
                            "BinOp"
                        ],
                        [
                            "'valid'",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "self._pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_native_482": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "array_ops.transpose(kernel, list(range(self._rank)) + [self._rank + 1, self._rank])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "self._pad_strides(self.strides_down)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.convert_data_format(self.data_format, self._rank + 2)",
                            "Call"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convolution_490": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "array_ops.transpose(kernel, list(range(self._rank)) + [self._rank + 1, self._rank])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "self.strides_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.convert_data_format(self.data_format, self._rank + 2)",
                            "Call"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_613": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_652": {
                "dims": {
                    "value": "[batch, channels] + spatial",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_654": {
                "dims": {
                    "value": "[batch] + spatial + [channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_513": {
                "variable": {
                    "value": "pad_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_602": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_603": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_604": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_509": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "array_ops.transpose(kernel, list(range(self._rank)) + [self._rank + 1, self._rank])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "list(range(self._rank)) + [self._rank + 1, self._rank]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_541": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.conv2d_transpose(array_ops.expand_dims(outputs, extradim), array_ops.expand_dims(kernel, 0), temp_shape[:extradim] + [1] + temp_shape[extradim:], strides=strides[:extradim] + (1,) + strides[extradim:], padding='VALID', data_format=data_format.replace('W', 'HW'))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[extradim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_606": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_608": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_609": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape[:3] + [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_610": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_611": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.shape(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_542": {
                "input": {
                    "value": "array_ops.expand_dims(outputs, extradim)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "array_ops.expand_dims(kernel, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "temp_shape[:extradim] + [1] + temp_shape[extradim:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides[:extradim] + (1,) + strides[extradim:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format.replace('W', 'HW')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_555": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "array_ops.transpose(kernel, list(range(self._rank)) + [self._rank + 1, self._rank])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "temp_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[pad_shape[0]] + (self._rank + 1) * [None]",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "self._pad_strides(self.strides_up)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.convert_data_format(self.data_format, self._rank + 2)",
                            "Call"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_543": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "extradim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'channels_first': 2, 'channels_last': 1}[self.data_format]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_544": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "array_ops.transpose(kernel, list(range(self._rank)) + [self._rank + 1, self._rank])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_transpose_560": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "array_ops.pad(outputs, padding, self._pad_mode)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d_native(outputs, kernel, strides=self._pad_strides(self.strides_down), padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.convolution(outputs, kernel, strides=self.strides_down, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(outputs, 2)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(outputs, [2])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape[:3] + [-1])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, shape)",
                            "Call"
                        ],
                        [
                            "temp[slices]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "kernel[slices]",
                            "Subscript"
                        ],
                        [
                            "array_ops.transpose(kernel, list(range(self._rank)) + [self._rank + 1, self._rank])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "temp_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[pad_shape[0]] + (self._rank + 1) * [None]",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "self._pad_strides(self.strides_up)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.convert_data_format(self.data_format, self._rank + 2)",
                            "Call"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/layers/signal_conv_test.py": {
        "tensorflow": {
            "main_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_93": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.moveaxis(inputs, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.numpy_upsample(inputs, strides_up, extra_pad_end)",
                            "Call"
                        ],
                        [
                            "np.random.randint(32, size=(batch, channels) + input_support)",
                            "Call"
                        ],
                        [
                            "inputs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(np.prod(input_shape))",
                            "Call"
                        ],
                        [
                            "inputs.reshape(input_shape).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_143": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.moveaxis(inputs, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.numpy_upsample(inputs, strides_up, extra_pad_end)",
                            "Call"
                        ],
                        [
                            "np.random.randint(32, size=(batch, channels) + input_support)",
                            "Call"
                        ],
                        [
                            "inputs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(np.prod(input_shape))",
                            "Call"
                        ],
                        [
                            "inputs.reshape(input_shape).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_232": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_100": {
                "value": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randint(16, size=kernel_support + (channels, filters))",
                            "Call"
                        ],
                        [
                            "kernel.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/ops/coder_ops.py": {
        "tensorflow": {}
    },
    "tensorflow_compression/python/ops/coder_ops_test.py": {
        "tensorflow": {
            "bincount_40": {
                "variable": {
                    "value": "histogram",
                    "type": "Variable",
                    "possible_values": []
                },
                "arr": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((128, 128), 0, 10, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, tf.int16)",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "maxlength": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_41": {
                "variable": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "histogram",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.bincount(data, minlength=10, maxlength=10)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_42": {
                "variable": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cumsum(histogram, exclusive=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(cdf, [[1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cdf, [1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cumsum(histogram, exclusive=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(cdf, [[1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cdf, [1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((128, 128), 0, 10, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, tf.int16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((128, 128), 0, 10, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(data, tf.int16)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/ops/math_ops.py": {
        "tensorflow": {
            "RegisterGradient_28": {
                "op_type": {
                    "value": "IdentityFirstOfTwoInputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_or_55": {
                "variable": {
                    "value": "pass_through_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs <= bound",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "grad > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "RegisterGradient_43": {
                "op_type": {
                    "value": "UpperBound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_or_71": {
                "variable": {
                    "value": "pass_through_if",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs >= bound",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "grad < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "RegisterGradient_59": {
                "op_type": {
                    "value": "LowerBound",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_120": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_121": {
                "variable": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bound",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_175": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_176": {
                "variable": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bound",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_119": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_174": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_56": {
                "x": {
                    "value": "pass_through_if",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(inputs <= bound, grad > 0)",
                            "Call"
                        ],
                        [
                            "math_ops.logical_or(inputs >= bound, grad < 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "pass_through_if",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(inputs <= bound, grad > 0)",
                            "Call"
                        ],
                        [
                            "math_ops.logical_or(inputs >= bound, grad < 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "grad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_127": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_182": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_graph_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "minimum_125": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_graph_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_180": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(bound, name='bound', dtype=inputs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/ops/math_ops_test.py": {
        "tensorflow": {
            "placeholder_31": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_33": {
                "variable": {
                    "value": "(pgrads,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[tf.ones_like(inputs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_34": {
                "variable": {
                    "value": "(ngrads,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[-tf.ones_like(inputs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "(pgrads,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[tf.ones_like(inputs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_72": {
                "variable": {
                    "value": "(ngrads,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "[outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[-tf.ones_like(inputs)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_33": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_72": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow_compression/python/ops/padding_ops_test.py": {
        "tensorflow": {
            "main_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convolution_38": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(inputs, (1, 1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "tf.reshape(kernel, (1, -1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_56": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(inputs, (1, 1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "tf.reshape(kernel, (1, -1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(1, 1, ishape[0] + kshape[0] - 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(ishape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros(ishape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(kshape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros(kshape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(ishape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros(ishape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(kshape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros(kshape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/ops/spectral_ops.py": {
        "tensorflow": {
            "as_dtype_63": {
                "variable": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_80": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_matrix_cache.get(key)",
                            "Call"
                        ],
                        [
                            "np.identity(size, dtype=np.float64).reshape((size,) + shape)",
                            "Call"
                        ],
                        [
                            "fftpack.rfft(matrix, axis=axis + 1)",
                            "Call"
                        ],
                        [
                            "matrix / np.sqrt(size)",
                            "BinOp"
                        ],
                        [
                            "np.reshape(matrix, (size, size))",
                            "Call"
                        ],
                        [
                            "array_ops.constant(matrix, dtype=dtype, name='irdft_' + 'x'.join([str(s) for s in shape]))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtypes.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'irdft_' + 'x'.join([str(s) for s in shape])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow_compression/python/ops/spectral_ops_test.py": {
        "tensorflow": {
            "main_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_36": {
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_56": {
                "a": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ],
                        [
                            "tfc.irdft_matrix(shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.images_pre_rec_multiframes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, *self.image_size, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "images_pre_rec_multiframes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_40": {
                "variable": {
                    "value": "(self.images_pre_rec_4, self.images_pre_rec_3, self.images_pre_rec_2, self.images_pre_rec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.images_pre_rec_multiframes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.images_cur_ori",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, *self.image_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "images_cur_ori",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.images_cur_ori_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, self.patch_height, self.patch_width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "images_cur_ori_patch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.images_pre_rec_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, self.patch_height, self.patch_width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": ".images_pre_rec_patch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.flow_ori_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, *self.image_size, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "flow_ori_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.flow_rec_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, *self.image_size, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "flow_rec_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.images_cur_pred_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, *self.image_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "images_cur_pred_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.flows_pre_rec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.args.batch_size, *self.image_size, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "flows_pre_rec",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_58": {
                "variable": {
                    "value": "(self.flow_3_pre_rec, self.flow_2_pre_rec, self.flow_1_pre_rec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.flows_pre_rec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(self.images_cur_ori * 255.0, self.images_cur_rec * 255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "memodel.vars + mamvpmodel.vars + mvdmodel.vars + mvlfmodel.vars + mcmodel.vars + resimodel.vars + resideblurmodel.vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_135": {
                "variable": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(self.images_cur_rec[i], 0, 1) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "PSNR",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.psnr(ori, rec, 255)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "MSSSIM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.ssim_multiscale(ori, rec, 255)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "Data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "self.images_cur_ori_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squared_difference_115": {
                "x": {
                    "value": "self.images_cur_ori * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.images_cur_rec * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "psnr_136": {
                "a": {
                    "value": "ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.images_cur_ori[i] * 255",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.round(tf.clip_by_value(self.images_cur_rec[i], 0, 1) * 255)",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ssim_multiscale_137": {
                "img1": {
                    "value": "ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.images_cur_ori[i] * 255",
                            "BinOp"
                        ]
                    ]
                },
                "img2": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.round(tf.clip_by_value(self.images_cur_rec[i], 0, 1) * 255)",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_140": {
                "name": {
                    "value": "'PSNR/' + componet[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "PSNR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.image.psnr(ori, rec, 255))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_62": {
                "a": {
                    "value": "self.images_pre_rec_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_135": {
                "t": {
                    "value": "self.images_cur_rec[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "log_132": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_133": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(10, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_21": {
                "variable": {
                    "value": "(_, h, w, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(flows)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_133": {
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "flows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_26": {
                "images": {
                    "value": "flows",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tf.floordiv(h, downscale), tf.floordiv(w, downscale))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floordiv_27": {
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "downscale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 ** (num_levels - 1 - l)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}