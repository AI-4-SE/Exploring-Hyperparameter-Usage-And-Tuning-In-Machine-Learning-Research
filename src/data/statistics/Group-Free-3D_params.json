{
    "eval_avg.py": {
        "torch": {
            "DataLoader_112": {
                "variable": {
                    "value": "TEST_DATALOADER",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=args.num_point, augment=False, use_color=True if args.use_color else False, use_height=True if args.use_height else False, use_v1=not args.use_sunrgbd_v2, data_root=args.data_root)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=args.num_point, augment=False, use_color=True if args.use_color else False, use_height=True if args.use_height else False, data_root=args.data_root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * torch.cuda.device_count()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "args.shuffle_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "load_149": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_330": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupFreeDetector(num_class=DATASET_CONFIG.num_class, num_heading_bin=DATASET_CONFIG.num_heading_bin, num_size_cluster=DATASET_CONFIG.num_size_cluster, mean_size_arr=DATASET_CONFIG.mean_size_arr, input_feature_dim=num_input_channel, width=args.width, num_proposal=args.num_target, sampling=args.sampling, dropout=args.transformer_dropout, activation=args.transformer_activation, nhead=args.nhead, num_decoder_layers=args.num_decoder_layers, dim_feedforward=args.dim_feedforward, self_position_embedding=args.self_position_embedding, cross_position_embedding=args.cross_position_embedding, size_cls_agnostic=True if args.size_cls_agnostic else False)",
                            "Call"
                        ],
                        [
                            "get_model(args, DATASET_CONFIG)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "end_points[f{prefix}center]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}center'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "end_points[f{prefix}heading_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}heading_scores'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "end_points[f{prefix}heading_residuals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}heading_residuals'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "end_points[f{prefix}sem_cls_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}sem_cls_scores'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "end_points[f{prefix}objectness_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}objectness_scores'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "end_points[f{prefix}pred_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}pred_size'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "end_points[f{prefix}size_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}size_scores'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "end_points[f{prefix}size_residuals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}size_residuals'] for ppx in last_three_prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "end_points[f{prefix}center]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}center'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "end_points[f{prefix}heading_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}heading_scores'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "end_points[f{prefix}heading_residuals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}heading_residuals'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "end_points[f{prefix}sem_cls_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}sem_cls_scores'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "end_points[f{prefix}objectness_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}objectness_scores'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "end_points[f{prefix}pred_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}pred_size'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "end_points[f{prefix}size_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}size_scores'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "end_points[f{prefix}size_residuals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[end_points[f'{ppx}size_residuals'] for ppx in _prefixes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ap_helper.py": {
        "torch": {
            "argmax_69": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points[f'{prefix}heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_70": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points[f'{prefix}heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "pred_sem_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points[f'{prefix}sem_cls_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_77": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points[f'{prefix}size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_78": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points[f'{prefix}size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbone_module.py": {
        "torch": {
            "rand_145": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/detector.py": {
        "torch": {
            "Conv1d_83": {
                "variable": {
                    "value": "self.decoder_key_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "variable": {
                    "value": "self.decoder_query_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "288",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.prediction_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.decoder_self_posembeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.decoder_cross_posembeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "points_obj_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points_obj_cls_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.points_obj_cls(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_172": {
                "variable": {
                    "value": "points_obj_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.decoder_self_posembeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "query_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_xyz, base_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_173": {
                "input": {
                    "value": "points_obj_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(points_obj_cls_logits).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.num_proposal",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/loss_helper.py": {
        "torch": {
            "gather_26": {
                "variable": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ],
                        [
                            "point_instance_label + padding_array",
                            "BinOp"
                        ],
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ],
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "object_assignment_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K, K2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "new_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_xyz ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_33": {
                "variable": {
                    "value": "euclidean_dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_dist + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_center.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seed_inds.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "batch_topk_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_inds, topk_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_46": {
                "variable": {
                    "value": "objectness_label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ],
                        [
                            "point_instance_label + padding_array",
                            "BinOp"
                        ],
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ],
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_69": {
                "variable": {
                    "value": "seed_instance_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ],
                        [
                            "point_instance_label + padding_array",
                            "BinOp"
                        ],
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ],
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_58": {
                "input": {
                    "value": "cls_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_weights.sum(dim=1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "cls_weights.sum(dim=1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_98": {
                "variable": {
                    "value": "seed_obj_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['point_obj_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ],
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_99": {
                "variable": {
                    "value": "query_points_obj_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seed_obj_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(end_points['point_obj_mask'], 1, seed_inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "query_points_sample_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['query_points_sample_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_102": {
                "variable": {
                    "value": "seed_instance_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ],
                        [
                            "point_instance_label + padding_array",
                            "BinOp"
                        ],
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ],
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_103": {
                "variable": {
                    "value": "query_points_instance_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seed_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(point_instance_label, 1, seed_inds)",
                            "Call"
                        ],
                        [
                            "torch.gather(point_instance_label, 1, seed_inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "query_points_sample_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['query_points_sample_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_105": {
                "variable": {
                    "value": "objectness_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_179": {
                "variable": {
                    "value": "heading_class_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_class_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(point_instance_label, 1, seed_inds)",
                            "Call"
                        ],
                        [
                            "query_points_instance_label",
                            "variable"
                        ],
                        [
                            "end_points[f'{prefix}object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_181": {
                "variable": {
                    "value": "criterion_heading_class",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_186": {
                "variable": {
                    "value": "heading_residual_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residual_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(point_instance_label, 1, seed_inds)",
                            "Call"
                        ],
                        [
                            "query_points_instance_label",
                            "variable"
                        ],
                        [
                            "end_points[f'{prefix}object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_271": {
                "variable": {
                    "value": "sem_cls_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['sem_cls_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(point_instance_label, 1, seed_inds)",
                            "Call"
                        ],
                        [
                            "query_points_instance_label",
                            "variable"
                        ],
                        [
                            "end_points[f'{prefix}object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_272": {
                "variable": {
                    "value": "criterion_sem_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "objectness_label.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_63": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_center.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seed_inds.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_125": {
                "input": {
                    "value": "cls_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_weights.sum(dim=1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "cls_weights.sum(dim=1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "assigned_gt_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['center_label'][:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "end_points['center_label'][:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "end_points['center_label'][:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "object_assignment.unsqueeze(2).repeat(1, 1, 3)",
                            "Call"
                        ],
                        [
                            "object_assignment.unsqueeze(2).repeat(1, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_214": {
                "variable": {
                    "value": "size_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_gts']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment.unsqueeze(-1).repeat(1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_230": {
                "variable": {
                    "value": "size_class_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_class_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(point_instance_label, 1, seed_inds)",
                            "Call"
                        ],
                        [
                            "query_points_instance_label",
                            "variable"
                        ],
                        [
                            "end_points[f'{prefix}object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_232": {
                "variable": {
                    "value": "criterion_size_class",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_237": {
                "variable": {
                    "value": "size_residual_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residual_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment.unsqueeze(-1).repeat(1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "predicted_size_residual_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points[f'{prefix}size_residuals_normalized'] * size_label_one_hot_tiled",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "mean_size_arr_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_249": {
                "variable": {
                    "value": "mean_size_arr_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_251": {
                "variable": {
                    "value": "mean_size_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "size_label_one_hot_tiled * mean_size_arr_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "query_points_obj_gt.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_172": {
                "variable": {
                    "value": "assigned_gt_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['center_label'][:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "end_points['center_label'][:, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "end_points['center_label'][:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "object_assignment.unsqueeze(2).repeat(1, 1, 3)",
                            "Call"
                        ],
                        [
                            "object_assignment.unsqueeze(2).repeat(1, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_184": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_195": {
                "input": {
                    "value": "end_points[f'{prefix}heading_residuals_normalized'] * heading_label_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_274": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_36": {
                "input": {
                    "value": "euclidean_dist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(new_dist + 1e-06)",
                            "Call"
                        ],
                        [
                            "euclidean_dist1 * object_assignment_one_hot + 100 * (1 - object_assignment_one_hot)",
                            "BinOp"
                        ],
                        [
                            "euclidean_dist1.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk",
                            "Method Argument"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_68": {
                "input": {
                    "value": "point_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ],
                        [
                            "point_instance_label + padding_array",
                            "BinOp"
                        ],
                        [
                            "end_points['point_instance_label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unique_71": {
                "input": {
                    "value": "pos_points_instance_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed_instance_label * objectness_label + (objectness_label - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_118": {
                "input": {
                    "value": "objectness_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_202": {
                "input": {
                    "value": "heading_residual_normalized_loss * objectness_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_174": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_203": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_206": {
                "input": {
                    "value": "heading_residual_normalized_loss * objectness_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_221": {
                "input": {
                    "value": "size_loss * objectness_label.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_259": {
                "input": {
                    "value": "size_residual_normalized_loss * objectness_label.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_207": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_222": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_225": {
                "input": {
                    "value": "size_loss * objectness_label.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_261": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_264": {
                "input": {
                    "value": "size_residual_normalized_loss * objectness_label.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_266": {
                "input": {
                    "value": "objectness_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K + 1), dtype=torch.long).to(seed_xyz.device)",
                            "Call"
                        ],
                        [
                            "objectness_label[:, :K]",
                            "Subscript"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ],
                        [
                            "end_points[f'{prefix}objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/losses.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "error",
                            "Method Argument"
                        ],
                        [
                            "error",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_12": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_17": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "error",
                            "Method Argument"
                        ],
                        [
                            "error",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "pred_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log1p_53": {
                "input": {
                    "value": "torch.exp(-torch.abs(input))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_72": {
                "input": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target * (1.0 - pred_sigmoid) + (1.0 - target) * pred_sigmoid",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_53": {
                "input": {
                    "value": "-torch.abs(input)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "Conv1d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(seed_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.position_embedding_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(input_channel, num_pos_feats, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_118": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_119": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_120": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_121": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_123": {
                "variable": {
                    "value": "self.objectness_scores_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_124": {
                "variable": {
                    "value": "self.center_residual_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_125": {
                "variable": {
                    "value": "self.heading_class_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heading_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ],
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_126": {
                "variable": {
                    "value": "self.heading_residual_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heading_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ],
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_127": {
                "variable": {
                    "value": "self.size_class_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_size_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_size_cluster",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_128": {
                "variable": {
                    "value": "self.size_residual_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_size_cluster * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_129": {
                "variable": {
                    "value": "self.sem_cls_scores_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "mean_size_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_163": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "size_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.size_class_head(net).transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_165": {
                "variable": {
                    "value": "pred_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "size_recover",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_residuals + mean_size_arr",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(size_scores, -1)",
                            "Call"
                        ],
                        [
                            "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_208": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_209": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_210": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_211": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_213": {
                "variable": {
                    "value": "self.objectness_scores_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_214": {
                "variable": {
                    "value": "self.center_residual_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_215": {
                "variable": {
                    "value": "self.heading_class_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heading_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ],
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_216": {
                "variable": {
                    "value": "self.heading_residual_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_heading_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ],
                        [
                            "num_heading_bin",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_217": {
                "variable": {
                    "value": "self.size_pred_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_218": {
                "variable": {
                    "value": "self.sem_cls_scores_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "seed_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_230": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_231": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_55": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "288",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "num_features": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "288",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_58": {
                "in_channels": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "288",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "288",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/multi_head_attention.py": {
        "torch": {
            "equal_221": {
                "variable": {
                    "value": "kv_same",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_370": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "F.linear(query, q_proj_weight_non_opt, in_proj_bias[0:embed_dim])",
                            "Call"
                        ],
                        [
                            "F.linear(query, q_proj_weight_non_opt, in_proj_bias)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_387": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_p",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_389": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "F.linear(value, v_proj_weight_non_opt, in_proj_bias[embed_dim * 2:])",
                            "Call"
                        ],
                        [
                            "F.linear(value, v_proj_weight_non_opt, in_proj_bias)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "F.linear(key, _w, _b).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.linear(value, _w, _b)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "static_v",
                            "variable"
                        ],
                        [
                            "torch.cat([v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_392": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn_output_weights, v)",
                            "Call"
                        ],
                        [
                            "attn_output.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)",
                            "Call"
                        ],
                        [
                            "F.linear(attn_output, out_proj_weight, out_proj_bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "out_proj_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_proj_weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_proj_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_proj_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_358": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, torch.zeros((k.size(0), 1) + k.size()[2:], dtype=k.dtype, device=k.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_220": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_235": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "in_proj_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "chunk_235": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_304": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "q_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(q_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias[0:embed_dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_305": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "k_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(k_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias[embed_dim:embed_dim * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_306": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(v_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias[embed_dim * 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_308": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "q_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(q_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_309": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "k_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(k_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_310": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_proj_weight_non_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.jit._unwrap_optional(v_proj_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "in_proj_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_315": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros((attn_mask.size(0), 1), dtype=attn_mask.dtype, device=attn_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros((key_padding_mask.size(0), 1), dtype=key_padding_mask.dtype, device=key_padding_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_54": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_246": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_271": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_280": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_289": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_318": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros((attn_mask.size(0), 1), dtype=attn_mask.dtype, device=attn_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros((key_padding_mask.size(0), 1), dtype=key_padding_mask.dtype, device=key_padding_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_62": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_68": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.size()",
                            "Call"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_261": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ],
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ],
                        [
                            "in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "in_proj_bias",
                            "variable"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "*size": {
                    "value": "(k.size(0), 1) + k.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "k.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "*size": {
                    "value": "(v.size(0), 1) + v.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "(attn_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "attn_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "*size": {
                    "value": "(key_padding_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "*size": {
                    "value": "(attn_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "attn_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "(key_padding_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/transformer.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_21": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_22": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_23": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2/pointnet2_modules.py": {
        "torch": {
            "ModuleList_111": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_294": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_439": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_501": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_502": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_255": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_346": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_396": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_482": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_496": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_496": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_503": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_504": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_259": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_features, features2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_265": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * grouped_xyz.pow(2).sum(1, keepdim=False) / self.sigma ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "new_features * rbf.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pointnet2_test.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[0, 1, 2], [1, 2, 3]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[1, 1, 1], [2, 2, 2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_30": {
                "func": {
                    "value": "interpolate_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_func",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, feat_dim, m, requires_grad=True).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pointnet2_utils.py": {
        "torch": {
            "zeros_337": {
                "variable": {
                    "value": "unique_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(idx.shape[0], idx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ext.three_nn(unknown, known)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_340": {
                "variable": {
                    "value": "unique_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx[i_batch, i_region, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_343": {
                "variable": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_unique",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unique_ind.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.nsample - num_unique,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "all_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unique_ind, unique_ind[sample_ind])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/pytorch_utils.py": {
        "torch": {
            "Linear_240": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/setup.py": {
        "torch": {}
    },
    "scannet/scannet_detection_dataset.py": {
        "torch": {}
    },
    "sunrgbd/sunrgbd_detection_dataset.py": {
        "torch": {}
    },
    "train_dist.py": {
        "torch": {
            "load_110": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedSampler_192": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('train', num_points=args.num_point, augment=True, use_color=True if args.use_color else False, use_height=True if args.use_height else False, use_v1=not args.use_sunrgbd_v2, data_root=args.data_root)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('train', num_points=args.num_point, augment=True, use_color=True if args.use_color else False, use_height=True if args.use_height else False, data_root=args.data_root)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('train', num_points=args.num_point, augment=True, use_color=True if args.use_color else False, use_height=True if args.use_height else False, use_v1=not args.use_sunrgbd_v2, data_root=args.data_root)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('train', num_points=args.num_point, augment=True, use_color=True if args.use_color else False, use_height=True if args.use_height else False, data_root=args.data_root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(TRAIN_DATASET)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_202": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=args.num_point, augment=False, use_color=True if args.use_color else False, use_height=True if args.use_height else False, use_v1=not args.use_sunrgbd_v2, data_root=args.data_root)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=args.num_point, augment=False, use_color=True if args.use_color else False, use_height=True if args.use_height else False, data_root=args.data_root)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=args.num_point, augment=False, use_color=True if args.use_color else False, use_height=True if args.use_height else False, use_v1=not args.use_sunrgbd_v2, data_root=args.data_root)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=args.num_point, augment=False, use_color=True if args.use_color else False, use_height=True if args.use_height else False, data_root=args.data_root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(TEST_DATASET, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_271": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupFreeDetector(num_class=DATASET_CONFIG.num_class, num_heading_bin=DATASET_CONFIG.num_heading_bin, num_size_cluster=DATASET_CONFIG.num_size_cluster, mean_size_arr=DATASET_CONFIG.mean_size_arr, input_feature_dim=num_input_channel, width=args.width, bn_momentum=args.bn_momentum, sync_bn=True if args.syncbn else False, num_proposal=args.num_target, sampling=args.sampling, dropout=args.transformer_dropout, activation=args.transformer_activation, nhead=args.nhead, num_decoder_layers=args.num_decoder_layers, dim_feedforward=args.dim_feedforward, self_position_embedding=args.self_position_embedding, cross_position_embedding=args.cross_position_embedding, size_cls_agnostic=True if args.size_cls_agnostic else False)",
                            "Call"
                        ],
                        [
                            "get_model(args, DATASET_CONFIG)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[args.local_rank], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_263": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_dicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if 'decoder' not in n and p.requires_grad]}, {'params': [p for (n, p) in model.named_parameters() if 'decoder' in n and p.requires_grad], 'lr': args.decoder_learning_rate}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_475": {
                "device": {
                    "value": "opt.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config': args, 'save_path': '', 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.log_dir, f'ckpt_epoch_{epoch}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__341": {
                "variable": {
                    "value": "grad_total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config': args, 'save_path': '', 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.log_dir, f'ckpt_epoch_{epoch}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/lr_scheduler.py": {
        "torch": {
            "CosineAnnealingLR_67": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "T_max": {
                    "value": "(args.max_epoch - args.warmup_epoch) * n_iter_per_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_74": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[(m - args.warmup_epoch) * n_iter_per_epoch for m in args.lr_decay_epochs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metric_util.py": {
        "torch": {
            "is_tensor_42": {
                "obj": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((labels.shape[0], labels.shape[1]))",
                            "Call"
                        ],
                        [
                            "label_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_43": {
                "obj": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((pred.shape[0], pred.shape[1]))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/nn_distance.py": {
        "torch": {
            "abs_27": {
                "variable": {
                    "value": "abs_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.abs(pc1arr[0, i, :] - pc2arr[0, j, :])",
                            "Call"
                        ],
                        [
                            "error",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_60": {
                "variable": {
                    "value": "(dist1, idx1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_61": {
                "variable": {
                    "value": "(dist2, idx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "pc1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc1arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "pc2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc2arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "huber_loss(pc_diff, delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pc_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "pc_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_57": {
                "input": {
                    "value": "pc_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc1_expand_tile - pc2_expand_tile",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/pc_util.py": {
        "torch": {}
    }
}