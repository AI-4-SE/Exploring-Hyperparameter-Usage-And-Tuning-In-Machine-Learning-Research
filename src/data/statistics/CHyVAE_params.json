{
    "code/models.py": {
        "tensorflow": {
            "ConfigProto_30": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_32": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_33": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, self.z_dim, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mu, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.imsize, self.imsize, self.channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.Psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.z_dim, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.nu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mvn.sample(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "self.loglikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=self.x, logits=x_hat_logits), [1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_88": {
                "variable": {
                    "value": "self.optim_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.x_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.imsize, self.imsize, self.channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "self.x_recons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._decoder(z_test, reuse=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "self.fake_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._decoder(self.noise, reuse=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_43": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_fc_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.layers.dense(z, self.z_dim * self.z_dim, activation=None)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.z_dim, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "L_LT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_band_part(A, -1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(L, diag)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_band_part(A, -1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(L, diag)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_fc_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4 * 4 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4, 4, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_58": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_59": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_60": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_61": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.x, logits=x_hat_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "input_tensor": {
                    "value": "self._regularizer(z2, self.mu, Sigma, self.Psi, self.nu, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_45": {
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, self.n_fc_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 4 * 4 * 64, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, [-1, 4, 4, 64])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 64, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(z, 32, 4, 2, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.z_dim * self.z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "softplus_47": {
                "features": {
                    "value": "tf.matrix_diag_part(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "a": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, self.z_dim, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mu, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, self.z_dim, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mu, -1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trace_71": {
                "*args": {
                    "value": "tf.matmul(sigma_mumuT_psi, tf.matrix_inverse(psi_zzT))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_84": {
                "labels": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_hat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_50": {
                "num_rows": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logdet_69": {
                "matrix": {
                    "value": "psi_zzT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Psi + tf.matmul(z, z, transpose_b=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logdet_70": {
                "matrix": {
                    "value": "Sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L_LT + 0.0001 * tf.eye(self.z_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_71": {
                "a": {
                    "value": "sigma_mumuT_psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sigma + tf.matmul(mu, mu, transpose_b=True) + Psi",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.matrix_inverse(psi_zzT)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "tensorflow": {
            "expand_dims_90": {
                "variable": {
                    "value": "a_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_92": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diff_np[None, None, :].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "variable": {
                    "value": "a_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_99": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "diff_np[None, None, :].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "tf.digamma(a_reshaped + diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "digamma_93": {
                "x": {
                    "value": "a_reshaped + diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.lgamma(a_reshaped + diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_100": {
                "x": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_100": {
                "x": {
                    "value": "a_reshaped + diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}