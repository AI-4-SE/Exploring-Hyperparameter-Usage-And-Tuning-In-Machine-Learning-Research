{
    "experiments/abc/run.py": {
        "sklearn": {
            "MinMaxScaler_68": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/creditfraud/run.py": {
        "sklearn": {
            "MinMaxScaler_91": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/examiner/run.py": {
        "sklearn": {
            "MinMaxScaler_67": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/fact-highlevel/init.py": {
        "sklearn": {}
    },
    "experiments/fact-highlevel/run.py": {
        "sklearn": {
            "MinMaxScaler_85": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/fact-lowlevel/run.py": {
        "sklearn": {
            "MinMaxScaler_84": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/forestcover/run.py": {
        "sklearn": {
            "MinMaxScaler_86": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/stream51/run.py": {
        "sklearn": {
            "MinMaxScaler_62": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/stream51/init.py": {
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "dataset": {
                    "value": "x",
                    "possible_values": [
                        [
                            "StreamDataset(root='data', train=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "model.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}