{
    "networks/equilibrium_u_net.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, out_chans, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_chans, out_chans, kernel_size=2, stride=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.down_sample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(in_chans, chans, drop_prob)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.up_transpose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_186": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output, -1, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_166": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output, -1, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, downsample_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_34": {
                "p": {
                    "value": "drop_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_37": {
                "p": {
                    "value": "drop_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_77": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "*args": {
                    "value": "ConvBlock(ch * 2, ch, drop_prob)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output, -1, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "chans",
                            "Name"
                        ],
                        [
                            "ch // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "networks/normalized_equilibrium_u_net.py": {
        "torch": {
            "Sequential_39": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.down_sample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(in_chans, chans, drop_prob)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.up_transpose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_151": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, downsample_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_167": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_68": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "chans",
                            "Name"
                        ],
                        [
                            "ch // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_186": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "init_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_interm_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "conv_layer0",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_interm_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_interm_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "variable": {
                    "value": "act0",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "conv_layer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_interm_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_interm_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "variable": {
                    "value": "act1",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "conv_layer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_interm_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "onc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "variable": {
                    "value": "act2",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "patch_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input - patch_means",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, nc, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_58": {
                "input": {
                    "value": "input + self.model(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "networks/twolayer_linear_net.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, bottleneck_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.network(torch.flatten(input, start_dim=1))",
                            "Call"
                        ],
                        [
                            "torch.reshape(output, shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "bottleneck_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "bottleneck_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_35": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "networks/u_net.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, out_chans, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_chans, out_chans, kernel_size=2, stride=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.down_sample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(in_chans, chans, drop_prob)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.up_transpose_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_172": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output, -1, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_152": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output, -1, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, downsample_layer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_33": {
                "num_features": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_35": {
                "p": {
                    "value": "drop_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_37": {
                "num_features": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_38": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_39": {
                "p": {
                    "value": "drop_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_71": {
                "num_features": {
                    "value": "out_chans",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "ConvBlock(ch * 2, ch, drop_prob)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_168": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, kernel_size=2, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "transpose_conv(output)",
                            "Call"
                        ],
                        [
                            "torch.clamp(output, -1, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(output, padding, 'reflect')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, downsample_layer], dim=1)",
                            "Call"
                        ],
                        [
                            "conv(output)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "chans",
                            "Name"
                        ],
                        [
                            "ch // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 0, 0, 0]",
                            "List"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_187": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "operators/blurs.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.gaussian_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.create_gaussian_kernel(sigma, kernel_size, n_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "meshgrid_24": {
                "variable": {
                    "value": "meshgrids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(size, dtype=torch.float32) for size in kernel_size]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.create_motionblur_kernel(angle, kernel_size, n_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "kernel * torch.exp(-((mgrid - mean) / sigma) ** 2 / 2)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(n_channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(kernel, cv2.getRotationMatrix2D((kernel_size / 2 - 0.5, kernel_size / 2 - 0.5), angle, 1.0), (kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(n_channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "variable": {
                    "value": "convolution_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.gaussian_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.gaussian_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "convolution_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.blur_kernel",
                            "Attribute"
                        ],
                        [
                            "torch.transpose(self.blur_kernel, dim0=2, dim1=3)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "convolution_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.blur_kernel",
                            "Attribute"
                        ],
                        [
                            "torch.transpose(self.blur_kernel, dim0=2, dim1=3)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_27": {
                "input": {
                    "value": "-((mgrid - mean) / sigma) ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "kernel * torch.exp(-((mgrid - mean) / sigma) ** 2 / 2)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(n_channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(kernel, cv2.getRotationMatrix2D((kernel_size / 2 - 0.5, kernel_size / 2 - 0.5), angle, 1.0), (kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(n_channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_63": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "kernel * torch.exp(-((mgrid - mean) / sigma) ** 2 / 2)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(n_channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ],
                        [
                            "np.zeros((kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(kernel, cv2.getRotationMatrix2D((kernel_size / 2 - 0.5, kernel_size / 2 - 0.5), angle, 1.0), (kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(n_channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_24": {
                "start": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "operators/operator.py": {
        "torch": {
            "randn_like_32": {
                "input": {
                    "value": "A_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.internal_operator(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "operators/singlecoil_mri.py": {
        "torch": {
            "zeros_like_54": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "center_crop(x, (smallest_height, smallest_width))",
                            "Call"
                        ],
                        [
                            "roll(x, s, d)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_85": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_95": {
                "variable": {
                    "value": "learnable_parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_100": {
                "variable": {
                    "value": "masked_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learnable_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_103": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "masked_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "torch.arange(0, N, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_149": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_392": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask_func(shape, seed)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "exhaustive_sample(center_fraction, acceleration, num_cols, seed)",
                            "Call"
                        ],
                        [
                            "mask.reshape(*mask_shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mask, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "self.masks[self.ii]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "(re, im)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "(x[..., 0], -x[..., 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_188": {
                "input": {
                    "value": "(data ** 2).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "input": {
                    "value": "complex_abs_sq(data).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_302": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "view_as_complex_452": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_453": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_454": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_complex_463": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_464": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_465": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_471": {
                "variable": {
                    "value": "kspace_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fft2(ifftshift(input))",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_472": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fft2(ifftshift(input))",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_473": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.ifftn(kspace_data, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_479": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ifftn_480": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_481": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_483": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.ifftn(kspace_data, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_86": {
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "-2.0 * np.pi * 1j * ii * jj / N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fftn_114": {
                "variable": {
                    "value": "data[:, ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_117": {
                "variable": {
                    "value": "data[ii, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_127": {
                "variable": {
                    "value": "data[:, ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_130": {
                "variable": {
                    "value": "data[ii, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_150": {
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_459": {
                "input": {
                    "value": "kspace_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fft2(ifftshift(input))",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_87": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_151": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_115": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_118": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_128": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_131": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_ssim/__init__.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_18": {
                "variable": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "mu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/denoising/gaussian_dncnn_norm_denoise.py": {
        "torch": {
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CelebaTrainingDatasetSubset(data_location, subset_indices=initial_indices, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CelebaTestDataset(data_location, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_112": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_129": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DnCNN(in_channels=in_channels, out_channels=out_channels, internal_channels=64, num_of_layers=17, lip=1.0)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_118": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_120": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_properties_58": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/denoising/gaussian_unet_denoise.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CelebaTrainingDatasetSubset(data_location, subset_indices=initial_indices, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CelebaTestDataset(data_location, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_127": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UnetModel(in_chans=n_channels, out_chans=n_channels, num_pool_layers=4, drop_prob=0.0, chans=32)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_properties_56": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/denoising/mri_dncnn_denoise.py": {
        "torch": {
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "singleCoilFastMRIDataloader(data_location, data_indices=train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_123": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DnCNN(in_channels=n_channels, out_channels=n_channels, internal_channels=64, num_of_layers=17, lip=1.0)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_114": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_properties_64": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/denoising/mri_unet_denoise.py": {
        "torch": {
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "singleCoilFastMRIDataloader(data_location, data_indices=train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_111": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UnetModel(in_chans=n_channels, out_chans=n_channels, num_pool_layers=4, drop_prob=0.0, chans=32)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_64": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/fixedpoint/deblur_proxgrad_fixedeta_pre.py": {
        "torch": {
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CelebaTrainingDatasetSubset(data_location, subset_indices=initial_indices, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CelebaTestDataset(data_location, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_138": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_155": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_133": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "EquilibriumProxGrad(linear_operator=internal_forward_operator, nonlinear_operator=learned_component, eta=initial_eta, minval=-1, maxval=1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/share/data/willett-group/users/gilton/denoisers/celeba_denoiser_normunet_3.ckpt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_123": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/share/data/willett-group/users/gilton/denoisers/celeba_denoiser_normunet_3.ckpt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_146": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_properties_66": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/fixedpoint/mri_grad_fixedeta_pre_and4.py": {
        "torch": {
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "singleCoilFastMRIDataloader(data_location, data_indices=train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_128": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_145": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "EquilibriumGrad(linear_operator=internal_forward_operator, nonlinear_operator=learned_component, eta=initial_eta, minval=-1, maxval=1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/share/data/willett-group/users/gilton/denoisers/mri_denoiser_unetnorm_4.ckpt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_115": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/share/data/willett-group/users/gilton/denoisers/mri_denoiser_unetnorm_4.ckpt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_136": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_properties_70": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/fixedpoint/mri_prox_fixedeta_pre_and.py": {
        "torch": {
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "singleCoilFastMRIDataloader(data_location, data_indices=train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_128": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(params=solver.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "int(args.sched_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "float(args.lr_gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_145": {
                "variable": {
                    "value": "lossfunction",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "solver",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "solver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "EquilibriumProxGradMRI(linear_operator=internal_forward_operator, nonlinear_operator=learned_component, eta=initial_eta, minval=-1, maxval=1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(solver, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "solver.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(x) for x in gpu_ids]",
                            "ListComp"
                        ],
                        [
                            "[ii]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/share/data/willett-group/users/gilton/denoisers/mri_denoiser_unetnorm_4.ckpt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_115": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/share/data/willett-group/users/gilton/denoisers/mri_denoiser_unetnorm_4.ckpt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_136": {
                "variable": {
                    "value": "saved_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.savepath",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_properties_70": {
                "device": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "solvers/broyd_equilibrium_utils.py": {
        "torch": {
            "einsum_102": {
                "variable": {
                    "value": "xTU",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij, bijd -> bd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_113": {
                "variable": {
                    "value": "VTx",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bdij, bij -> bd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "part_VTs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "Us",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "total_hsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "LBFGS_thres",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(threshold, 27)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "VTs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "LBFGS_thres",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(threshold, 27)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "total_hsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "n_elem",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_133": {
                "variable": {
                    "value": "new_objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g(x_est)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_14": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_147": {
                "variable": {
                    "value": "new_objective",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g(x_est)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_197": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "reshaped_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "y_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "reshaped_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(z, x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_256": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "reshaped_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "y_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "reshaped_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(z, x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_312": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_363": {
                "variable": {
                    "value": "reshaped_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "y_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "variable": {
                    "value": "reshaped_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(z, x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_366": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_407": {
                "variable": {
                    "value": "reshaped_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "y_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_408": {
                "variable": {
                    "value": "reshaped_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(output_x, x)",
                            "Call"
                        ],
                        [
                            "self.f(z, x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_410": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ],
                        [
                            "self.f(reshaped_z, reshaped_x) - reshaped_z",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(output.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_410": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_point",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "initial_point",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "initial_point",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "initial_point",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "initial_point",
                            "Name"
                        ],
                        [
                            "torch.reshape(init_point, (init_point.shape[0], -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(init_point.shape[0], -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_425": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.reshape(output_x, initial_point_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "initial_point_shape",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "initial_point.shape",
                            "Attribute"
                        ],
                        [
                            "initial_point.shape",
                            "Attribute"
                        ],
                        [
                            "initial_point.shape",
                            "Attribute"
                        ],
                        [
                            "initial_point.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isfinite_12": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_67": {
                "input": {
                    "value": "update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gx",
                            "Name"
                        ],
                        [
                            "-matvec(Us[:, :, :, :nstep], VTs[:, :nstep], gx)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "einsum_103": {
                "equation": {
                    "value": "bd, bdij -> bij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "xTU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('bij, bijd -> bd', x, part_Us)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_114": {
                "equation": {
                    "value": "bijd, bd -> bij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "part_Us",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_181": {
                "input": {
                    "value": "lowest_gx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_269": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_320": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_375": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_416": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "norm_66": {
                "input": {
                    "value": "g0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "input": {
                    "value": "torch.abs(b ** 2 - 3 * a * derphi0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_150": {
                "input": {
                    "value": "x_est - delta_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_172": {
                "equation": {
                    "value": "bij, bij -> b",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rmatvec(part_Us, part_VTs, delta_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_450": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_40": {
                "input": {
                    "value": "b ** 2 - 3 * a * derphi0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_152": {
                "input": {
                    "value": "x_est - delta_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_290": {
                "outputs": {
                    "value": "f0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.reshape(grad.shape)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_458": {
                "outputs": {
                    "value": "f0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.reshape(grad.shape)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_392": {
                "outputs": {
                    "value": "f0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.reshape(grad.shape)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "solvers/cg_utils.py": {
        "torch": {
            "zeros_like_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_point",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_point",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_6": {
                "tensors": {
                    "value": "(x[:, 0, ...], -x[:, 1, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "solvers/equilibrium_nets.py": {
        "torch": {
            "clamp_37": {
                "variable": {
                    "value": "z_tplus1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tplus1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z - self.eta * self.get_gradient(z, y)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "data": {
                    "value": "torch.tensor(eta_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "data": {
                    "value": "torch.tensor(lambda_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "eta_initial_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "data": {
                    "value": "lambda_initial_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "solvers/equilibrium_solvers.py": {
        "torch": {
            "clamp_43": {
                "variable": {
                    "value": "z_tplus1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tplus1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "z - self.eta * self.get_gradient(z, y)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "(z + 2 * (self.nonlinear_op(net_input) + net_input) - net_input) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "z_tplus1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tplus1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "z - self.eta * self.get_gradient(z, y)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "(z + 2 * (self.nonlinear_op(net_input) + net_input) - net_input) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "z_tplus1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tplus1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "z - self.eta * self.get_gradient(z, y)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "(z + 2 * (self.nonlinear_op(net_input) + net_input) - net_input) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_162": {
                "variable": {
                    "value": "z_tplus1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tplus1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "z - self.eta * self.get_gradient(z, y)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "gradstep + self.nonlinear_op(gradstep)",
                            "BinOp"
                        ],
                        [
                            "(z + 2 * (self.nonlinear_op(net_input) + net_input) - net_input) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(z_tplus1, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_214": {
                "variable": {
                    "value": "z_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_266": {
                "variable": {
                    "value": "z_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_318": {
                "variable": {
                    "value": "z_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_370": {
                "variable": {
                    "value": "z_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ],
                        [
                            "torch.clamp(z_new, self.minval, self.maxval)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "data": {
                    "value": "torch.tensor(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "data": {
                    "value": "torch.tensor(eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "eta",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "data": {
                    "value": "eta",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "solvers/gradnet.py": {
        "torch": {
            "Parameter_21": {
                "data": {
                    "value": "torch.tensor(eta_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "data": {
                    "value": "torch.tensor(lambda_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "eta_initial_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "data": {
                    "value": "lambda_initial_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "solvers/new_equilibrium_utils.py": {
        "torch": {
            "zeros_like_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_point",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_point",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_12": {
                "tensors": {
                    "value": "(x[:, 0, ...], -x[:, 1, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_80": {
                "outputs": {
                    "value": "g",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "regATA(x, ATA) - b",
                            "BinOp"
                        ],
                        [
                            "-d",
                            "UnaryOp"
                        ],
                        [
                            "f_function(input_z) - input_z",
                            "BinOp"
                        ],
                        [
                            "neumann_iteration(lambda y: torch.autograd.grad(f0, z0, y, retain_graph=True)[0], grad, self.neumann_k)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f(z, x)",
                            "Call"
                        ],
                        [
                            "self.f(z, x)",
                            "Call"
                        ],
                        [
                            "self.f(z, x)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + alpha * d",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_274": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + alpha * d",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "init_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + alpha * d",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "bmm_138": {
                "input": {
                    "value": "G",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F[:, :n] - X[:, :n]",
                            "BinOp"
                        ],
                        [
                            "F[:, :n] - X[:, :n]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "G.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_172": {
                "input": {
                    "value": "G",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "F[:, :n] - X[:, :n]",
                            "BinOp"
                        ],
                        [
                            "F[:, :n] - X[:, :n]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "G.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_94": {
                "outputs": {
                    "value": "g",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "regATA(x, ATA) - b",
                            "BinOp"
                        ],
                        [
                            "-d",
                            "UnaryOp"
                        ],
                        [
                            "f_function(input_z) - input_z",
                            "BinOp"
                        ],
                        [
                            "neumann_iteration(lambda y: torch.autograd.grad(f0, z0, y, retain_graph=True)[0], grad, self.neumann_k)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initial_guess",
                            "Name"
                        ],
                        [
                            "x_k + alpha * p_k",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_140": {
                "input": {
                    "value": "y[:, :n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "H[:, :n + 1, :n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "solve_174": {
                "input": {
                    "value": "y[:, :n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "H[:, :n + 1, :n + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + alpha * d",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(initial_point)",
                            "Call"
                        ],
                        [
                            "x0",
                            "Name"
                        ],
                        [
                            "x_new",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ],
                        [
                            "f0",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_138": {
                "n": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(k, m)",
                            "Call"
                        ],
                        [
                            "min(k, m)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_172": {
                "n": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(k, m)",
                            "Call"
                        ],
                        [
                            "min(k, m)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_341": {
                "outputs": {
                    "value": "f0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(bsz, m + 1, 1, dtype=x0.dtype, device=x0.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bsz, m + 1, 1, dtype=x0.dtype, device=x0.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_257": {
                "outputs": {
                    "value": "f0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(bsz, m + 1, 1, dtype=x0.dtype, device=x0.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bsz, m + 1, 1, dtype=x0.dtype, device=x0.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_287": {
                "outputs": {
                    "value": "f0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "f(x0)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ],
                        [
                            "self.f(z0, x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "z.clone().detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(bsz, m + 1, 1, dtype=x0.dtype, device=x0.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(bsz, m + 1, 1, dtype=x0.dtype, device=x0.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "solvers/proxgrad.py": {
        "torch": {
            "ModuleList_89": {
                "variable": {
                    "value": "self.nonlinear_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "nonlinear_operators",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "data": {
                    "value": "torch.tensor(eta_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "data": {
                    "value": "torch.tensor(eta_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "data": {
                    "value": "torch.tensor(lambda_initial_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "eta_initial_val",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "eta_initial_val",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "data": {
                    "value": "lambda_initial_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "training/denoiser_training.py": {
        "torch": {
            "save_58": {
                "obj": {
                    "value": "{'solver_state_dict': denoising_net.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "{'solver_state_dict': denoising_net.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_18": {
                "obj": {
                    "value": "{'solver_state_dict': denoising_net.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_24": {
                "obj": {
                    "value": "{'solver_state_dict': denoising_net.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/equilibrium_training.py": {
        "torch": {
            "clamp_50": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_277": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_177": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_205": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_36": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "backward_72": {
                "tensors": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "delf_deltheta_invJ",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.conjugate_gradient_equilibriumgrad(b=dell_delz, input_z=reconstruction, f_function=single_iterate_solver, n_iterations=5)",
                            "Call"
                        ],
                        [
                            "eq_utils.conjugate_gradient_equilibriumgrad(b=dell_delz, input_z=reconstruction, f_function=single_iterate_solver, n_iterations=10)",
                            "Call"
                        ]
                    ]
                }
            },
            "backward_226": {
                "tensors": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "-delf_deltheta_invJ",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__228": {
                "parameters": {
                    "value": "single_iterate_solver.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_63": {
                "inputs": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_168": {
                "outputs": {
                    "value": "f(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z.detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.detach().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_211": {
                "inputs": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ],
                        [
                            "eq_utils.get_equilibrium_point(y, single_iterate_solver, max_iterations=n_iterations[epoch])",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_212": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ],
                        [
                            "loss_function(reconstruction, sample_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/new_equilibrium_training.py": {
        "torch": {
            "save_50": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_56": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_19": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_25": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_77": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "training/refactor_equilibrium_training.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "save_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "save_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_54": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_298": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_304": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_17": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_23": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch + 1, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch + 1, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.module.state_dict(), 'epoch': epoch + 1, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "{'solver_state_dict': single_iterate_solver.state_dict(), 'epoch': epoch + 1, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "training/standard_training.py": {
        "torch": {
            "MSELoss_57": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_129": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_64": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_136": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "variable": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=n_blocks)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ],
                        [
                            "solver(initial_point, iterations=6)",
                            "Call"
                        ],
                        [
                            "torch.clamp(reconstruction, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_17": {
                "obj": {
                    "value": "{'solver_state_dict': solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_23": {
                "obj": {
                    "value": "{'solver_state_dict': solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'solver_state_dict': solver.module.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "{'solver_state_dict': solver.state_dict(), 'epoch': epoch, 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_location",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/bsd500.py": {
        "torch": {
            "cat_79": {
                "tensors": {
                    "value": "(x, torch.zeros_like(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/celeba_dataloader.py": {
        "torch": {}
    },
    "utils/cg_utils.py": {
        "torch": {
            "zeros_like_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_point",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_point",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_6": {
                "tensors": {
                    "value": "(x[:, 0, ...], -x[:, 1, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/fastmri_dataloader.py": {
        "torch": {
            "from_numpy_27": {
                "ndarray": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "h5py.File(self.data_directory + filename, 'r')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/forward_models_mri.py": {
        "torch": {
            "zeros_like_53": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "center_crop(x, (smallest_height, smallest_width))",
                            "Call"
                        ],
                        [
                            "roll(x, s, d)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_84": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_94": {
                "variable": {
                    "value": "learnable_parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_99": {
                "variable": {
                    "value": "masked_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learnable_parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_102": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "masked_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(all_frequencies, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(all_frequencies, mask_vec)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "torch.arange(0, N, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_148": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_392": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask_func(shape, seed)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "exhaustive_sample(center_fraction, acceleration, num_cols, seed)",
                            "Call"
                        ],
                        [
                            "mask.reshape(*mask_shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mask, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "self.masks[self.ii]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_413": {
                "variable": {
                    "value": "learnable_parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_419": {
                "variable": {
                    "value": "masked_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learnable_parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_426": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "masked_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(all_frequencies, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(all_frequencies, mask_vec)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "torch.arange(0, N, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "(re, im)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "(x[..., 0], -x[..., 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_188": {
                "input": {
                    "value": "(data ** 2).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "input": {
                    "value": "complex_abs_sq(data).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_302": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_421": {
                "seed": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_435": {
                "variable": {
                    "value": "all_frequencies",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_440": {
                "variable": {
                    "value": "masked_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_frequencies",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_453": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_457": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(kspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_459": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(kspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_467": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_472": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kspace @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_479": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ifftn_480": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_483": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kspace @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_491": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.freqs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, N, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_500": {
                "variable": {
                    "value": "all_frequencies",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_505": {
                "variable": {
                    "value": "masked_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_frequencies",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, N, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ],
                        [
                            "fftshift(mask[0, :], dim=0)",
                            "Call"
                        ],
                        [
                            "mask_vec > 0",
                            "Compare"
                        ],
                        [
                            "mask_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_506": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask_func(shape, seed)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "exhaustive_sample(center_fraction, acceleration, num_cols, seed)",
                            "Call"
                        ],
                        [
                            "mask.reshape(*mask_shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mask, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "self.masks[self.ii]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 320)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "view_as_complex_524": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_528": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_529": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(kspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_complex_538": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_542": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_543": {
                "variable": {
                    "value": "kspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(kspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.transpose(self.dft_mat, 0, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(kspace, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fftshift(kspace)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_562": {
                "variable": {
                    "value": "kspace_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fft2(ifftshift(input))",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * mask + 0.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_563": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fft2(ifftshift(input))",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * mask + 0.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_564": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kspace @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_584": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "ifftshift(input.permute((0, 2, 3, 1)))",
                            "Call"
                        ],
                        [
                            "input.permute((0, 2, 3, 1)) * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "input.permute((0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ifftn_585": {
                "variable": {
                    "value": "complex_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_586": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(input)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=1, norm='ortho')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_588": {
                "variable": {
                    "value": "realspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "realspace",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kspace @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "complex_input @ torch.conj(self.dft_mat)",
                            "BinOp"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(complex_input, dim=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(realspace)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_596": {
                "variable": {
                    "value": "(ii, jj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.freqs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, N, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftn_85": {
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_102": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_104": {
                "input": {
                    "value": "-2.0 * np.pi * 1j * ii * jj / N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fftn_113": {
                "variable": {
                    "value": "data[:, ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fftn_116": {
                "variable": {
                    "value": "data[ii, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_126": {
                "variable": {
                    "value": "data[:, ii, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_129": {
                "variable": {
                    "value": "data[ii, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ifftn_149": {
                "input": {
                    "value": "torch.view_as_complex(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_426": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_428": {
                "input": {
                    "value": "-2.0 * np.pi * 1j * ii * jj / N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "view_as_real_534": {
                "input": {
                    "value": "kspace_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fft2(ifftshift(input))",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "kspace * self.mask + 0.0",
                            "BinOp"
                        ],
                        [
                            "ifftshift(kspace_data)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifftn(kspace_data, dim=1, norm='ortho')",
                            "Call"
                        ],
                        [
                            "fft2(ifftshift(input.permute((0, 2, 3, 1))))",
                            "Call"
                        ],
                        [
                            "kspace_data * mask + 0.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "view_as_complex_86": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_150": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_442": {
                "seed": {
                    "value": "110",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_455": {
                "input": {
                    "value": "self.dft_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_469": {
                "input": {
                    "value": "self.dft_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conj_470": {
                "input": {
                    "value": "self.dft_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conj_482": {
                "input": {
                    "value": "self.dft_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_491": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_493": {
                "input": {
                    "value": "-2.0 * np.pi * 1j * ii * jj / N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_596": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_598": {
                "input": {
                    "value": "-2.0 * np.pi * 1j * ii * jj / N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "view_as_complex_114": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_117": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_127": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_130": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack((data.real, data.imag), axis=-1)",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.fftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "ifftshift(data, dim=[-3, -2])",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(torch.fft.ifftn(torch.view_as_complex(data), dim=(-2, -1), norm='ortho'))",
                            "Call"
                        ],
                        [
                            "fftshift(data, dim=[-3, -2])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_423": {
                "input": {
                    "value": "masked_params[1 + final_center:-final_center]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "data": {
                    "value": "masked_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(learnable_parameters, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(all_frequencies, mask_vec)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(all_frequencies, mask_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_449": {
                "data": {
                    "value": "self.dft_matrix_perturbed(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_like_444": {
                "input": {
                    "value": "masked_params[1 + final_center:-final_center]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/spectral_norm.py": {
        "torch": {
            "sqrt_15": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(tensor * tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * conv2d(v, weight_mat, padding=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_209": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(tensor * tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "tensor * tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_219": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_254": {
                "variable": {
                    "value": "cur_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * conv2d(v, weight_mat, padding=padding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_256": {
                "variable": {
                    "value": "cur_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * conv_transpose2d(self.pad(v), weight_mat, padding=padding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_379": {
                "variable": {
                    "value": "cur_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(weight / torch.sqrt(running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "tensor * tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_266": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_395": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_396": {
                "data": {
                    "value": "bias.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=2), eps=self.eps).flip(2, 3)[:, :, 1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.normalize(conv_transpose2d(self.pad(u.flip(2, 3)), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_379": {
                "input": {
                    "value": "weight / torch.sqrt(running_var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=2), eps=self.eps).flip(2, 3)[:, :, 1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.normalize(conv_transpose2d(self.pad(u.flip(2, 3)), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_254": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=2), eps=self.eps).flip(2, 3)[:, :, 1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.normalize(conv_transpose2d(self.pad(u.flip(2, 3)), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv_transpose2d_256": {
                "input": {
                    "value": "self.pad(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv2d_241": {
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=2), eps=self.eps).flip(2, 3)[:, :, 1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.normalize(conv_transpose2d(self.pad(u.flip(2, 3)), weight_mat.permute(1, 0, 2, 3), padding=padding), eps=self.eps).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv_transpose2d_246": {
                "input": {
                    "value": "self.pad(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_379": {
                "input": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, 'running_var')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_57": {
                "input": {
                    "value": "u.flip(2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mat.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "input": {
                    "value": "u.flip(2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mat.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "conv_transpose2d_243": {
                "input": {
                    "value": "self.pad(u.flip(2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mat.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[0, 1, 0, 1]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "utils/spectral_norm_chen.py": {
        "torch": {
            "sum_64": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * conv2d(v, weight_mat, padding=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "input": {
                    "value": "torch.sum(tensor * tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_10": {
                "input": {
                    "value": "tensor * tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=2), eps=self.eps).flip(2, 3)[:, :, 1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "normalize(conv2d(u.flip(2, 3), weight_mat.permute(1, 0, 2, 3), padding=2), eps=self.eps).flip(2, 3)[:, :, 1:-1, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_53": {
                "input": {
                    "value": "u.flip(2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_mat.permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/testing_utils.py": {
        "torch": {
            "norm_41": {
                "variable": {
                    "value": "tensor_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(tensor_batch, dim=1)",
                            "Call"
                        ],
                        [
                            "rescale_to_01(tensor_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_36": {
                "variable": {
                    "value": "flattened_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[bb, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_37": {
                "variable": {
                    "value": "img_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.flatten(input[bb, ...], start_dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_38": {
                "variable": {
                    "value": "img_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_img - img_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}