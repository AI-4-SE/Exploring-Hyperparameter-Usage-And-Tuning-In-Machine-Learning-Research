{
    "Hatespeech/process_text_data.py": {
        "sklearn": {
            "StandardScaler_168": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "NLLLoss_187": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "copy.deepcopy(data['Y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_190": {
                "variable": {
                    "value": "hprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(copy.deepcopy(data['c']['0.0'])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(human_prob, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log2(torch.from_numpy(copy.deepcopy(data['c']['0.0'])).float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "val_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "copy.deepcopy(data['val']['Y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_195": {
                "variable": {
                    "value": "val_hprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(copy.deepcopy(data['val']['c']['0.0'])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_197": {
                "variable": {
                    "value": "(val_human_prob, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "val_hprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log2(torch.from_numpy(copy.deepcopy(data['val']['c']['0.0'])).float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "test_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "copy.deepcopy(data['test']['Y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_201": {
                "variable": {
                    "value": "test_hprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(copy.deepcopy(data['test']['c']['0.0'])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_203": {
                "variable": {
                    "value": "(test_human_prob, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "test_hprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log2(torch.from_numpy(copy.deepcopy(data['test']['c']['0.0'])).float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "copy.deepcopy(data['c']['0.0'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "ndarray": {
                    "value": "copy.deepcopy(data['val']['c']['0.0'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "ndarray": {
                    "value": "copy.deepcopy(data['test']['c']['0.0'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Galaxy-zoo/prepare_data.py": {
        "torch": {
            "NLLLoss_136": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_138": {
                "variable": {
                    "value": "hscores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(copy.deepcopy(data['c']['0.0'])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_141": {
                "variable": {
                    "value": "(hconf, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.from_numpy(copy.deepcopy(data['c']['0.0'])).float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_143": {
                "variable": {
                    "value": "val_hscores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(copy.deepcopy(data['val']['c']['0.0'])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "(val_hconf, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "val_hscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.from_numpy(copy.deepcopy(data['val']['c']['0.0'])).float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_148": {
                "variable": {
                    "value": "test_hscores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(copy.deepcopy(data['test']['c']['0.0'])).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "(test_hconf, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "test_hscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.from_numpy(copy.deepcopy(data['test']['c']['0.0'])).float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "copy.deepcopy(data['c']['0.0'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "data['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "copy.deepcopy(data['val']['c']['0.0'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "data['val']['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "copy.deepcopy(data['test']['c']['0.0'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "data['test']['Y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Synthetic/generate_synthetic.py": {
        "torch": {
            "unsqueeze_30": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linspace(start, end, num_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "MSELoss_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_110": {
                "variable": {
                    "value": "data[clusters][id][hnoise]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "float((int(1) + 1) * noise[id])",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "(x_train.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_112": {
                "variable": {
                    "value": "data[clusters][id][test][hnoise]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "float((int(1) + 1) * noise[id])",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "(x_test.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_27": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_X(-3, 3, num_clusters * num_samples_per_cluster, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_30": {
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_24": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_38": {
                "input": {
                    "value": "torch.tensor([5.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_X(-3, 3, num_clusters * num_samples_per_cluster, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_111": {
                "input": {
                    "value": "data['clusters'][id]['hnoise']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_20": {
                "input": {
                    "value": "-((coef * (x - xoffset) - mu) * (coef * (x - xoffset) - mu)) / float(2 * std * std)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "[5.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}