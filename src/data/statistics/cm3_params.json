{
    "alg/alg_baseline.py": {
        "tensorflow": {
            "placeholder_95": {
                "variable": {
                    "value": "self.v_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.v_state_one_agent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_one_agent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.v_state_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_other_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_other_agents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.v_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.v_goal_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, (self.n_agents - 1) * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.v_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.action_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents - 1, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.v_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_obs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_119": {
                "variable": {
                    "value": "self.action_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(self.probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_125": {
                "variable": {
                    "value": "self.action_samples_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log((1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_191": {
                "variable": {
                    "value": "list_P_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_193": {
                "variable": {
                    "value": "list_P_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "self.V_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_262": {
                "variable": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.V_td_target - tf.squeeze(self.V))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_264": {
                "variable": {
                    "value": "self.V_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_269": {
                "variable": {
                    "value": "self.Q_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "self.actions_self_1hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_self_1hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_272": {
                "variable": {
                    "value": "self.Q_action_taken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q, self.actions_self_1hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_273": {
                "variable": {
                    "value": "self.loss_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.Q_td_target - self.Q_action_taken)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_274": {
                "variable": {
                    "value": "self.Q_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_taken",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_282": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_314": {
                "variable": {
                    "value": "self.policy_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_353": {
                "variable": {
                    "value": "self.summary_op_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('policy_loss', self.policy_loss)]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.h_obs, self.w_obs, self.c_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_173": {
                "variable": {
                    "value": "list_V_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_175": {
                "variable": {
                    "value": "list_V_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_208": {
                "variable": {
                    "value": "list_Q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_210": {
                "variable": {
                    "value": "list_Q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_287": {
                "variable": {
                    "value": "self.Q_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_288": {
                "variable": {
                    "value": "self.COMA_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q_evaluated, self.action_taken)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_290": {
                "variable": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_291": {
                "variable": {
                    "value": "self.COMA_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q_evaluated, self.probs_evaluated)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_292": {
                "variable": {
                    "value": "self.COMA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.COMA_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.COMA_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_297": {
                "variable": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_299": {
                "variable": {
                    "value": "sum_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(log_probs, [-1, self.n_agents])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "variable": {
                    "value": "sum_td_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.V_td_error, [-1, self.n_agents])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_328": {
                "variable": {
                    "value": "self.summary_op_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_V', self.loss_V)]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_339": {
                "variable": {
                    "value": "self.summary_op_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_Q', self.loss_Q)]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_others]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "Policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_125": {
                "x": {
                    "value": "(1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_262": {
                "x": {
                    "value": "self.V_td_target - tf.squeeze(self.V)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_272": {
                "x": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.actions_self_1hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_273": {
                "x": {
                    "value": "self.Q_td_target - self.Q_action_taken",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_303": {
                "variable": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_341": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "Q_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "Q_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_282": {
                "input_tensor": {
                    "value": "tf.multiply(self.probs, self.action_taken)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_288": {
                "x": {
                    "value": "self.Q_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_291": {
                "x": {
                    "value": "self.Q_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_293": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.reshape(tf.multiply(log_probs, self.COMA), [-1, self.n_agents]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "tensor": {
                    "value": "self.V_td_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_301": {
                "input_tensor": {
                    "value": "tf.multiply(sum_log_probs, sum_td_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_320": {
                "name": {
                    "value": "loss_V",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_331": {
                "name": {
                    "value": "loss_Q",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_343": {
                "name": {
                    "value": "policy_loss_local",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss_local",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_345": {
                "name": {
                    "value": "policy_loss_global",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss_global",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_346": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_348": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_main_variables",
                            "variable"
                        ],
                        [
                            "Q_main_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_262": {
                "input": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_282": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "input_tensor": {
                    "value": "tf.reshape(tf.multiply(log_probs, self.COMA), [-1, self.n_agents])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_301": {
                "x": {
                    "value": "sum_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(log_probs, [-1, self.n_agents]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_td_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(self.V_td_error, [-1, self.n_agents]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_305": {
                "input_tensor": {
                    "value": "tf.multiply(log_probs, self.V_td_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_321": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_323": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_main_variables",
                            "variable"
                        ],
                        [
                            "Q_main_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "get_collection_332": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_334": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_main_variables",
                            "variable"
                        ],
                        [
                            "Q_main_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_352": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "tensor": {
                    "value": "tf.multiply(log_probs, self.COMA)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_305": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.V_td_error",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_327": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_338": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_293": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.COMA",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alg/alg_baseline_checkers.py": {
        "tensorflow": {
            "placeholder_87": {
                "variable": {
                    "value": "self.state_env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.rows_state, self.columns_state, self.channels_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "state_env",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.v_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.v_state_one_agent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_one_agent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.v_state_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_other_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_other_agents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.v_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.v_goal_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, (self.n_agents - 1) * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.v_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.action_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents - 1, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_110": {
                "variable": {
                    "value": "self.action_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(self.probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_114": {
                "variable": {
                    "value": "self.action_samples_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log((1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_166": {
                "variable": {
                    "value": "list_P_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_168": {
                "variable": {
                    "value": "list_P_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "self.V_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_245": {
                "variable": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.V_td_target - tf.squeeze(self.V))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_247": {
                "variable": {
                    "value": "self.V_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "self.Q_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_253": {
                "variable": {
                    "value": "self.actions_self_1hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_self_1hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "variable": {
                    "value": "self.Q_action_taken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q, self.actions_self_1hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_256": {
                "variable": {
                    "value": "self.loss_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.Q_td_target - self.Q_action_taken)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_257": {
                "variable": {
                    "value": "self.Q_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_taken",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_265": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_297": {
                "variable": {
                    "value": "self.policy_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_336": {
                "variable": {
                    "value": "self.summary_op_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('policy_loss', self.policy_loss)]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.obs_self_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.rows_obs, self.columns_obs, self.channels_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_self_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.obs_self_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_self]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_self_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_others]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.actions_prev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_prev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_148": {
                "variable": {
                    "value": "list_V_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_150": {
                "variable": {
                    "value": "list_V_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_184": {
                "variable": {
                    "value": "list_Q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_186": {
                "variable": {
                    "value": "list_Q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "self.Q_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "variable": {
                    "value": "self.COMA_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q_evaluated, self.action_taken)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_273": {
                "variable": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "variable": {
                    "value": "self.COMA_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q_evaluated, self.probs_evaluated)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_275": {
                "variable": {
                    "value": "self.COMA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.COMA_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.COMA_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_282": {
                "variable": {
                    "value": "sum_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(log_probs, [-1, self.n_agents])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_283": {
                "variable": {
                    "value": "sum_td_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(self.V_td_error, [-1, self.n_agents])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_311": {
                "variable": {
                    "value": "self.summary_op_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_V', self.loss_V)]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_322": {
                "variable": {
                    "value": "self.summary_op_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_Q', self.loss_Q)]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_110": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_114": {
                "x": {
                    "value": "(1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_245": {
                "x": {
                    "value": "self.V_td_target - tf.squeeze(self.V)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_255": {
                "x": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.actions_self_1hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_256": {
                "x": {
                    "value": "self.Q_td_target - self.Q_action_taken",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_324": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "Q_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "Q_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_265": {
                "input_tensor": {
                    "value": "tf.multiply(self.probs, self.action_taken)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_271": {
                "x": {
                    "value": "self.Q_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_274": {
                "x": {
                    "value": "self.Q_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_276": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.reshape(tf.multiply(log_probs, self.COMA), [-1, self.n_agents]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "tensor": {
                    "value": "self.V_td_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_284": {
                "input_tensor": {
                    "value": "tf.multiply(sum_log_probs, sum_td_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_303": {
                "name": {
                    "value": "loss_V",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_314": {
                "name": {
                    "value": "loss_Q",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_326": {
                "name": {
                    "value": "policy_loss_local",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss_local",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_328": {
                "name": {
                    "value": "policy_loss_global",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss_global",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_329": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_331": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_main_variables",
                            "variable"
                        ],
                        [
                            "Q_main_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_245": {
                "input": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_265": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "input_tensor": {
                    "value": "tf.reshape(tf.multiply(log_probs, self.COMA), [-1, self.n_agents])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_284": {
                "x": {
                    "value": "sum_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(log_probs, [-1, self.n_agents]), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_td_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(self.V_td_error, [-1, self.n_agents]), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_288": {
                "input_tensor": {
                    "value": "tf.multiply(log_probs, self.V_td_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_304": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_306": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_main_variables",
                            "variable"
                        ],
                        [
                            "Q_main_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "get_collection_315": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_317": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_main_variables",
                            "variable"
                        ],
                        [
                            "Q_main_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_335": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "tf.multiply(log_probs, self.COMA)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_288": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.V_td_error",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_310": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_321": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_276": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.COMA",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alg/alg_credit.py": {
        "tensorflow": {
            "placeholder_96": {
                "variable": {
                    "value": "self.v_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.v_state_one_agent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_one_agent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.v_state_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.v_state_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_other_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_other_agents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.v_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.v_goal_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, (self.n_agents - 1) * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.v_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.action_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents - 1, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.action_one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_one",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self.v_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_obs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_122": {
                "variable": {
                    "value": "self.action_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(self.probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_128": {
                "variable": {
                    "value": "self.action_samples_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log((1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_169": {
                "variable": {
                    "value": "list_Q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_171": {
                "variable": {
                    "value": "list_Q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_183": {
                "variable": {
                    "value": "list_P_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_185": {
                "variable": {
                    "value": "list_P_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_234": {
                "variable": {
                    "value": "list_Q_global",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_236": {
                "variable": {
                    "value": "list_Q_credit",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_292": {
                "variable": {
                    "value": "self.Q_credit_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_credit_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "self.loss_Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.Q_credit_td_target - tf.squeeze(self.Q_credit))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_295": {
                "variable": {
                    "value": "self.Q_credit_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "self.Q_global_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_global_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_303": {
                "variable": {
                    "value": "self.loss_Q_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.Q_global_td_target - tf.squeeze(self.Q_global))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_304": {
                "variable": {
                    "value": "self.Q_global_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_309": {
                "variable": {
                    "value": "self.V_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "variable": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.V_td_target - tf.squeeze(self.V))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_311": {
                "variable": {
                    "value": "self.V_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_317": {
                "variable": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_taken",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_319": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_322": {
                "variable": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_actual",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_329": {
                "variable": {
                    "value": "self.Q_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_cf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_332": {
                "variable": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_359": {
                "variable": {
                    "value": "self.policy_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_365": {
                "variable": {
                    "value": "Q_global_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_372": {
                "variable": {
                    "value": "self.summary_op_Q_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_Q_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_Q_global', self.loss_Q_global)]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_396": {
                "variable": {
                    "value": "policy_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_403": {
                "variable": {
                    "value": "self.summary_op_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('policy_loss', self.policy_loss)]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.h_obs, self.w_obs, self.c_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_198": {
                "variable": {
                    "value": "list_Qc_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_200": {
                "variable": {
                    "value": "list_Qc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_212": {
                "variable": {
                    "value": "list_V_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_214": {
                "variable": {
                    "value": "list_V_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_335": {
                "variable": {
                    "value": "advantage2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q_cf, self.probs_evaluated)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_336": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(self.Q_actual)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "advantage2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(self.Q_cf, self.probs_evaluated), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_355": {
                "variable": {
                    "value": "log_probs_shaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_356": {
                "variable": {
                    "value": "m_terms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_shaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(log_probs, [-1, self.n_agents])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(advantages, axis=1), [-1, self.n_agents])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(advantages, axis=1), [-1, self.n_agents])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(self.Q_actual, axis=1), [-1, self.n_agents])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_376": {
                "variable": {
                    "value": "Q_credit_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_383": {
                "variable": {
                    "value": "self.summary_op_Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_Q_credit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_Q_credit', self.loss_Q_credit)]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_others]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_122": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_128": {
                "x": {
                    "value": "(1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "Q_global_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_294": {
                "x": {
                    "value": "self.Q_credit_td_target - tf.squeeze(self.Q_credit)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_303": {
                "x": {
                    "value": "self.Q_global_td_target - tf.squeeze(self.Q_global)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_310": {
                "x": {
                    "value": "self.V_td_target - tf.squeeze(self.V)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_341": {
                "variable": {
                    "value": "pi_mult_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.Q_cf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "counterfactuals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(pi_mult_Q, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_345": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "counterfactuals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(pi_mult_Q, axis=1), [-1, self.n_agents])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_347": {
                "variable": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(advantages, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_364": {
                "name": {
                    "value": "loss_Q_global",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_Q_global",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_386": {
                "variable": {
                    "value": "V_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_393": {
                "variable": {
                    "value": "self.summary_op_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_V', self.loss_V)]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_395": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Q_credit_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_319": {
                "input_tensor": {
                    "value": "tf.multiply(self.probs, self.action_taken)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_335": {
                "x": {
                    "value": "self.Q_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_336": {
                "input": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_337": {
                "input_tensor": {
                    "value": "tf.multiply(log_probs, advantage)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "variable": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_350": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(advantages, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_353": {
                "variable": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(self.Q_actual, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_357": {
                "input_tensor": {
                    "value": "tf.reduce_sum(m_terms, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_367": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "scalar_375": {
                "name": {
                    "value": "loss_Q_credit",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_398": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_294": {
                "input": {
                    "value": "self.Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_303": {
                "input": {
                    "value": "self.Q_global",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_310": {
                "input": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_319": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_337": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.squeeze(self.Q_actual), advantage2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_343": {
                "input_tensor": {
                    "value": "pi_mult_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.probs_evaluated, self.Q_cf)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_347": {
                "input_tensor": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(self.Q_actual, counterfactuals)",
                            "Call"
                        ],
                        [
                            "tf.subtract(self.Q_actual, self.V_evaluated)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_357": {
                "input_tensor": {
                    "value": "m_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(log_probs_shaped, sum_n_A)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_371": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_378": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "scalar_385": {
                "name": {
                    "value": "loss_V",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_402": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_351": {
                "input_tensor": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(self.Q_actual, counterfactuals)",
                            "Call"
                        ],
                        [
                            "tf.subtract(self.Q_actual, self.V_evaluated)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "input_tensor": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_382": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_388": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_392": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "alg/alg_credit_checkers.py": {
        "tensorflow": {
            "placeholder_89": {
                "variable": {
                    "value": "self.state_env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.rows_state, self.columns_state, self.channels_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "state_env",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.v_state_one_agent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_one_agent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.v_state_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.v_state_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_other_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_other_agents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.v_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.v_goal_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, (self.n_agents - 1) * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.v_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.action_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents - 1, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.action_one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_one",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_113": {
                "variable": {
                    "value": "self.action_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(self.probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_117": {
                "variable": {
                    "value": "self.action_samples_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log((1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_150": {
                "variable": {
                    "value": "list_Q_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_152": {
                "variable": {
                    "value": "list_Q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_164": {
                "variable": {
                    "value": "list_P_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_166": {
                "variable": {
                    "value": "list_P_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_215": {
                "variable": {
                    "value": "list_Q_global",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_217": {
                "variable": {
                    "value": "list_Q_credit",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_265": {
                "variable": {
                    "value": "self.Q_credit_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_credit_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_267": {
                "variable": {
                    "value": "self.loss_Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.Q_credit_td_target - tf.squeeze(self.Q_credit))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_268": {
                "variable": {
                    "value": "self.Q_credit_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_273": {
                "variable": {
                    "value": "self.Q_global_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_global_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "self.loss_Q_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.Q_global_td_target - tf.squeeze(self.Q_global))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_276": {
                "variable": {
                    "value": "self.Q_global_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "self.V_td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_281": {
                "variable": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.V_td_target - tf.squeeze(self.V))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_282": {
                "variable": {
                    "value": "self.V_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_288": {
                "variable": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_taken",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_290": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_293": {
                "variable": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_actual",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_299": {
                "variable": {
                    "value": "self.Q_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_cf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_302": {
                "variable": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_329": {
                "variable": {
                    "value": "self.policy_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_actor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_335": {
                "variable": {
                    "value": "Q_global_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_342": {
                "variable": {
                    "value": "self.summary_op_Q_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_Q_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_Q_global', self.loss_Q_global)]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_366": {
                "variable": {
                    "value": "policy_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_373": {
                "variable": {
                    "value": "self.summary_op_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('policy_loss', self.policy_loss)]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.obs_self_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.rows_obs, self.columns_obs, self.channels_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_self_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.obs_self_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_self]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_self_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_others]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.actions_prev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_prev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_179": {
                "variable": {
                    "value": "list_Qc_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_181": {
                "variable": {
                    "value": "list_Qc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_193": {
                "variable": {
                    "value": "list_V_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_195": {
                "variable": {
                    "value": "list_V_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_305": {
                "variable": {
                    "value": "advantage2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.Q_cf, self.probs_evaluated)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_306": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(self.Q_actual)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "advantage2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(self.Q_cf, self.probs_evaluated), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "log_probs_shaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_326": {
                "variable": {
                    "value": "m_terms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_probs_shaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(log_probs, [-1, self.n_agents])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(advantages, axis=1), [-1, self.n_agents])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(advantages, axis=1), [-1, self.n_agents])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reduce_sum(self.Q_actual, axis=1), [-1, self.n_agents])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_346": {
                "variable": {
                    "value": "Q_credit_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_353": {
                "variable": {
                    "value": "self.summary_op_Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_Q_credit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_Q_credit', self.loss_Q_credit)]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Policy_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_113": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "Policy_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_117": {
                "x": {
                    "value": "(1 - self.epsilon) * probs_target + self.epsilon / float(self.l_action)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "Q_global_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "Q_global_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_267": {
                "x": {
                    "value": "self.Q_credit_td_target - tf.squeeze(self.Q_credit)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_275": {
                "x": {
                    "value": "self.Q_global_td_target - tf.squeeze(self.Q_global)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_281": {
                "x": {
                    "value": "self.V_td_target - tf.squeeze(self.V)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_311": {
                "variable": {
                    "value": "pi_mult_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.Q_cf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "counterfactuals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(pi_mult_Q, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_315": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "counterfactuals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_sum(pi_mult_Q, axis=1), [-1, self.n_agents])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_317": {
                "variable": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(advantages, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_334": {
                "name": {
                    "value": "loss_Q_global",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_Q_global",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_356": {
                "variable": {
                    "value": "V_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_363": {
                "variable": {
                    "value": "self.summary_op_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_V', self.loss_V)]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_365": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.policy_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Q_credit_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "Q_credit_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "V_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "V_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "input_tensor": {
                    "value": "tf.multiply(self.probs, self.action_taken)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_305": {
                "x": {
                    "value": "self.Q_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.probs_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_306": {
                "input": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_307": {
                "input_tensor": {
                    "value": "tf.multiply(log_probs, advantage)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_319": {
                "variable": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "V_evaluated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_320": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.V_evaluated",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(advantages, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "sum_n_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(self.Q_actual, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "input_tensor": {
                    "value": "tf.reduce_sum(m_terms, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_337": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "scalar_345": {
                "name": {
                    "value": "loss_Q_credit",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_368": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_267": {
                "input": {
                    "value": "self.Q_credit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_275": {
                "input": {
                    "value": "self.Q_global",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "input": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_290": {
                "x": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_taken",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_307": {
                "x": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.multiply(self.probs, self.action_taken), axis=1) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.squeeze(self.Q_actual), advantage2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_313": {
                "input_tensor": {
                    "value": "pi_mult_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.probs_evaluated, self.Q_cf)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_317": {
                "input_tensor": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(self.Q_actual, counterfactuals)",
                            "Call"
                        ],
                        [
                            "tf.subtract(self.Q_actual, self.V_evaluated)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "m_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(log_probs_shaped, sum_n_A)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_341": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_348": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "scalar_355": {
                "name": {
                    "value": "loss_V",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_372": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_321": {
                "input_tensor": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(self.Q_actual, counterfactuals)",
                            "Call"
                        ],
                        [
                            "tf.subtract(self.Q_actual, self.V_evaluated)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_323": {
                "input_tensor": {
                    "value": "self.Q_actual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_352": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_358": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_global_variables",
                            "variable"
                        ],
                        [
                            "Q_credit_variables",
                            "variable"
                        ],
                        [
                            "V_variables",
                            "variable"
                        ],
                        [
                            "policy_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_362": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "alg/alg_qmix.py": {
        "tensorflow": {
            "placeholder_68": {
                "variable": {
                    "value": "self.v_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.v_goal_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.v_state_one_agent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_one_agent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.v_state_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_other_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_other_agents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.v_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.v_goal_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, (self.n_agents - 1) * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.v_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.action_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents - 1, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.v_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_obs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "self.argmax_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.agent_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "self.argmax_Q_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.agent_qs_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.actions_1hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_1hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "self.q_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.agent_qs, self.actions_1hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "self.mixer_q_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.q_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "self.q_target_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.agent_qs_target, self.actions_1hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "self.mixer_target_q_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.q_target_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_122": {
                "variable": {
                    "value": "list_Agent_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Agent_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_124": {
                "variable": {
                    "value": "list_Agent_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Agent_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_139": {
                "variable": {
                    "value": "list_Mixer_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Mixer_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_141": {
                "variable": {
                    "value": "list_Mixer_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Mixer_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_188": {
                "variable": {
                    "value": "self.td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "self.loss_mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.td_target - tf.squeeze(self.mixer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_191": {
                "variable": {
                    "value": "self.mixer_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_204": {
                "variable": {
                    "value": "self.summary_op_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_mixer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_mixer', self.loss_mixer)]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.h_obs, self.w_obs, self.c_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_others]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Agent_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "Agent_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_103": {
                "x": {
                    "value": "self.agent_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.actions_1hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_106": {
                "x": {
                    "value": "self.agent_qs_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.actions_1hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "Mixer_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "Mixer_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "self.td_target - tf.squeeze(self.mixer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_196": {
                "name": {
                    "value": "loss_mixer",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_mixer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_197": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Mixer_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_199": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixer_main_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_189": {
                "input": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_203": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "alg/alg_qmix_checkers.py": {
        "tensorflow": {
            "placeholder_65": {
                "variable": {
                    "value": "self.state_env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.rows_state, self.columns_state, self.channels_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "state_env",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.v_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.v_goal_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.v_state_one_agent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_one_agent]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_one_agent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.v_state_other_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_state_other_agents]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_state_other_agents",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.v_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.v_goal_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, (self.n_agents - 1) * self.l_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "v_goal_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.v_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.action_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_agents - 1, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_91": {
                "variable": {
                    "value": "self.argmax_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.agent_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "self.argmax_Q_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.agent_qs_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.actions_1hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_1hot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "self.q_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.agent_qs, self.actions_1hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "self.mixer_q_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.q_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "self.q_target_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.agent_qs_target, self.actions_1hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "self.mixer_target_q_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.q_target_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_115": {
                "variable": {
                    "value": "list_Agent_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Agent_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_117": {
                "variable": {
                    "value": "list_Agent_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Agent_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "variable": {
                    "value": "list_Mixer_main",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Mixer_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_134": {
                "variable": {
                    "value": "list_Mixer_target",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Mixer_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "self.td_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "td_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "self.loss_mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.td_target - tf.squeeze(self.mixer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_189": {
                "variable": {
                    "value": "self.mixer_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_202": {
                "variable": {
                    "value": "self.summary_op_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries_mixer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss_mixer', self.loss_mixer)]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.obs_self_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.rows_obs, self.columns_obs, self.channels_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_self_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.obs_self_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_self]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_self_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.obs_others",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_obs_others]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.actions_prev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.l_action]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_prev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "Agent_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Agent_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_96": {
                "x": {
                    "value": "self.agent_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.actions_1hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_99": {
                "x": {
                    "value": "self.agent_qs_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.actions_1hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "Mixer_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Mixer_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_187": {
                "x": {
                    "value": "self.td_target - tf.squeeze(self.mixer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "name": {
                    "value": "loss_mixer",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_mixer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_195": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Mixer_main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_197": {
                "name": {
                    "value": "v.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixer_main_variables",
                            "variable"
                        ]
                    ]
                }
            },
            "squeeze_187": {
                "input": {
                    "value": "self.mixer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_201": {
                "name": {
                    "value": "var.op.name + '/gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "alg/networks.py": {
        "tensorflow": {
            "reshape_88": {
                "variable": {
                    "value": "actions_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action_others",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_others * n_actions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_n, g_n, a_n]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_104": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Q_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_n, g_n, a_n]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_133": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Q_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, s_n, g_n, a_n, conv_o, v_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_165": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Q_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_181": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_n, g_n, a_m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_195": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_208": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Q_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_209": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_n, g_n, a_m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_238": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Q_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_239": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_255": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, s_n, g_n, a_m, conv_o, v_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_256": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_269": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Q_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_270": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "actions_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action_others",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_others * n_actions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_279": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state, actions_reshaped, agent_labels, v_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_287": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state, actions]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "a_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_others",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_others * n_actions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_301": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_obs, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_314": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_sumo_branch_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_327": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='V_sumo_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_328": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_sumo_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_336": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_state_n, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_337": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_sumo_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_350": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='V_sumo_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_351": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_sumo_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_358": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_obs, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_359": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_particle_branch_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_371": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='V_particle_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_372": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_particle_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_385": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_state_n, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_386": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_particle_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_399": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='V_particle_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_400": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_particle_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_407": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_n, g_n, s_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_419": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, v_obs_self, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_420": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "branch_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_432": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='V_checkers_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_433": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "V_checkers_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_442": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, s_n, g_n]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_443": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "V_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_455": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='V_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_456": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "V_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_479": {
                "variable": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_branch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_483": {
                "variable": {
                    "value": "branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_goal",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_487": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch1, branch2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_506": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_h2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_507": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.add_n(list_mult), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_510": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_512": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h, units=n_outputs, activation=nonlinearity2, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_outputs, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_goals')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=1, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_1output')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_checkers')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_checkers_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "fc3(v_obs, n_hidden1=n_h1, n_hidden2=n_h2, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='actor_coma')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=n_actions, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='Qmix_single_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='Qmix_single_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "actor_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_520": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_obs, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_521": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_branch_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_533": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_h2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_534": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.add_n(list_mult), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_536": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_537": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h, units=n_outputs, activation=nonlinearity2, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_outputs, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_goals')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=1, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_1output')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_checkers')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_checkers_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "fc3(v_obs, n_hidden1=n_h1, n_hidden2=n_h2, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='actor_coma')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=n_actions, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='Qmix_single_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='Qmix_single_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "actor_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_545": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h, units=n_outputs, activation=nonlinearity2, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_outputs, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_goals')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=1, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_1output')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_checkers')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_checkers_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "fc3(v_obs, n_hidden1=n_h1, n_hidden2=n_h2, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='actor_coma')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=n_actions, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='Qmix_single_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='Qmix_single_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "actor_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_553": {
                "variable": {
                    "value": "conv_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs_self, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs_self, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs_self, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(state_env, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_555": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_linear, v_obs_self, a_prev, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_556": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "branch_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_571": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_h2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_572": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.add_n(list_mult), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_575": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "actor_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_576": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h, units=n_outputs, activation=nonlinearity2, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_outputs, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_goals')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='Q_out')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=1, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_1output')",
                            "Call"
                        ],
                        [
                            "fc3(concated, n_hidden1=units, n_hidden2=units, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='Q_coma_checkers')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_sumo_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_particle_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_checkers_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=bias, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=1, activation=None, use_bias=False, name='V_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='actor_out')",
                            "Call"
                        ],
                        [
                            "fc3(v_obs, n_hidden1=n_h1, n_hidden2=n_h2, n_outputs=n_actions, nonlinearity1=tf.nn.relu, nonlinearity2=tf.nn.relu, scope='actor_coma')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='actor_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=n_actions, activation=None, use_bias=True, name='out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=True, name='Qmix_single_out')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h2, units=n_actions, activation=None, use_bias=bias, name='Qmix_single_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "actor_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_583": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[o_others, o_self, goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_585": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_588": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=t_input, units=n_hidden, activation=nonlinearity1, use_bias=True, name='h')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=64, activation=tf.nn.relu, use_bias=True, name='h')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=64, activation=tf.nn.relu, use_bias=True, name='h2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_591": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=t_input, units=n_hidden, activation=nonlinearity1, use_bias=True, name='h')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=64, activation=tf.nn.relu, use_bias=True, name='h')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=64, activation=tf.nn.relu, use_bias=True, name='h2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_599": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[o_self, goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_600": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Qmix_single_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_607": {
                "variable": {
                    "value": "conv_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convnet_1(t_obs, f1=4, k1=[5, 3], s1=[1, 1], scope='V_sumo_conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs, f1=4, k1=[5, 3], s1=[1, 1], scope='actor_conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(o_others, f1=4, k1=[5, 3], s1=[1, 1], scope='Qmix_single_conv')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_conv_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Qmix_single_conv_reduced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_611": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add_n(list_mult, name='Qmix_single_h2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_612": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Qmix_single_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_620": {
                "variable": {
                    "value": "conv_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs_self, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(s_grid, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs_self, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs_self, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(state_env, f1=f1, k1=k1, s1=[1, 1], scope='conv')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_621": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_linear, v_obs_self, a_prev, v_goal]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_622": {
                "variable": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "branch_self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_628": {
                "variable": {
                    "value": "branch_others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_obs_others",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "branch_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_632": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_h2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_633": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(tf.add_n(list_mult), b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_636": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Qmix_single_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_653": {
                "variable": {
                    "value": "agent_qs_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "agent_qs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_654": {
                "variable": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state, goals_all]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_660": {
                "variable": {
                    "value": "hyper_b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hyper_b_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[state_goals_dim, embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_662": {
                "variable": {
                    "value": "hyper_b_final_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "hyper_b_final_l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_664": {
                "variable": {
                    "value": "hyper_b_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hyper_b_final_l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=state_goals, units=embed_dim, activation=tf.nn.relu, use_bias=False, name='hyper_b_final_l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=state_goals, units=embed_dim, activation=tf.nn.relu, use_bias=False, name='hyper_b_final_l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "hyper_b_final",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_668": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state_goals, hyper_w_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_669": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hyper_b_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hyper_b_1', [state_goals_dim, embed_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hyper_b_1', [state_goals_dim, embed_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_670": {
                "variable": {
                    "value": "w1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_1))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_agents, embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_671": {
                "variable": {
                    "value": "b1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state_goals, hyper_b_1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(state_goals, hyper_b_1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "elu_673": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(agent_qs_reshaped, w1_reshaped) + b1_reshaped",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_676": {
                "variable": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state_goals, hyper_w_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_677": {
                "variable": {
                    "value": "w_final_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_final))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_final))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embed_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_678": {
                "variable": {
                    "value": "b_final_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hyper_b_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hyper_b_final_l1, units=1, activation=None, use_bias=False, name='hyper_b_final')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hyper_b_final_l1, units=1, activation=None, use_bias=False, name='hyper_b_final')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_683": {
                "variable": {
                    "value": "q_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden, w_final_reshaped) + b_final_reshaped",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(hidden, w_final_reshaped) + b_final_reshaped",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_702": {
                "variable": {
                    "value": "agent_qs_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "agent_qs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, n_agents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_703": {
                "variable": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, state, goals_all]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_709": {
                "variable": {
                    "value": "hyper_b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hyper_b_1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[state_goals_dim, embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_711": {
                "variable": {
                    "value": "hyper_b_final_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "hyper_b_final_l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_713": {
                "variable": {
                    "value": "hyper_b_final",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hyper_b_final_l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=state_goals, units=embed_dim, activation=tf.nn.relu, use_bias=False, name='hyper_b_final_l1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=state_goals, units=embed_dim, activation=tf.nn.relu, use_bias=False, name='hyper_b_final_l1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "hyper_b_final",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_717": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state_goals, hyper_w_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_718": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hyper_b_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hyper_b_1', [state_goals_dim, embed_dim])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hyper_b_1', [state_goals_dim, embed_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_719": {
                "variable": {
                    "value": "w1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_1))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_agents, embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_720": {
                "variable": {
                    "value": "b1_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(state_goals, hyper_b_1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(state_goals, hyper_b_1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "elu_722": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(agent_qs_reshaped, w1_reshaped) + b1_reshaped",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_725": {
                "variable": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(state_goals, hyper_w_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_726": {
                "variable": {
                    "value": "w_final_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_final))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.matmul(state_goals, hyper_w_final))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embed_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_727": {
                "variable": {
                    "value": "b_final_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hyper_b_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=hyper_b_final_l1, units=1, activation=None, use_bias=False, name='hyper_b_final')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=hyper_b_final_l1, units=1, activation=None, use_bias=False, name='hyper_b_final')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_732": {
                "variable": {
                    "value": "q_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden, w_final_reshaped) + b_final_reshaped",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(hidden, w_final_reshaped) + b_final_reshaped",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_9": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "nonlinearity1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_13": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=t_input, units=n_hidden, activation=nonlinearity1, use_bias=True, name='h')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=64, activation=tf.nn.relu, use_bias=True, name='h')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=64, activation=tf.nn.relu, use_bias=True, name='h2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "nonlinearity2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "nonlinearity1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_28": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=t_input, units=n_hidden1, activation=nonlinearity1, use_bias=True, name='h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=True, name='V_h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=True, name='V_h1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "nonlinearity2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10",
                            "Method Argument"
                        ],
                        [
                            "[5",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[5",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputs=t_input, num_outputs=f1, kernel_size=k1, stride=s1, padding='SAME', activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputs=t_input, num_outputs=f1, kernel_size=k1, stride=s1, padding='SAME', activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[6",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "conv2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputs=conv1, num_outputs=f2, kernel_size=k2, stride=s2, padding='SAME', activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "6",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10",
                            "Method Argument"
                        ],
                        [
                            "[5",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ],
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[5",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "conv1_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputs=t_input, num_outputs=f1, kernel_size=k1, stride=s1, padding='SAME', activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputs=t_input, num_outputs=f1, kernel_size=k1, stride=s1, padding='SAME', activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "a_others_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_others",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_others * n_actions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "a_others_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_others",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_others * n_actions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "a_others_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_others",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_others * n_actions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_409": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_410": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=t_input, units=n_hidden1, activation=nonlinearity1, use_bias=True, name='h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=True, name='V_h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=True, name='V_h1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_411": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_466": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv, s_n, g_n, s_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_467": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_468": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=t_input, units=n_hidden1, activation=nonlinearity1, use_bias=True, name='h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=True, name='V_h1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=True, name='V_h1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_469": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=h1, units=n_hidden2, activation=nonlinearity2, use_bias=True, name='h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Q_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_sumo_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_particle_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_checkers_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='V_h2'))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=h1, units=n_h2, activation=tf.nn.relu, use_bias=True, name='V_h2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.add_n(list_mult, name='Qmix_single_h2'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.nn.bias_add(tf.add_n(list_mult), b))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc2'",
                            "Method Argument"
                        ],
                        [
                            "'fc3'",
                            "Method Argument"
                        ],
                        [
                            "'convnet'",
                            "Method Argument"
                        ],
                        [
                            "'convnet_1'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc2'",
                            "Method Argument"
                        ],
                        [
                            "'fc3'",
                            "Method Argument"
                        ],
                        [
                            "'convnet'",
                            "Method Argument"
                        ],
                        [
                            "'convnet_1'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc2'",
                            "Method Argument"
                        ],
                        [
                            "'fc3'",
                            "Method Argument"
                        ],
                        [
                            "'convnet'",
                            "Method Argument"
                        ],
                        [
                            "'convnet_1'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fc2'",
                            "Method Argument"
                        ],
                        [
                            "'fc3'",
                            "Method Argument"
                        ],
                        [
                            "'convnet'",
                            "Method Argument"
                        ],
                        [
                            "'convnet_1'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_81": {
                "shape": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_114": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_others, a_others_reshaped]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_115": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_119": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_144": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_others, a_others_reshaped]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_145": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_149": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_175": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_others, a_others_reshaped]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_176": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_180": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_203": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_m, s_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_204": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_208": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_228": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_233": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_m, s_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_234": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_238": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_260": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_264": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_m, s_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_265": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_269": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Q_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_318": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch_self_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_323": {
                "variable": {
                    "value": "conv_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convnet_1(t_obs, f1=4, k1=[5, 3], s1=[1, 1], scope='V_sumo_conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs, f1=4, k1=[5, 3], s1=[1, 1], scope='actor_conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(o_others, f1=4, k1=[5, 3], s1=[1, 1], scope='Qmix_single_conv')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_conv_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_sumo_conv_reduced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "V_sumo_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_341": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_345": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_state_others, v_goal_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_346": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_sumo_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_350": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "V_sumo_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_363": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch_self_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_367": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_obs_others",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1_branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_local_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_371": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "V_particle_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_390": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_394": {
                "variable": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_state_others, v_goal_others]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_395": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concated2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_others, a_others_reshaped], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_m, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_others, v_goal_others], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_h1_branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "V_particle_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_399": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "V_particle_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_424": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_self_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_self_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_self_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_self_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_428": {
                "variable": {
                    "value": "branch_others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_obs_others",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "branch_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_432": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "V_checkers_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_447": {
                "a": {
                    "value": "branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=True, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=activation, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='Q_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='V_branch1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs, units=n_h1, activation=tf.nn.relu, use_bias=True, name='actor_branch1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch1_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch1_h2', [n_h1_1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_451": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "s_others",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "V_branch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_455": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "V_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_464": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_492": {
                "a": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([v_global, actions_reshaped, v_goal, v_goal_others, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_n, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, a_m], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, a_m, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions_reshaped, agent_labels, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state, actions], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_s, s_agents, a_reshaped, g_n, g_others, agent_labels, conv_o, v_obs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_state_n, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, v_obs_self, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, s_n, g_n, s_others], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch1, branch2], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_obs, v_goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_others, o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([o_self, goal], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_linear, v_obs_self, a_prev, v_goal], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_concated_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_concated_h2', [2 * n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_502": {
                "variable": {
                    "value": "conv_reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convnet_1(t_obs, f1=4, k1=[5, 3], s1=[1, 1], scope='V_sumo_conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(t_obs, f1=4, k1=[5, 3], s1=[1, 1], scope='actor_conv')",
                            "Call"
                        ],
                        [
                            "convnet_1(o_others, f1=4, k1=[5, 3], s1=[1, 1], scope='Qmix_single_conv')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_conv_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_conv_reduced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_507": {
                "value": {
                    "value": "tf.add_n(list_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_525": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch_self_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch_self_h2', [n_h1_self, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_529": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_obs_others",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "actor_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_534": {
                "value": {
                    "value": "tf.add_n(list_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_560": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_self_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_self_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_self_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_self_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_567": {
                "variable": {
                    "value": "branch_others",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v_obs_others",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "branch_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_572": {
                "value": {
                    "value": "tf.add_n(list_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_604": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch_self_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch_self_out', [n_h1_branch1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_609": {
                "a": {
                    "value": "conv_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='V_sumo_conv_reduced')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='actor_conv_reduced')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='Qmix_single_conv_reduced')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_conv_out', [n_conv_reduced, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_conv_out', [n_conv_reduced, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_611": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Qmix_single_h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_626": {
                "a": {
                    "value": "branch_self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='V_particle_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_self, activation=tf.nn.relu, use_bias=True, name='actor_branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1_branch1, activation=tf.nn.relu, use_bias=True, name='Qmix_single_self')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_self')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_self_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_self_h2', [n_h1_1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_self_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_self_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_630": {
                "a": {
                    "value": "branch_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_others_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_others_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1_others, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_633": {
                "value": {
                    "value": "tf.add_n(list_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_668": {
                "a": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hyper_w_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('hyper_w_1', [state_goals_dim, embed_dim * n_agents])",
                            "Call"
                        ],
                        [
                            "get_variable('hyper_w_1', [state_goals_dim, embed_dim * n_agents])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_676": {
                "a": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hyper_w_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('hyper_w_final', [state_goals_dim, embed_dim])",
                            "Call"
                        ],
                        [
                            "get_variable('hyper_w_final', [state_goals_dim, embed_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_681": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.matmul(agent_qs_reshaped, w1_reshaped) + b1_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.matmul(agent_qs_reshaped, w1_reshaped) + b1_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_final_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_final, [-1, embed_dim, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_final, [-1, embed_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_717": {
                "a": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hyper_w_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('hyper_w_1', [state_goals_dim, embed_dim * n_agents])",
                            "Call"
                        ],
                        [
                            "get_variable('hyper_w_1', [state_goals_dim, embed_dim * n_agents])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_725": {
                "a": {
                    "value": "state_goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([state, goals_all], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv, state, goals_all], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hyper_w_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('hyper_w_final', [state_goals_dim, embed_dim])",
                            "Call"
                        ],
                        [
                            "get_variable('hyper_w_final', [state_goals_dim, embed_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_730": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.matmul(agent_qs_reshaped, w1_reshaped) + b1_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.matmul(agent_qs_reshaped, w1_reshaped) + b1_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_final_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_final, [-1, embed_dim, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_final, [-1, embed_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_206": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_267": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_325": {
                "a": {
                    "value": "conv_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='V_sumo_conv_reduced')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='actor_conv_reduced')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='Qmix_single_conv_reduced')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_conv_out', [n_conv_reduced, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_conv_out', [n_conv_reduced, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_348": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_366": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_369": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_others_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_others_out', [n_h1_branch2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_393": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_397": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_427": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_430": {
                "a": {
                    "value": "branch_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_others_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_others_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1_others, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_450": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_453": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_branch2_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_branch2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_branch2_h2', [n_h1_2, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_498": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_504": {
                "a": {
                    "value": "conv_reduced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='V_sumo_conv_reduced')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='actor_conv_reduced')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=conv_out, units=n_conv_reduced, activation=tf.nn.relu, use_bias=True, name='Qmix_single_conv_reduced')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_conv_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_conv_h2', [n_conv_reduced, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_507": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_528": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_531": {
                "a": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=True, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=activation, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='Q_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_sumo_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_local_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=concated2, units=n_h1_branch2, activation=tf.nn.relu, use_bias=True, name='V_particle_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=s_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='V_branch2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_others, activation=tf.nn.relu, use_bias=True, name='actor_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_others_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_others_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1_others, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_534": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_566": {
                "name_or_scope": {
                    "value": "stage-2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_569": {
                "a": {
                    "value": "branch_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1_2, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=v_obs_others, units=n_h1, activation=tf.nn.relu, use_bias=bias, name='branch_others')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_others_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_variable('W_others_h2', [n_h1_2, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1_others, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ],
                        [
                            "get_variable('W_others_h2', [n_h1, n_h2])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_572": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_633": {
                "inputs": {
                    "value": "list_mult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_673": {
                "a": {
                    "value": "agent_qs_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(agent_qs, [-1, 1, n_agents])",
                            "Call"
                        ],
                        [
                            "tf.reshape(agent_qs, [-1, 1, n_agents])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w1, [-1, n_agents, embed_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w1, [-1, n_agents, embed_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_722": {
                "a": {
                    "value": "agent_qs_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(agent_qs, [-1, 1, n_agents])",
                            "Call"
                        ],
                        [
                            "tf.reshape(agent_qs, [-1, 1, n_agents])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w1, [-1, n_agents, embed_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w1, [-1, n_agents, embed_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_8": {
                "shape": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_23": {
                "shape": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "alg/train_offpolicy.py": {
        "tensorflow": {
            "trainable_variables_154": {
                "variable": {
                    "value": "list_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_171": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_174": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_176": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'../saved/%s' % dir_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_201": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Saver_156": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_173": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[v for v in list_variables if 'stage-%d' % stage not in v.name.split('/')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[v for v in list_variables if 'stage-%d' % stage not in v.name.split('/')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alg/train_onpolicy.py": {
        "tensorflow": {
            "trainable_variables_147": {
                "variable": {
                    "value": "list_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_163": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_166": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_168": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'../saved/%s' % dir_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Saver_149": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_165": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Saver_156": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[v for v in list_variables if 'stage-%d' % stage not in v.name.split('/')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_161": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[v for v in list_variables if 'stage-%d' % stage not in v.name.split('/')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}