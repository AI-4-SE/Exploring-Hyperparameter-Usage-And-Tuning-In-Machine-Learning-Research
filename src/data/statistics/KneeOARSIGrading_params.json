{
    "oarsigrading/evaluation/metrics.py": {
        "sklearn": {
            "confusion_matrix_112": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cohen_kappa_score_17": {
                "y1": {
                    "value": "val_gt[:, task_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y2": {
                    "value": "val_pred[:, task_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weights": {
                    "value": "quadratic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "balanced_accuracy_score_18": {
                "y_true": {
                    "value": "val_gt[:, task_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "val_pred[:, task_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "oarsigrading/training/session.py": {
        "sklearn": {
            "GroupKFold_88": {
                "variable": {
                    "value": "gkf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "kvs['args'].n_folds",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_184": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(x_val, kvs['val_trf'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "kvs['args'].val_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "kvs['args'].n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "tmp_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(kvs[f\"{kvs['args'].train_set}_meta\"], train_trf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_threads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(x_train, kvs['train_trf'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "kvs['args'].bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "kvs['args'].n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "WeightedRandomSampler(weights, x_train.shape[0], True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(x_train, kvs['train_trf'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "kvs['args'].bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "kvs['args'].n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "{'epoch': epoch, 'net': net_core(model).state_dict(), 'optim': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cur_snapshot_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(kvs['args'].snapshots, kvs['snapshot_name'], f'fold_{fold_id}_epoch_{epoch + 1}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch['img_med'], batch['img_lat'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_233": {
                "obj": {
                    "value": "{'epoch': epoch, 'net': net_core(model).state_dict(), 'optim': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cur_snapshot_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(kvs['args'].snapshots, kvs['snapshot_name'], f'fold_{fold_id}_epoch_{epoch + 1}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_170": {
                "tensors": {
                    "value": "[make_weights_for_multiclass(x_train[col].values.astype(int))[1] for col in cols]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/calc_aucs.py": {
        "sklearn": {
            "roc_curve_91": {
                "variable": {
                    "value": "(fpr1, tpr1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 0] >= 2",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_kl[:, 2:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_95": {
                "variable": {
                    "value": "(fpr1, tpr1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 1] >= 1, gt[:, 2] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 0, 1:].sum(1), predicts_oarsi[:, 1, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_99": {
                "variable": {
                    "value": "(fpr1, tpr1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 4] >= 1, gt[:, 5] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 3, 1:].sum(1), predicts_oarsi[:, 4, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_103": {
                "variable": {
                    "value": "(fpr1, tpr1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 4] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 3, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_107": {
                "variable": {
                    "value": "(fpr1, tpr1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 6] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 5, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_124": {
                "variable": {
                    "value": "(recall, precision, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 0] >= 2",
                            "Compare"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probs_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_kl[:, 2:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_128": {
                "variable": {
                    "value": "(recall, precision, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 1] >= 1, gt[:, 2] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probs_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 0, 1:].sum(1), predicts_oarsi[:, 1, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_132": {
                "variable": {
                    "value": "(recall, precision, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 4] >= 1, gt[:, 5] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probs_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 3, 1:].sum(1), predicts_oarsi[:, 4, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_136": {
                "variable": {
                    "value": "(recall, precision, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 4] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probs_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 3, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_140": {
                "variable": {
                    "value": "(recall, precision, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 6] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probs_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 5, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_92": {
                "y_true": {
                    "value": "gt_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 0] >= 2",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_kl[:, 2:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_96": {
                "y_true": {
                    "value": "gt_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 1] >= 1, gt[:, 2] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 0, 1:].sum(1), predicts_oarsi[:, 1, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_100": {
                "y_true": {
                    "value": "gt_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 4] >= 1, gt[:, 5] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 3, 1:].sum(1), predicts_oarsi[:, 4, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_104": {
                "y_true": {
                    "value": "gt_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 4] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 3, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_108": {
                "y_true": {
                    "value": "gt_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 6] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 5, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_125": {
                "y_true": {
                    "value": "gt_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 0] >= 2",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_oa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_kl[:, 2:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_129": {
                "y_true": {
                    "value": "gt_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 1] >= 1, gt[:, 2] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_ostl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 0, 1:].sum(1), predicts_oarsi[:, 1, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_133": {
                "y_true": {
                    "value": "gt_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((gt[:, 4] >= 1, gt[:, 5] >= 1))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_ostm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((predicts_oarsi[:, 3, 1:].sum(1), predicts_oarsi[:, 4, 1:].sum(1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_137": {
                "y_true": {
                    "value": "gt_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 4] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_jsnl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 3, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_141": {
                "y_true": {
                    "value": "gt_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt[:, 6] >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs_jsnm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicts_oarsi[:, 5, 1:].sum(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/calc_test_metrics.py": {
        "sklearn": {
            "classification_report_23": {
                "variable": {
                    "value": "clf_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "digits": {
                    "value": "digits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "classification_report_29": {
                "variable": {
                    "value": "clf_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "digits": {
                    "value": "digits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "oarsigrading/dataset/utils.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.unique(targets).shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_85": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "oarsigrading/evaluation/tta.py": {
        "torch": {
            "stack_21": {
                "tensors": {
                    "value": "(c_cr, ul_cr, ur_cr, bl_cr, br_cr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_56": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "oarsigrading/training/dataset.py": {
        "torch": {}
    },
    "oarsigrading/training/model.py": {
        "torch": {
            "Sequential_61": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*clf_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "nn.Conv2d(inp, out, kernel_size=3, stride=stride, padding=pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block3(3, bw, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block3(bw, bw * 2, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block3(bw * 4, bw * 4, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block3(bw * 4, bw * 8, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_193": {
                "variable": {
                    "value": "o1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_194": {
                "variable": {
                    "value": "o2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block2(o1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_195": {
                "variable": {
                    "value": "o3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block3(o2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_lat, f_med]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_226": {
                "variable": {
                    "value": "self.cls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_feats, n_feats, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "backbone.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "64 * 8 * 2",
                            "BinOp"
                        ],
                        [
                            "backbone.classifier[-1].in_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_197": {
                "input": {
                    "value": "self.block4(o3)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "n_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(n_cls,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_70": {
                "variable": {
                    "value": "avgp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "n_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "backbone.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "64 * 8 * 2",
                            "BinOp"
                        ],
                        [
                            "backbone.classifier[-1].in_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "backbone.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "64 * 8 * 2",
                            "BinOp"
                        ],
                        [
                            "backbone.classifier[-1].in_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "n_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "backbone.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "64 * 8 * 2",
                            "BinOp"
                        ],
                        [
                            "backbone.classifier[-1].in_features * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_24": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "n_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "backbone.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "64 * 8 * 2",
                            "BinOp"
                        ],
                        [
                            "backbone.classifier[-1].in_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "num_features": {
                    "value": "n_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "oarsigrading/training/model_zoo.py": {
        "torch": {
            "Sequential_49": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.encoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ViewerFC()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ViewerFC()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_48": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "model.last_linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncls",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "model.last_linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ncls",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "oarsigrading/training/transforms.py": {
        "torch": {
            "unsqueeze_88": {
                "variable": {
                    "value": "grades",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "grades",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "mean_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mean_vector).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "std_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "std_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(std_vector).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "oarsigrading/training/utils.py": {
        "torch": {
            "MultiStepLR_135": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "list(map(lambda x: x - epoch_start, kvs['args'].lr_drop))",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma": {
                    "value": "kvs['args'].lr_drop_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingNetSiamese(backbone=kvs['args'].siamese_bb, dropout=kvs['args'].dropout_rate)",
                            "Call"
                        ],
                        [
                            "OARSIGradingNet(bb_depth=kvs['args'].backbone_depth, dropout=kvs['args'].dropout_rate, cls_bnorm=kvs['args'].use_bnorm, se=kvs['args'].se, dw=kvs['args'].dw, use_gwap=kvs['args'].use_gwap, use_gwap_hidden=kvs['args'].use_gwap_hidden, pretrained=kvs['args'].pretrained, no_kl=kvs['args'].no_kl)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "kvs['args'].lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "kvs['args'].wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_87": {
                "mode": {
                    "value": "optimizer is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "kvs['args'].lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "kvs['args'].wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "kvs['args'].momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "kvs['args'].nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/oof_inference.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(val_set, test_trf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SequentialSampler(val_dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_83": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingNetSiamese(backbone=session_backup['args'][0].siamese_bb, dropout=session_backup['args'][0].dropout_rate)",
                            "Call"
                        ],
                        [
                            "OARSIGradingNet(bb_depth=layers, dropout=session_backup['args'][0].dropout_rate, cls_bnorm=session_backup['args'][0].use_bnorm, se=se, dw=dw, use_gwap=getattr(session_backup['args'][0], 'use_gwap', False), use_gwap_hidden=getattr(session_backup['args'][0], 'use_gwap_hidden', False), no_kl=getattr(session_backup['args'][0], 'no_kl', False))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "snapshot_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glob.glob(os.path.join(args.snapshots_root, args.snapshot, f'fold_{fold_id}*.pth'))",
                            "Call"
                        ],
                        [
                            "snapshot_name[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_102": {
                "data_source": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(val_set, test_trf)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/test.py": {
        "torch": {
            "DataLoader_111": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(metadata, test_trf)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SequentialSampler(test_dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_97": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingNetSiamese(backbone=session_backup['args'][0].siamese_bb, dropout=session_backup['args'][0].dropout_rate)",
                            "Call"
                        ],
                        [
                            "OARSIGradingNet(bb_depth=layers, dropout=session_backup['args'][0].dropout_rate, cls_bnorm=session_backup['args'][0].use_bnorm, se=se, dw=dw, use_gwap=getattr(session_backup['args'][0], 'use_gwap', False), use_gwap_hidden=getattr(session_backup['args'][0], 'use_gwap_hidden', False), no_kl=getattr(session_backup['args'][0], 'no_kl', False))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "snapshot_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "glob.glob(os.path.join(args.snapshots_root, args.snapshot, f'fold_{fold_id}*.pth'))",
                            "Call"
                        ],
                        [
                            "snapshot_name[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SequentialSampler_113": {
                "data_source": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OARSIGradingDataset(metadata, test_trf)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}