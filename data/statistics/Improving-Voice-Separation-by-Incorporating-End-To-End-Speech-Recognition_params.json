{
    "ConvTasNet/conv_tasnet.py": {
        "torch": {
            "Conv1d_67": {
                "variable": {
                    "value": "self.conv1d_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "L // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mixture, 1)",
                            "Call"
                        ],
                        [
                            "mixture",
                            "Method Argument"
                        ],
                        [
                            "mixture",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1d_U(mixture)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_88": {
                "variable": {
                    "value": "self.basis_signals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "L // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "source_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mixture_w, 1) * est_mask",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(source_w, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_132": {
                "variable": {
                    "value": "bottleneck_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "temporal_conv_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*repeats",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_148": {
                "variable": {
                    "value": "mask_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_180": {
                "variable": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_181": {
                "variable": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_210": {
                "variable": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(P - 1) * dilation if causal else (P - 1) * dilation // 2",
                            "IfExp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** x",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_216": {
                "variable": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_219": {
                "variable": {
                    "value": "pointwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_274": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_275": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_289": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "var_290": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_300": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_316": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_316": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(mixture_w)",
                            "Call"
                        ],
                        [
                            "score.view(M, self.C, N, K)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "input": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(mixture)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1d_U(mixture))",
                            "Call"
                        ],
                        [
                            "mixture_w",
                            "Method Argument"
                        ],
                        [
                            "mixture_w",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_169": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(mixture_w)",
                            "Call"
                        ],
                        [
                            "score.view(M, self.C, N, K)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_266": {
                "num_features": {
                    "value": "channel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_size",
                            "Method Argument"
                        ],
                        [
                            "channel_size",
                            "Method Argument"
                        ],
                        [
                            "channel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pow_291": {
                "input": {
                    "value": "var + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_317": {
                "input": {
                    "value": "var + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ConvTasNet/dataloader.py": {
        "torch": {}
    },
    "ConvTasNet/main.py": {
        "torch": {
            "manual_seed_all_12": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ConvTasNet/pit_criterion.py": {
        "torch": {
            "unsqueeze_74": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - mean_target",
                            "BinOp"
                        ],
                        [
                            "zero_mean_target * mask",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "s_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "zero_mean_estimate * mask",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "pair_wise_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_estimate * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,pij->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pair_wise_si_snr, perms_one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_94": {
                "variable": {
                    "value": "max_snr_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_96": {
                "variable": {
                    "value": "(max_snr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_21": {
                "variable": {
                    "value": "mean_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "mean_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimated",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - mean_target",
                            "BinOp"
                        ],
                        [
                            "zero_mean_target * mask",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "s_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "zero_mean_estimate * mask",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "pair_wise_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_estimate * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "variable": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,pij->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pair_wise_si_snr, perms_one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_43": {
                "variable": {
                    "value": "(max_snr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "estimate_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source * mask",
                            "BinOp"
                        ],
                        [
                            "estimate_source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "s_target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "e_noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_84": {
                "input": {
                    "value": "pair_wise_si_snr + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "s_target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "e_noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_35": {
                "input": {
                    "value": "pair_wise_si_snr + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ConvTasNet/test.py": {
        "torch": {
            "DataParallel_99": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ConvTasNet(C=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVSpeech('test')",
                            "Call"
                        ],
                        [
                            "DataLoader(dataloader, batch_size=config.batchsize['test'], num_workers=config.num_workers['test'], worker_init_fn=init_fn)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batchsize['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "cur_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.pretrained_test",
                            "Attribute"
                        ],
                        [
                            "cur_test",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ConvTasNet/train.py": {
        "torch": {
            "DataParallel_142": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ConvTasNet(C=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVSpeech('train')",
                            "Call"
                        ],
                        [
                            "DataLoader(dataloader, batch_size=config.batchsize['train'], num_workers=config.num_workers['train'], worker_init_fn=init_fn)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batchsize['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "load_156": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.pretrained_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'iterations': no}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model_save_path + '/' + str(no) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/dataloader.py": {
        "torch": {
            "cat_158": {
                "variable": {
                    "value": "all_token_id",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_token_id, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "all_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_audio, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "all_token_id[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "all_token_id[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, max_y - all_token_id[all_token_id_i].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "all_token_id[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_151": {
                "variable": {
                    "value": "all_audio[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "all_audio[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, max_audio - all_audio[all_token_id_i].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "all_audio[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(path)",
                            "Call"
                        ],
                        [
                            "batch",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/main.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/model.py": {
        "torch": {
            "ones_36": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.uint8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_37": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_394": {
                "variable": {
                    "value": "mel_points",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "low_freq_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "high_freq_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2595 * math.log10(1 + config.fbank['rate'] / 2 / 700)",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "config.fbank['nfilt'] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_397": {
                "variable": {
                    "value": "bin_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(config.fbank['n_fft'] + 1) * hz_points / config.fbank['rate']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "fbank",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.fbank['nfilt'], int(math.floor(config.fbank['n_fft'] / 2 + 1)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_427": {
                "variable": {
                    "value": "emphasized_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_439": {
                "variable": {
                    "value": "mag_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stft(emphasized_data, n_fft=n_fft, hop_length=frame_step, win_length=frame_length, window=torch.hamming_window(frame_length).to(emphasized_data.device), pad_mode='constant')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_439": {
                "variable": {
                    "value": "mag_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_451": {
                "variable": {
                    "value": "filter_banks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / n_fft * mag_frames ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "fbank.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_585": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feat).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_585": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_405": {
                "variable": {
                    "value": "index_1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "f_m_minus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m - 1])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "f_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_406": {
                "variable": {
                    "value": "index_2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "f_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "f_m_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_453": {
                "input": {
                    "value": "filter_banks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(pow_frames, fbank.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "20 * torch.log10(filter_banks)",
                            "BinOp"
                        ],
                        [
                            "filter_banks - (torch.mean(filter_banks, dim=(0, 1), keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_454": {
                "input": {
                    "value": "filter_banks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(pow_frames, fbank.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "20 * torch.log10(filter_banks)",
                            "BinOp"
                        ],
                        [
                            "filter_banks - (torch.mean(filter_banks, dim=(0, 1), keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_495": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_496": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_646": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hyp['yseq']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_646": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_768": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_395": {
                "input": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "mel_points / 2595",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_413": {
                "type": {
                    "value": "'cuda:' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_662": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.recognize(ys, ys_mask, enc_output)",
                            "Call"
                        ],
                        [
                            "traced_decoder(ys, ys_mask, enc_output)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(lpz.shape[-1], int(beam * CTC_SCORING_RATIO))",
                            "Call"
                        ],
                        [
                            "lpz.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_672": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev']).cuda()",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_675": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev']).cuda()",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stft_440": {
                "input": {
                    "value": "emphasized_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(data).float()",
                            "Call"
                        ],
                        [
                            "emphasized_data.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.fbank['n_fft']",
                            "Subscript"
                        ]
                    ]
                },
                "hop_length": {
                    "value": "frame_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_stride * rate",
                            "BinOp"
                        ],
                        [
                            "int(frame_step)",
                            "Call"
                        ]
                    ]
                },
                "win_length": {
                    "value": "frame_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_size * rate",
                            "BinOp"
                        ],
                        [
                            "int(frame_length)",
                            "Call"
                        ]
                    ]
                },
                "window": {
                    "value": "torch.hamming_window(frame_length).to(emphasized_data.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad_mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trace_650": {
                "variable": {
                    "value": "traced_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder.recognize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_457": {
                "*size": {
                    "value": "[filter_banks.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "hamming_window_445": {
                "window_length": {
                    "value": "frame_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_size * rate",
                            "BinOp"
                        ],
                        [
                            "int(frame_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_669": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/asr_utils.py": {
        "torch": {
            "load_91": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_77": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_89": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/ctc.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.ctc_lo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromiter(hlens, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "olens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromiter((x.size(0) for x in ys), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "ys_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[y[y != self.ignore_id] for y in ys_pad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "CTCLoss_29": {
                "variable": {
                    "value": "self.ctc_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'sum' if reduce else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_95": {
                "input": {
                    "value": "self.ctc_lo(hs_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "input": {
                    "value": "self.ctc_lo(hs_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "input": {
                    "value": "hs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hs_pad",
                            "Method Argument"
                        ],
                        [
                            "hs_pad",
                            "Method Argument"
                        ],
                        [
                            "hs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/e2e_asr.py": {
        "torch": {
            "tensor_390": {
                "variable": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(int, hlens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_449": {
                "ndarray": {
                    "value": "np.array(x, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.frontend(to_torch_tensor(xs_pad), ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.enc(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "self.frontend(hs, ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(enhanced, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.frontend(xs_pad, ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(enhanced, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.enc(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "torch.tensor(list(map(int, hlens)))",
                            "Call"
                        ],
                        [
                            "self.frontend(to_torch_tensor(xs_pad), ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.enc(hs_pad, hlens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/e2e_asr_mix.py": {
        "torch": {
            "min_86": {
                "variable": {
                    "value": "(perm_loss, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([loss[0] + loss[3], loss[1] + loss[2]]) / self.num_spkrs",
                            "BinOp"
                        ],
                        [
                            "torch.stack([loss[0] + loss[4] + loss[8], loss[0] + loss[5] + loss[7], loss[1] + loss[5] + loss[6], loss[1] + loss[3] + loss[8], loss[2] + loss[3] + loss[7], loss[2] + loss[4] + loss[6]]) / self.num_spkrs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_104": {
                "variable": {
                    "value": "loss_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[0] for r in ret]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[r[1] for r in ret]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "input": {
                    "value": "loss_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([r[0] for r in ret], dim=0).to(losses.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_256": {
                "variable": {
                    "value": "loss_ctc_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ctc(hs_pad_sd[i // self.num_spkrs], hlens, ys_pad_sd[i % self.num_spkrs]) for i in range(self.num_spkrs ** 2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "ndarray": {
                    "value": "np.array(x, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "loss_ctc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ctc(hpad_sd[i // self.num_spkrs], hlens, ys_pad_sd[i % self.num_spkrs]) for i in range(self.num_spkrs ** 2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_471": {
                "variable": {
                    "value": "self.enc_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_472": {
                "modules": {
                    "value": "[RNNP(get_vgg2l_odim(idim, in_channel=in_channel), elayers_sd, eunits, eprojs, subsample[:elayers_sd + 1], dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_478": {
                "variable": {
                    "value": "self.enc_rec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNP(eprojs, elayers_rec, eunits, eprojs, subsample[elayers_sd:], dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "[loss[0] + loss[3], loss[1] + loss[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "ndarray": {
                    "value": "np.array(xx, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_79": {
                "tensors": {
                    "value": "[loss[0] + loss[4] + loss[8], loss[0] + loss[5] + loss[7], loss[1] + loss[5] + loss[6], loss[1] + loss[3] + loss[8], loss[2] + loss[3] + loss[7], loss[2] + loss[4] + loss[6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc(xs_pad, ilens)",
                            "Call"
                        ],
                        [
                            "self.enc(xpad, ilens)",
                            "Call"
                        ],
                        [
                            "self.enc(xs_pad, ilens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_314": {
                "data": {
                    "value": "tmp_word_ed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[editdistance.eval(hyp_words[ns // self.num_spkrs], ref_words[ns % self.num_spkrs]) for ns in range(self.num_spkrs ** 2)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_316": {
                "data": {
                    "value": "tmp_char_ed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[editdistance.eval(hyp_chars[ns // self.num_spkrs], ref_chars[ns % self.num_spkrs]) for ns in range(self.num_spkrs ** 2)]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/e2e_asr_transformer.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.uint8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_38": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_245": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feat).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hyp['yseq']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_310": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_326": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_337": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_340": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_314": {
                "variable": {
                    "value": "traced_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder.recognize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_334": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/e2e_tts_tacotron2.py": {
        "torch": {
            "arange_40": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(max(lengths))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_81": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses.masked_select(self.masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "guided_attn_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batches, max_olen, max_ilen)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "meshgrid_119": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(olen)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(ilen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_183": {
                "variable": {
                    "value": "cbhg_l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbhg_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cbhg_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.cbhg(after_outs, olens)",
                            "Call"
                        ],
                        [
                            "self.cbhg.inference(outs)",
                            "Call"
                        ],
                        [
                            "cbhg_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "spcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spcs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "spcs[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "spcs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_184": {
                "variable": {
                    "value": "cbhg_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbhg_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cbhg_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.cbhg(after_outs, olens)",
                            "Call"
                        ],
                        [
                            "self.cbhg.inference(outs)",
                            "Call"
                        ],
                        [
                            "cbhg_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "spcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spcs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "spcs[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "spcs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_230": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "self.dec(hs, hlens, ys)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "labels[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "labels[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "torch.tensor(self.bce_pos_weight, device=ys.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_487": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_487": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_561": {
                "variable": {
                    "value": "spemb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(spemb, dim=0).unsqueeze(0).expand(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_561": {
                "variable": {
                    "value": "spemb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, spemb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_119": {
                "start": {
                    "value": "ilen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ilen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_121": {
                "input": {
                    "value": "-(grid_y / ilen - grid_x / olen) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_228": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.dec(hs, hlens, ys)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_229": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.dec(hs, hlens, ys)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_589": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_589": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_590": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "self.bce_pos_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ys.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/e2e_tts_transformer.py": {
        "torch": {
            "mean_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses.masked_select(self.masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "self.prob_out(zs).view(zs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "labels[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "labels[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "torch.tensor(self.bce_pos_weight, device=ys.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_392": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim * args.reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_393": {
                "variable": {
                    "value": "self.prob_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.reduction_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "ys_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys.new_zeros((ys.shape[0], 1, ys.shape[2])), ys[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "EncoderPrenet(idim=idim, embed_dim=args.embed_dim, elayers=0, econv_layers=args.eprenet_conv_layers, econv_chans=args.eprenet_conv_chans, econv_filts=args.eprenet_conv_filts, use_batch_norm=args.use_batch_norm, dropout_rate=args.eprenet_dropout_rate, padding_idx=padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_340": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_363": {
                "variable": {
                    "value": "decoder_input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "DecoderPrenet(idim=odim, n_layers=args.dprenet_layers, n_units=args.dprenet_units, dropout_rate=args.dprenet_dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "self.encoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "args.initial_encoder_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "self.decoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "args.initial_decoder_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ys, outs[-1][-1].view(1, 1, self.odim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_96": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "hs.new_zeros(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "torch.cat((ys, outs[-1][-1].view(1, 1, self.odim)), dim=1)",
                            "Call"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_97": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "hs.new_zeros(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "torch.cat((ys, outs[-1][-1].view(1, 1, self.odim)), dim=1)",
                            "Call"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_531": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dict.items()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dict.items()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dict.items()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs + [self.feat_out(z).view(self.reduction_factor, self.odim)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=0).unsqueeze(0).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_617": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_617": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "probs + [torch.sigmoid(self.prob_out(z))[0]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "self.bce_pos_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ys.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_337": {
                "in_features": {
                    "value": "args.eprenet_conv_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "in_features": {
                    "value": "args.dprenet_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_607": {
                "input": {
                    "value": "self.prob_out(z)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/frontends/beamformer.py": {
        "torch": {
            "eye_64": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_n.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "psd_n.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "psd_n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/frontends/dnn_beamformer.py": {
        "torch": {
            "Linear_95": {
                "variable": {
                    "value": "self.mlp_psd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bidim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidim",
                            "Method Argument"
                        ],
                        [
                            "bidim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*data.size()[:-3] + (data.size(-2),)",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_113": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "psd_in.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "input": {
                    "value": "mlp_psd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_psd(psd_feat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/frontends/dnn_wpe.py": {
        "torch": {}
    },
    "ETESpeechRecognition/pytorch_backend/frontends/feature_transform.py": {
        "torch": {
            "matmul_123": {
                "variable": {
                    "value": "mel_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.melmat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_238": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_.pow(2).sum(dim=1) / ilens_[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(var, min=eps)",
                            "Call"
                        ],
                        [
                            "stats[(len(stats) - 1) // 2:-1] / count - mean * mean",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(ilens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_51": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.asarray(ilens)).to(x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "melmat.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "-mean.astype(np.float32)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "1 / std.astype(np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/frontends/frontend.py": {
        "torch": {
            "from_numpy_86": {
                "variable": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.asarray(ilens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_85": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(numpy.asarray(ilens)).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.wpe(h, ilens)",
                            "Call"
                        ],
                        [
                            "self.beamformer(h, ilens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/frontends/mask_estimator.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(projs, idim) for _ in range(nmask)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(xs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(mask, [0, input_length - mask.size(-1)], value=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_73": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(xs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(mask, [0, input_length - mask.size(-1)], value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, input_length - mask.size(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "projs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/nets_utils.py": {
        "torch": {
            "arange_61": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(max(lengths))",
                            "Call"
                        ],
                        [
                            "xs.size(length_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_pred.masked_select(mask) == pad_targets.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_range_expand >= seq_length_expand",
                            "Compare"
                        ],
                        [
                            "mask[ind].expand_as(xs).to(xs.device)",
                            "Call"
                        ],
                        [
                            "pad_targets != ignore_label",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_142": {
                "input": {
                    "value": "vi",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vidx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/rnn/attentions.py": {
        "torch": {
            "ModuleList_1385": {
                "variable": {
                    "value": "att_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_112": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_compute_enc_h * torch.tanh(self.mlp_dec(dec_z)).view(batch, 1, self.att_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_295": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.wvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_382": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_388": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(att_win, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_486": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_491": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "att_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_prev, w.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_515": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_516": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_517": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_519": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_583": {
                "variable": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "F.relu(att_conv)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(att_conv, (1, att_conv.size(3))).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(cov_vec.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_585": {
                "variable": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "F.relu(att_conv)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(att_conv, (1, att_conv.size(3))).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(cov_vec.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, att_conv.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_600": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_605": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_624": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_625": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_627": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_629": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_701": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_707": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_727": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_728": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_729": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_734": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_829": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_830": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_831": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_832": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_838": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_935": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_936": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_937": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_938": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_939": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_940": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_949": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_1062": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1063": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1064": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1065": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1066": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1067": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1077": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1182": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1183": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1184": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1185": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1187": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1252": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1258": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1263": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1284": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1285": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1286": {
                "variable": {
                    "value": "self.mlp_ta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eunits + dunits + odim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1287": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1288": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1290": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1357": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1363": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1368": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1371": {
                "variable": {
                    "value": "self.trans_agent_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_ta(torch.cat([c, out_prev, dec_z], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1437": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[:, -1] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * att_prev.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "self.pre_compute_enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_enc(self.enc_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_792": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_compute_k[h] * torch.tanh(self.mlp_q[h](dec_z)).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1440": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[-1] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_807": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_911": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1035": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1162": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1255": {
                "input": {
                    "value": "att_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / mask.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.to(self.enc_h)",
                            "Call"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.unsqueeze(1).expand(-1, self.att_win, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([att_prev, w.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "att_prev[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev_states[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_prev + [to_device(self, mask / mask.new(enc_hs_len).unsqueeze(-1))]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1258": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "w + [F.softmax(self.scaling * e, dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(att_prev + att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(self.trans_agent_prob * att_prev + (1 - self.trans_agent_prob) * att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_1360": {
                "input": {
                    "value": "att_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / mask.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.to(self.enc_h)",
                            "Call"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.unsqueeze(1).expand(-1, self.att_win, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([att_prev, w.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "att_prev[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev_states[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_prev + [to_device(self, mask / mask.new(enc_hs_len).unsqueeze(-1))]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1363": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "w + [F.softmax(self.scaling * e, dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(att_prev + att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(self.trans_agent_prob * att_prev + (1 - self.trans_agent_prob) * att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1443": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[0] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_112": {
                "input": {
                    "value": "self.mlp_dec(dec_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_731": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_732": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_733": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_775": {
                "input": {
                    "value": "self.mlp_k[h](self.enc_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_799": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_804": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_834": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_835": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_836": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_837": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_903": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_908": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_942": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_943": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_944": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_945": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_946": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_948": {
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1027": {
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1032": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1069": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1070": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1071": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1072": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1074": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * afilts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, afilts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1076": {
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1154": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1159": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1372": {
                "tensors": {
                    "value": "[c, out_prev, dec_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1451": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws_sorted_by_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws_sorted_by_head + [att_ws_head]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1454": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([aw[:, -1] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([aw[-1] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([aw[0] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(att_ws, dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(att_ws_sorted_by_head, dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "input": {
                    "value": "self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_285": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_376": {
                "input": {
                    "value": "cov_vec + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_480": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_594": {
                "input": {
                    "value": "att_h.unsqueeze(1) + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_695": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_792": {
                "input": {
                    "value": "self.mlp_q[h](dec_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_1246": {
                "input": {
                    "value": "self.pre_compute_enc_h + dec_z_tiled + att_conv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1351": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_1449": {
                "variable": {
                    "value": "att_ws_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[h] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_896": {
                "input": {
                    "value": "self.pre_compute_k[h] + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1019": {
                "input": {
                    "value": "self.pre_compute_k[h] + att_conv + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1146": {
                "input": {
                    "value": "self.pre_compute_k[h] + att_conv + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/rnn/decoders.py": {
        "torch": {
            "Embedding_59": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.dropout_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_all, dim=1).view(batch * olength, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_189": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(z_all)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys_out_pad.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "'mean'",
                            "str"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_470": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_495": {
                "variable": {
                    "value": "(local_best_scores, local_best_odims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores.view(batch, beam, self.odim)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_520": {
                "variable": {
                    "value": "(accum_best_scores, accum_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.zeros(batch, beam))",
                            "Call"
                        ],
                        [
                            "vscores.view(batch, beam, 1).repeat(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "(vscores + local_scores).view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "accum_best_scores",
                            "variable"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_646": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eys[:, i, :], att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_out, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eys[:, i, :], att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_300": {
                "variable": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys_out_pad.size(0)",
                            "Call"
                        ],
                        [
                            "len(hlens)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "index_select_532": {
                "variable": {
                    "value": "a_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w.view(n_bb, *att_w.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_549": {
                "variable": {
                    "value": "ctc_scores_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ctc_vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_odim_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_552": {
                "variable": {
                    "value": "ctc_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_prefix_score(hyp['yseq'], local_best_ids[0], hyp['ctc_state_prev'])",
                            "Call"
                        ],
                        [
                            "ctc_prefix_score(yseq, ctc_states_prev, accum_odim_ids)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ctc_states, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "ctc_states.view(n_bbo, 2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_554": {
                "variable": {
                    "value": "ctc_states_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_prefix_score(hyp['yseq'], local_best_ids[0], hyp['ctc_state_prev'])",
                            "Call"
                        ],
                        [
                            "ctc_prefix_score(yseq, ctc_states_prev, accum_odim_ids)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ctc_states, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "ctc_states.view(n_bbo, 2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ctc_vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_odim_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_555": {
                "variable": {
                    "value": "ctc_states_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_states_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_prefix_score.initial_state()",
                            "Call"
                        ],
                        [
                            "torch.index_select(ctc_states, 0, ctc_vidx).view(n_bb, 2, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ctc_states_prev, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_619": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_620": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_65": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_65": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_308": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(lpz.shape[-1], int(beam * CTC_SCORING_RATIO))",
                            "Call"
                        ],
                        [
                            "lpz.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_317": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * (ctc_scores - ctc_scores_prev)",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "np.full((n_bbo,), self.logzero)",
                            "Call"
                        ],
                        [
                            "to_device(self, torch.from_numpy(local_scores).float()).view(batch, beam, self.odim)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_320": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * (ctc_scores - ctc_scores_prev)",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "np.full((n_bbo,), self.logzero)",
                            "Call"
                        ],
                        [
                            "to_device(self, torch.from_numpy(local_scores).float()).view(batch, beam, self.odim)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_of_459": {
                "obj": {
                    "value": "next(self.parameters()).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_462": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys_out_pad.size(0)",
                            "Call"
                        ],
                        [
                            "len(hlens)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_bo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam * self.odim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_478": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_538": {
                "variable": {
                    "value": "a_prev_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w[0].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_539": {
                "variable": {
                    "value": "h_prev_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w[1][0].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_540": {
                "variable": {
                    "value": "c_prev_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w[1][1].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_542": {
                "input": {
                    "value": "z_list[li].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_543": {
                "input": {
                    "value": "c_list[li].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_70": {
                "input_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_70": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "self.labeldist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "(F.log_softmax(y_all, dim=1) * self.vlabeldist).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_297": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_503": {
                "ndarray": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * (ctc_scores - ctc_scores_prev)",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "np.full((n_bbo,), self.logzero)",
                            "Call"
                        ],
                        [
                            "to_device(self, torch.from_numpy(local_scores).float()).view(batch, beam, self.odim)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_535": {
                "input": {
                    "value": "att_w_one.view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_521": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(vscores, beam, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_217": {
                "input": {
                    "value": "y_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(z_all)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_522": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(vscores, beam, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "n_bo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam * self.odim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_523": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(vscores, beam, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/rnn/encoders.py": {
        "torch": {
            "pack_padded_sequence_118": {
                "variable": {
                    "value": "xs_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_126": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(xs_pack, hx=None if prev_state is None else prev_state[layer])",
                            "Call"
                        ],
                        [
                            "self.nbrnn(xs_pack, hx=prev_state)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_last(ys_pad.contiguous().view(-1, ys_pad.size(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_180": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_184": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_63": {
                "variable": {
                    "value": "xs_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_71": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(xs_pack, hx=None if prev_state is None else prev_state[layer])",
                            "Call"
                        ],
                        [
                            "self.nbrnn(xs_pack, hx=prev_state)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdim",
                            "Method Argument"
                        ],
                        [
                            "cdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_185": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_98": {
                "*args": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "GRU_100": {
                "*args": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "ModuleList_221": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNNP(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNN(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_234": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNP(idim, elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNN(idim, elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_35": {
                "*args": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_37": {
                "*args": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "2 * cdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "cdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdim",
                            "Method Argument"
                        ],
                        [
                            "cdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/streaming/segment.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._encoder_states[:seg_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "lpz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._ctc_posteriors[:seg_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/streaming/window.py": {
        "torch": {
            "cat_58": {
                "tensors": {
                    "value": "selected_windows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "self._ctc_posteriors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/tacotron2/cbhg.py": {
        "torch": {
            "ModuleList_53": {
                "variable": {
                    "value": "self.conv_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConstantPad1d((0, 1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv1d(self.conv_bank_chans * self.conv_bank_layers, self.conv_proj_chans, self.conv_proj_filts, stride=1, padding=(self.conv_proj_filts - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.highways",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_91": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.highway_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gru_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "convs + [self.conv_bank[k](xs)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(convs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.max_pool(convs)",
                            "Call"
                        ],
                        [
                            "self.projections(convs).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_125": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs.transpose(1, 2) + convs",
                            "BinOp"
                        ],
                        [
                            "self.highways[l](xs)",
                            "Call"
                        ],
                        [
                            "self._sort_by_length(xs, ilens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs, ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.gru(xs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True, total_length=total_length)",
                            "Call"
                        ],
                        [
                            "self._revert_sort_by_length(xs, ilens, sort_idx)",
                            "Call"
                        ],
                        [
                            "self.output(xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_by_length(xs, ilens)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True, total_length=total_length)",
                            "Call"
                        ],
                        [
                            "self._revert_sort_by_length(xs, ilens, sort_idx)",
                            "Call"
                        ],
                        [
                            "x.new([x.size(0)]).long()",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_128": {
                "variable": {
                    "value": "(xs, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs.transpose(1, 2) + convs",
                            "BinOp"
                        ],
                        [
                            "self.highways[l](xs)",
                            "Call"
                        ],
                        [
                            "self._sort_by_length(xs, ilens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs, ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.gru(xs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True, total_length=total_length)",
                            "Call"
                        ],
                        [
                            "self._revert_sort_by_length(xs, ilens, sort_idx)",
                            "Call"
                        ],
                        [
                            "self.output(xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, idim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, idim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_68": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool1d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "in_channels": {
                    "value": "self.conv_bank_chans * self.conv_bank_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_proj_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.conv_proj_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "num_features": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "in_channels": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_proj_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.conv_proj_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "num_features": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.highway_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "torch.nn.ConstantPad1d(padding, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_60": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "((k - 1) // 2, (k - 1) // 2 + 1)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_61": {
                "in_channels": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_bank_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(1, self.conv_bank_layers + 1)",
                            "Call"
                        ],
                        [
                            "k in range(self.conv_bank_layers)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "num_features": {
                    "value": "self.conv_bank_chans",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/tacotron2/decoder.py": {
        "torch": {
            "ModuleList_69": {
                "variable": {
                    "value": "self.prenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim * reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.prob_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "reduction_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_307": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "logits + [self.prob_out(zcs)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs + [self.feat_out(zcs).view(1, self.odim, -1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.output_activation_fn(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_309": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_459": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prenet[l](x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_210": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_292": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs + [self.feat_out(zcs).view(1, self.odim, -1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.output_activation_fn(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "probs + [torch.sigmoid(self.prob_out(zcs))[0]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "torch.nn.Linear(n_inputs, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, odim, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, odim, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_297": {
                "tensors": {
                    "value": "[z_list[-1], att_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "[z_list[-1], att_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim if layer == 0 else n_units",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, ochans, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, ochans, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_122": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "num_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_128": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_383": {
                "input": {
                    "value": "self.prob_out(zcs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_108": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ochans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_110": {
                "num_features": {
                    "value": "ochans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Tanh_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_115": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ochans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/tacotron2/encoder.py": {
        "torch": {
            "Embedding_56": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_107": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(0)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_110": {
                "variable": {
                    "value": "(xs, hlens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(xs).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs.transpose(1, 2), ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.blstm(xs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True)",
                            "Call"
                        ],
                        [
                            "xs + self.convs[l](xs)",
                            "BinOp"
                        ],
                        [
                            "self.convs[l](xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_78": {
                "variable": {
                    "value": "self.blstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, econv_chans, econv_filts, stride=1, padding=(econv_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, econv_chans, econv_filts, stride=1, padding=(econv_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim if layer == 0 else econv_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "econv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "econv_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(econv_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "num_features": {
                    "value": "econv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_70": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim if layer == 0 else econv_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "econv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "econv_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(econv_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/attention.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_v(value).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "v.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask, MIN_VALUE)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask, MIN_VALUE)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_q(query).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/decoder.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Embedding(odim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(odim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "input": {
                    "value": "self.output_layer(x_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "num_embeddings": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_53": {
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/decoder_layer.py": {
        "torch": {
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.concat_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.concat_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "tgt_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt, self.self_attn(tgt, tgt, tgt, tgt_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.src_attn(x, memory, memory, memory_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/embedding.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_19": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_20": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2, dtype=torch.float32) * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_22": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_23": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/encoder.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(idim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_47": {
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(idim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "num_embeddings": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/encoder_layer.py": {
        "torch": {
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.concat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.self_attn(x, x, x, mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/label_smoothing_loss.py": {
        "torch": {
            "KLDivLoss_15": {
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/layer_norm.py": {
        "torch": {}
    },
    "ETESpeechRecognition/pytorch_backend/transformer/optimizer.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/positionwise_feed_forward.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_8": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_9": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/pytorch_backend/transformer/repeat.py": {
        "torch": {}
    },
    "ETESpeechRecognition/pytorch_backend/transformer/subsampling.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, odim, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(odim * (((idim - 1) // 2 - 1) // 2), odim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "odim * (((idim - 1) // 2 - 1) // 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ETESpeechRecognition/test.py": {
        "torch": {
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.test_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2E(idim=80, odim=5002, args=args, char_list=char_list)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_22": {
                "dataset": {
                    "value": "DataLoaderRecog()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.test_param['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.test_param['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ETESpeechRecognition/train.py": {
        "torch": {
            "DataParallel_121": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2E(idim=80, odim=5002, args=config.ModelArgs())",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_127": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume['model_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "dataset": {
                    "value": "DataLoaderTrain()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.train_param['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.train_param['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch_i, 'Losses': [all_loss, all_loss_att, all_loss_ctc], 'datetime': str(datetime.time(datetime.now()))}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/dataloader.py": {
        "torch": {
            "cat_158": {
                "variable": {
                    "value": "all_token_id",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_token_id, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "all_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_audio, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "all_token_id[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "all_token_id[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, max_y - all_token_id[all_token_id_i].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "all_token_id[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_151": {
                "variable": {
                    "value": "all_audio[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "all_audio[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, max_audio - all_audio[all_token_id_i].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "all_audio[all_token_id_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(path)",
                            "Call"
                        ],
                        [
                            "batch",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/main.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/model.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.uint8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_38": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_395": {
                "variable": {
                    "value": "mel_points",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "low_freq_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "high_freq_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2595 * math.log10(1 + config.fbank['rate'] / 2 / 700)",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "config.fbank['nfilt'] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_398": {
                "variable": {
                    "value": "bin_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(config.fbank['n_fft'] + 1) * hz_points / config.fbank['rate']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "fbank",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.fbank['nfilt'], int(math.floor(config.fbank['n_fft'] / 2 + 1)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_431": {
                "variable": {
                    "value": "emphasized_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_443": {
                "variable": {
                    "value": "mag_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stft(emphasized_data, n_fft=n_fft, hop_length=frame_step, win_length=frame_length, window=torch.hamming_window(frame_length).to(emphasized_data.device), pad_mode='constant')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_443": {
                "variable": {
                    "value": "mag_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_455": {
                "variable": {
                    "value": "filter_banks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / n_fft * mag_frames ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "fbank.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_590": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feat).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_590": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_406": {
                "variable": {
                    "value": "index_1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "f_m_minus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m - 1])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "f_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_407": {
                "variable": {
                    "value": "index_2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "f_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m])",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "f_m_plus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(bin_[m + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_457": {
                "input": {
                    "value": "filter_banks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(pow_frames, fbank.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "20 * torch.log10(filter_banks)",
                            "BinOp"
                        ],
                        [
                            "filter_banks - (torch.mean(filter_banks, dim=(0, 1), keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_458": {
                "input": {
                    "value": "filter_banks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(pow_frames, fbank.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "20 * torch.log10(filter_banks)",
                            "BinOp"
                        ],
                        [
                            "filter_banks - (torch.mean(filter_banks, dim=(0, 1), keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_499": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_500": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_651": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hyp['yseq']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_651": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_773": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_396": {
                "input": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "mel_points / 2595",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_667": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.recognize(ys, ys_mask, enc_output)",
                            "Call"
                        ],
                        [
                            "traced_decoder(ys, ys_mask, enc_output)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(lpz.shape[-1], int(beam * CTC_SCORING_RATIO))",
                            "Call"
                        ],
                        [
                            "lpz.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_677": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev']).cuda()",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_680": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev']).cuda()",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_415": {
                "type": {
                    "value": "'cuda:' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_417": {
                "type": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_444": {
                "input": {
                    "value": "emphasized_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(data).float()",
                            "Call"
                        ],
                        [
                            "emphasized_data.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.fbank['n_fft']",
                            "Subscript"
                        ]
                    ]
                },
                "hop_length": {
                    "value": "frame_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_stride * rate",
                            "BinOp"
                        ],
                        [
                            "int(frame_step)",
                            "Call"
                        ]
                    ]
                },
                "win_length": {
                    "value": "frame_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_size * rate",
                            "BinOp"
                        ],
                        [
                            "int(frame_length)",
                            "Call"
                        ]
                    ]
                },
                "window": {
                    "value": "torch.hamming_window(frame_length).to(emphasized_data.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad_mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trace_655": {
                "variable": {
                    "value": "traced_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder.recognize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_461": {
                "*size": {
                    "value": "[filter_banks.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "hamming_window_449": {
                "window_length": {
                    "value": "frame_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_size * rate",
                            "BinOp"
                        ],
                        [
                            "int(frame_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_674": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/asr_utils.py": {
        "torch": {
            "load_91": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_77": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_89": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/ctc.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.ctc_lo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromiter(hlens, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "olens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromiter((x.size(0) for x in ys), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "ys_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[y[y != self.ignore_id] for y in ys_pad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "CTCLoss_29": {
                "variable": {
                    "value": "self.ctc_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'sum' if reduce else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_95": {
                "input": {
                    "value": "self.ctc_lo(hs_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "input": {
                    "value": "self.ctc_lo(hs_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "input": {
                    "value": "hs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hs_pad",
                            "Method Argument"
                        ],
                        [
                            "hs_pad",
                            "Method Argument"
                        ],
                        [
                            "hs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/e2e_asr.py": {
        "torch": {
            "tensor_390": {
                "variable": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(int, hlens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_449": {
                "ndarray": {
                    "value": "np.array(x, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.frontend(to_torch_tensor(xs_pad), ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.enc(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "self.frontend(hs, ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(enhanced, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.frontend(xs_pad, ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(enhanced, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.enc(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "torch.tensor(list(map(int, hlens)))",
                            "Call"
                        ],
                        [
                            "self.frontend(to_torch_tensor(xs_pad), ilens)",
                            "Call"
                        ],
                        [
                            "self.feature_transform(hs_pad, hlens)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "variable"
                        ],
                        [
                            "self.enc(hs_pad, hlens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/e2e_asr_mix.py": {
        "torch": {
            "min_86": {
                "variable": {
                    "value": "(perm_loss, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([loss[0] + loss[3], loss[1] + loss[2]]) / self.num_spkrs",
                            "BinOp"
                        ],
                        [
                            "torch.stack([loss[0] + loss[4] + loss[8], loss[0] + loss[5] + loss[7], loss[1] + loss[5] + loss[6], loss[1] + loss[3] + loss[8], loss[2] + loss[3] + loss[7], loss[2] + loss[4] + loss[6]]) / self.num_spkrs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_104": {
                "variable": {
                    "value": "loss_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[0] for r in ret]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[r[1] for r in ret]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "input": {
                    "value": "loss_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([r[0] for r in ret], dim=0).to(losses.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_256": {
                "variable": {
                    "value": "loss_ctc_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ctc(hs_pad_sd[i // self.num_spkrs], hlens, ys_pad_sd[i % self.num_spkrs]) for i in range(self.num_spkrs ** 2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "ndarray": {
                    "value": "np.array(x, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "loss_ctc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ctc(hpad_sd[i // self.num_spkrs], hlens, ys_pad_sd[i % self.num_spkrs]) for i in range(self.num_spkrs ** 2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_471": {
                "variable": {
                    "value": "self.enc_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_472": {
                "modules": {
                    "value": "[RNNP(get_vgg2l_odim(idim, in_channel=in_channel), elayers_sd, eunits, eprojs, subsample[:elayers_sd + 1], dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_478": {
                "variable": {
                    "value": "self.enc_rec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNP(eprojs, elayers_rec, eunits, eprojs, subsample[elayers_sd:], dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "[loss[0] + loss[3], loss[1] + loss[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "ndarray": {
                    "value": "np.array(xx, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_79": {
                "tensors": {
                    "value": "[loss[0] + loss[4] + loss[8], loss[0] + loss[5] + loss[7], loss[1] + loss[5] + loss[6], loss[1] + loss[3] + loss[8], loss[2] + loss[3] + loss[7], loss[2] + loss[4] + loss[6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "hlens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc(xs_pad, ilens)",
                            "Call"
                        ],
                        [
                            "self.enc(xpad, ilens)",
                            "Call"
                        ],
                        [
                            "self.enc(xs_pad, ilens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_314": {
                "data": {
                    "value": "tmp_word_ed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[editdistance.eval(hyp_words[ns // self.num_spkrs], ref_words[ns % self.num_spkrs]) for ns in range(self.num_spkrs ** 2)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_316": {
                "data": {
                    "value": "tmp_char_ed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[editdistance.eval(hyp_chars[ns // self.num_spkrs], ref_chars[ns % self.num_spkrs]) for ns in range(self.num_spkrs ** 2)]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/e2e_asr_transformer.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.uint8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tril_38": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_245": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feat).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hyp['yseq']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_310": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_326": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_337": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_340": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_314": {
                "variable": {
                    "value": "traced_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder.recognize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_334": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/e2e_tts_tacotron2.py": {
        "torch": {
            "arange_40": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(max(lengths))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_81": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses.masked_select(self.masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "guided_attn_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batches, max_olen, max_ilen)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "meshgrid_119": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(olen)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(ilen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_183": {
                "variable": {
                    "value": "cbhg_l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbhg_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cbhg_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.cbhg(after_outs, olens)",
                            "Call"
                        ],
                        [
                            "self.cbhg.inference(outs)",
                            "Call"
                        ],
                        [
                            "cbhg_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "spcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spcs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "spcs[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "spcs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_184": {
                "variable": {
                    "value": "cbhg_mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbhg_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cbhg_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.cbhg(after_outs, olens)",
                            "Call"
                        ],
                        [
                            "self.cbhg.inference(outs)",
                            "Call"
                        ],
                        [
                            "cbhg_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "spcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spcs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "spcs[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "spcs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_230": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "self.dec(hs, hlens, ys)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "labels[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "labels[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "torch.tensor(self.bce_pos_weight, device=ys.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_487": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_487": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_561": {
                "variable": {
                    "value": "spemb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(spemb, dim=0).unsqueeze(0).expand(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_561": {
                "variable": {
                    "value": "spemb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, spemb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_119": {
                "start": {
                    "value": "ilen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ilen",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_121": {
                "input": {
                    "value": "-(grid_y / ilen - grid_x / olen) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_228": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.dec(hs, hlens, ys)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_229": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.dec(hs, hlens, ys)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_out]",
                            "Subscript"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_586": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_589": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_589": {
                "variable": {
                    "value": "spembs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_590": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "self.bce_pos_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ys.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/e2e_tts_transformer.py": {
        "torch": {
            "mean_50": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses.masked_select(self.masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "self.prob_out(zs).view(zs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.masked_select(mask[:, :, 0])",
                            "Call"
                        ],
                        [
                            "labels[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "labels[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "torch.tensor(self.bce_pos_weight, device=ys.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_392": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim * args.reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_393": {
                "variable": {
                    "value": "self.prob_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.reduction_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "ys_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys.new_zeros((ys.shape[0], 1, ys.shape[2])), ys[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "EncoderPrenet(idim=idim, embed_dim=args.embed_dim, elayers=0, econv_layers=args.eprenet_conv_layers, econv_chans=args.eprenet_conv_chans, econv_filts=args.eprenet_conv_filts, use_batch_norm=args.use_batch_norm, dropout_rate=args.eprenet_dropout_rate, padding_idx=padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_340": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_363": {
                "variable": {
                    "value": "decoder_input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "DecoderPrenet(idim=odim, n_layers=args.dprenet_layers, n_units=args.dprenet_units, dropout_rate=args.dprenet_dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "self.encoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "args.initial_encoder_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "self.decoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "args.initial_decoder_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ys, outs[-1][-1].view(1, 1, self.odim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_96": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "hs.new_zeros(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "torch.cat((ys, outs[-1][-1].view(1, 1, self.odim)), dim=1)",
                            "Call"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_97": {
                "input": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_outs.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "self.feat_out(zs).view(zs.size(0), -1, self.odim)",
                            "Call"
                        ],
                        [
                            "before_outs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "ys[:, :max_olen]",
                            "Subscript"
                        ],
                        [
                            "hs.new_zeros(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "torch.cat((ys, outs[-1][-1].view(1, 1, self.odim)), dim=1)",
                            "Call"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_531": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dict.items()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dict.items()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_dict.items()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs + [self.feat_out(z).view(self.reduction_factor, self.odim)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=0).unsqueeze(0).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_617": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_617": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "probs + [torch.sigmoid(self.prob_out(z))[0]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "self.bce_pos_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ys.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_337": {
                "in_features": {
                    "value": "args.eprenet_conv_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "in_features": {
                    "value": "args.dprenet_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_607": {
                "input": {
                    "value": "self.prob_out(z)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/frontends/beamformer.py": {
        "torch": {
            "eye_64": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_n.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "psd_n.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "psd_n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/frontends/dnn_beamformer.py": {
        "torch": {
            "Linear_95": {
                "variable": {
                    "value": "self.mlp_psd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bidim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidim",
                            "Method Argument"
                        ],
                        [
                            "bidim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*data.size()[:-3] + (data.size(-2),)",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_113": {
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "psd_in.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "input": {
                    "value": "mlp_psd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_psd(psd_feat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/frontends/dnn_wpe.py": {
        "torch": {}
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/frontends/feature_transform.py": {
        "torch": {
            "matmul_123": {
                "variable": {
                    "value": "mel_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.melmat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_238": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_.pow(2).sum(dim=1) / ilens_[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(var, min=eps)",
                            "Call"
                        ],
                        [
                            "stats[(len(stats) - 1) // 2:-1] / count - mean * mean",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(ilens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_51": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.asarray(ilens)).to(x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "melmat.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "-mean.astype(np.float32)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "ndarray": {
                    "value": "1 / std.astype(np.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/frontends/frontend.py": {
        "torch": {
            "from_numpy_86": {
                "variable": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.asarray(ilens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_85": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(numpy.asarray(ilens)).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.wpe(h, ilens)",
                            "Call"
                        ],
                        [
                            "self.beamformer(h, ilens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/frontends/mask_estimator.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(projs, idim) for _ in range(nmask)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(xs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(mask, [0, input_length - mask.size(-1)], value=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_73": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(xs)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(mask, [0, input_length - mask.size(-1)], value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, input_length - mask.size(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "projs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/nets_utils.py": {
        "torch": {
            "arange_61": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(max(lengths))",
                            "Call"
                        ],
                        [
                            "xs.size(length_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_pred.masked_select(mask) == pad_targets.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_range_expand >= seq_length_expand",
                            "Compare"
                        ],
                        [
                            "mask[ind].expand_as(xs).to(xs.device)",
                            "Call"
                        ],
                        [
                            "pad_targets != ignore_label",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_142": {
                "input": {
                    "value": "vi",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vidx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/rnn/attentions.py": {
        "torch": {
            "ModuleList_1385": {
                "variable": {
                    "value": "att_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_112": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_compute_enc_h * torch.tanh(self.mlp_dec(dec_z)).view(batch, 1, self.att_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_291": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_295": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.wvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_382": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_388": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(att_win, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_486": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_491": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "att_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_prev, w.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_515": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_516": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_517": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_519": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_583": {
                "variable": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "F.relu(att_conv)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(att_conv, (1, att_conv.size(3))).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(cov_vec.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_585": {
                "variable": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "F.relu(att_conv)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(att_conv, (1, att_conv.size(3))).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(cov_vec.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, att_conv.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_600": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_605": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_624": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_625": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_627": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_629": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_701": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_707": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_727": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_728": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_729": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_734": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_829": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_830": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_831": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_832": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_838": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_935": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_936": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_937": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_938": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_939": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_940": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_949": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_1062": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1063": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1064": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1065": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1066": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1067": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1077": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1182": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1183": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1184": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1185": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1187": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1252": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1258": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1263": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1284": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1285": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1286": {
                "variable": {
                    "value": "self.mlp_ta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eunits + dunits + odim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1287": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1288": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1290": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ],
                        [
                            "att_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1357": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1363": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1368": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1371": {
                "variable": {
                    "value": "self.trans_agent_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_ta(torch.cat([c, out_prev, dec_z], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1437": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[:, -1] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * att_prev.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "self.pre_compute_enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_enc(self.enc_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_792": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_compute_k[h] * torch.tanh(self.mlp_q[h](dec_z)).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1440": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[-1] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_807": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_911": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1035": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1162": {
                "tensors": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1255": {
                "input": {
                    "value": "att_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / mask.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.to(self.enc_h)",
                            "Call"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.unsqueeze(1).expand(-1, self.att_win, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([att_prev, w.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "att_prev[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev_states[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_prev + [to_device(self, mask / mask.new(enc_hs_len).unsqueeze(-1))]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1258": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "w + [F.softmax(self.scaling * e, dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(att_prev + att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(self.trans_agent_prob * att_prev + (1 - self.trans_agent_prob) * att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_1360": {
                "input": {
                    "value": "att_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask / mask.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.to(self.enc_h)",
                            "Call"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.unsqueeze(1).expand(-1, self.att_win, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([att_prev, w.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "att_prev[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev_states[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_prev + [to_device(self, mask / mask.new(enc_hs_len).unsqueeze(-1))]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ],
                        [
                            "att_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1363": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "w + [F.softmax(self.scaling * e, dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(att_prev + att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(self.trans_agent_prob * att_prev + (1 - self.trans_agent_prob) * att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1443": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[0] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_112": {
                "input": {
                    "value": "self.mlp_dec(dec_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_731": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_732": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_733": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_775": {
                "input": {
                    "value": "self.mlp_k[h](self.enc_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_799": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_804": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_834": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_835": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_836": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_837": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_903": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_908": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_942": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_943": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_944": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_945": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_946": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_948": {
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1027": {
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1032": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1069": {
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ],
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1070": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1071": {
                "in_features": {
                    "value": "eprojs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ],
                        [
                            "eprojs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ],
                        [
                            "att_dim_v",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1072": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1074": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * afilts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, afilts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1076": {
                "in_features": {
                    "value": "aconv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ],
                        [
                            "aconv_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ],
                        [
                            "att_dim_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1154": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1159": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1372": {
                "tensors": {
                    "value": "[c, out_prev, dec_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1451": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws_sorted_by_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws_sorted_by_head + [att_ws_head]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1454": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([aw[:, -1] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([aw[-1] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([aw[0] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(att_ws, dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(att_ws_sorted_by_head, dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "att_ws",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "input": {
                    "value": "self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_285": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_376": {
                "input": {
                    "value": "cov_vec + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_480": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_594": {
                "input": {
                    "value": "att_h.unsqueeze(1) + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_695": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_792": {
                "input": {
                    "value": "self.mlp_q[h](dec_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_1246": {
                "input": {
                    "value": "self.pre_compute_enc_h + dec_z_tiled + att_conv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1351": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_1449": {
                "variable": {
                    "value": "att_ws_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[h] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_896": {
                "input": {
                    "value": "self.pre_compute_k[h] + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1019": {
                "input": {
                    "value": "self.pre_compute_k[h] + att_conv + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1146": {
                "input": {
                    "value": "self.pre_compute_k[h] + att_conv + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/rnn/decoders.py": {
        "torch": {
            "Embedding_59": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.dropout_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_all, dim=1).view(batch * olength, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_189": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(z_all)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys_out_pad.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "'mean'",
                            "str"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_470": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_495": {
                "variable": {
                    "value": "(local_best_scores, local_best_odims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores.view(batch, beam, self.odim)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_520": {
                "variable": {
                    "value": "(accum_best_scores, accum_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.zeros(batch, beam))",
                            "Call"
                        ],
                        [
                            "vscores.view(batch, beam, 1).repeat(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "(vscores + local_scores).view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "accum_best_scores",
                            "variable"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_646": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eys[:, i, :], att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_out, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eys[:, i, :], att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "ey",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_300": {
                "variable": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys_out_pad.size(0)",
                            "Call"
                        ],
                        [
                            "len(hlens)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "index_select_532": {
                "variable": {
                    "value": "a_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w.view(n_bb, *att_w.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_549": {
                "variable": {
                    "value": "ctc_scores_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_scores.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ctc_vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_odim_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_552": {
                "variable": {
                    "value": "ctc_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_prefix_score(hyp['yseq'], local_best_ids[0], hyp['ctc_state_prev'])",
                            "Call"
                        ],
                        [
                            "ctc_prefix_score(yseq, ctc_states_prev, accum_odim_ids)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ctc_states, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "ctc_states.view(n_bbo, 2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_554": {
                "variable": {
                    "value": "ctc_states_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_prefix_score(hyp['yseq'], local_best_ids[0], hyp['ctc_state_prev'])",
                            "Call"
                        ],
                        [
                            "ctc_prefix_score(yseq, ctc_states_prev, accum_odim_ids)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ctc_states, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "ctc_states.view(n_bbo, 2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ctc_vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_odim_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_555": {
                "variable": {
                    "value": "ctc_states_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctc_states_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_prefix_score.initial_state()",
                            "Call"
                        ],
                        [
                            "torch.index_select(ctc_states, 0, ctc_vidx).view(n_bb, 2, -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(ctc_states_prev, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_619": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_620": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_65": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_65": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_308": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(lpz.shape[-1], int(beam * CTC_SCORING_RATIO))",
                            "Call"
                        ],
                        [
                            "lpz.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_317": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * (ctc_scores - ctc_scores_prev)",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "np.full((n_bbo,), self.logzero)",
                            "Call"
                        ],
                        [
                            "to_device(self, torch.from_numpy(local_scores).float()).view(batch, beam, self.odim)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_320": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * (ctc_scores - ctc_scores_prev)",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "np.full((n_bbo,), self.logzero)",
                            "Call"
                        ],
                        [
                            "to_device(self, torch.from_numpy(local_scores).float()).view(batch, beam, self.odim)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "*size": {
                    "value": "n_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_of_459": {
                "obj": {
                    "value": "next(self.parameters()).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_462": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys_out_pad.size(0)",
                            "Call"
                        ],
                        [
                            "len(hlens)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_bo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam * self.odim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_478": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_538": {
                "variable": {
                    "value": "a_prev_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w[0].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_539": {
                "variable": {
                    "value": "h_prev_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w[1][0].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_540": {
                "variable": {
                    "value": "c_prev_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w[1][1].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_542": {
                "input": {
                    "value": "z_list[li].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_543": {
                "input": {
                    "value": "c_list[li].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_70": {
                "input_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_70": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dunits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "self.labeldist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "(F.log_softmax(y_all, dim=1) * self.vlabeldist).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_297": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_503": {
                "ndarray": {
                    "value": "local_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "variable"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, n_bo)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * (ctc_scores - ctc_scores_prev)",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "np.full((n_bbo,), self.logzero)",
                            "Call"
                        ],
                        [
                            "to_device(self, torch.from_numpy(local_scores).float()).view(batch, beam, self.odim)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_535": {
                "input": {
                    "value": "att_w_one.view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_521": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(vscores, beam, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_217": {
                "input": {
                    "value": "y_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output(z_all)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_522": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(vscores, beam, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "n_bo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam * self.odim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_523": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(vscores, beam, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/rnn/encoders.py": {
        "torch": {
            "pack_padded_sequence_118": {
                "variable": {
                    "value": "xs_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_126": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(xs_pack, hx=None if prev_state is None else prev_state[layer])",
                            "Call"
                        ],
                        [
                            "self.nbrnn(xs_pack, hx=prev_state)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_last(ys_pad.contiguous().view(-1, ys_pad.size(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_180": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_184": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_63": {
                "variable": {
                    "value": "xs_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ],
                        [
                            "xs_pad",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_71": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(xs_pack, hx=None if prev_state is None else prev_state[layer])",
                            "Call"
                        ],
                        [
                            "self.nbrnn(xs_pack, hx=prev_state)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdim",
                            "Method Argument"
                        ],
                        [
                            "cdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_185": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "pad_packed_sequence(ys, batch_first=True)",
                            "Call"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ],
                        [
                            "module(xs_pad, ilens, prev_state=prev_state)",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_98": {
                "*args": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "GRU_100": {
                "*args": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "ModuleList_221": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNNP(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNN(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_234": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNP(idim, elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNN(idim, elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_35": {
                "*args": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_37": {
                "*args": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "2 * cdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "cdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cdim",
                            "Method Argument"
                        ],
                        [
                            "cdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hdim",
                            "Method Argument"
                        ],
                        [
                            "hdim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/streaming/segment.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._encoder_states[:seg_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "lpz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._ctc_posteriors[:seg_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/streaming/window.py": {
        "torch": {
            "cat_58": {
                "tensors": {
                    "value": "selected_windows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "self._ctc_posteriors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/tacotron2/cbhg.py": {
        "torch": {
            "ModuleList_53": {
                "variable": {
                    "value": "self.conv_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConstantPad1d((0, 1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv1d(self.conv_bank_chans * self.conv_bank_layers, self.conv_proj_chans, self.conv_proj_filts, stride=1, padding=(self.conv_proj_filts - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.highways",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_91": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.highway_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gru_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "convs + [self.conv_bank[k](xs)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(convs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.max_pool(convs)",
                            "Call"
                        ],
                        [
                            "self.projections(convs).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_125": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs.transpose(1, 2) + convs",
                            "BinOp"
                        ],
                        [
                            "self.highways[l](xs)",
                            "Call"
                        ],
                        [
                            "self._sort_by_length(xs, ilens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs, ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.gru(xs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True, total_length=total_length)",
                            "Call"
                        ],
                        [
                            "self._revert_sort_by_length(xs, ilens, sort_idx)",
                            "Call"
                        ],
                        [
                            "self.output(xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_by_length(xs, ilens)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True, total_length=total_length)",
                            "Call"
                        ],
                        [
                            "self._revert_sort_by_length(xs, ilens, sort_idx)",
                            "Call"
                        ],
                        [
                            "x.new([x.size(0)]).long()",
                            "Call"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ],
                        [
                            "ilens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_128": {
                "variable": {
                    "value": "(xs, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs.transpose(1, 2) + convs",
                            "BinOp"
                        ],
                        [
                            "self.highways[l](xs)",
                            "Call"
                        ],
                        [
                            "self._sort_by_length(xs, ilens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs, ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.gru(xs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True, total_length=total_length)",
                            "Call"
                        ],
                        [
                            "self._revert_sort_by_length(xs, ilens, sort_idx)",
                            "Call"
                        ],
                        [
                            "self.output(xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, idim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, idim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_68": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool1d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "in_channels": {
                    "value": "self.conv_bank_chans * self.conv_bank_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_proj_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.conv_proj_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "num_features": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "in_channels": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_proj_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.conv_proj_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "num_features": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.highway_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "torch.nn.ConstantPad1d(padding, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_60": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "((k - 1) // 2, (k - 1) // 2 + 1)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_61": {
                "in_channels": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ],
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_bank_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(1, self.conv_bank_layers + 1)",
                            "Call"
                        ],
                        [
                            "k in range(self.conv_bank_layers)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "num_features": {
                    "value": "self.conv_bank_chans",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/tacotron2/decoder.py": {
        "torch": {
            "ModuleList_69": {
                "variable": {
                    "value": "self.prenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim * reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.prob_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "reduction_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_307": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "logits + [self.prob_out(zcs)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "before_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs + [self.feat_out(zcs).view(1, self.odim, -1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.output_activation_fn(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_309": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_459": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prenet[l](x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_210": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_292": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outs + [self.feat_out(zcs).view(1, self.odim, -1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.output_activation_fn(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "probs + [torch.sigmoid(self.prob_out(zcs))[0]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "torch.nn.Linear(n_inputs, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, odim, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, odim, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_297": {
                "tensors": {
                    "value": "[z_list[-1], att_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "[z_list[-1], att_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim if layer == 0 else n_units",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, ochans, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, ochans, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_122": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "num_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_128": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ],
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_383": {
                "input": {
                    "value": "self.prob_out(zcs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_108": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ochans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_110": {
                "num_features": {
                    "value": "ochans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Tanh_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_115": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ochans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/tacotron2/encoder.py": {
        "torch": {
            "Embedding_56": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_107": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(0)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_110": {
                "variable": {
                    "value": "(xs, hlens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(xs).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs.transpose(1, 2), ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.blstm(xs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(xs, batch_first=True)",
                            "Call"
                        ],
                        [
                            "xs + self.convs[l](xs)",
                            "BinOp"
                        ],
                        [
                            "self.convs[l](xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_78": {
                "variable": {
                    "value": "self.blstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "iunits",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, econv_chans, econv_filts, stride=1, padding=(econv_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, econv_chans, econv_filts, stride=1, padding=(econv_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim if layer == 0 else econv_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "econv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "econv_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(econv_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "num_features": {
                    "value": "econv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_70": {
                "in_channels": {
                    "value": "ichans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim if layer == 0 else econv_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "econv_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "econv_filts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(econv_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/attention.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_v(value).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "v.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask, MIN_VALUE)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask, MIN_VALUE)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_q(query).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/decoder.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Embedding(odim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(odim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_124": {
                "input": {
                    "value": "self.output_layer(x_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "num_embeddings": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_53": {
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/decoder_layer.py": {
        "torch": {
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.concat_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.concat_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "tgt_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt, self.self_attn(tgt, tgt, tgt, tgt_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.src_attn(x, memory, memory, memory_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/embedding.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_19": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ],
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_20": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2, dtype=torch.float32) * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_22": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_23": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_20": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/encoder.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(idim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_47": {
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(idim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "num_embeddings": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/encoder_layer.py": {
        "torch": {
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.concat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.self_attn(x, x, x, mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/label_smoothing_loss.py": {
        "torch": {
            "KLDivLoss_15": {
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/layer_norm.py": {
        "torch": {}
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/optimizer.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/positionwise_feed_forward.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_8": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_9": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/repeat.py": {
        "torch": {}
    },
    "Oracle/ETESpeechRecognition/pytorch_backend/transformer/subsampling.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, odim, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(odim * (((idim - 1) // 2 - 1) // 2), odim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "odim * (((idim - 1) // 2 - 1) // 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "odim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/test.py": {
        "torch": {
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.test_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2E(idim=80, odim=5002, args=args, char_list=char_list)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_22": {
                "dataset": {
                    "value": "DataLoaderRecog()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.test_param['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.test_param['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/ETESpeechRecognition/train.py": {
        "torch": {
            "DataParallel_121": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "E2E(idim=80, odim=5002, args=config.ModelArgs())",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_127": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume['model_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "dataset": {
                    "value": "DataLoaderTrain()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.train_param['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.train_param['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch_i, 'Losses': [all_loss, all_loss_att, all_loss_ctc], 'datetime': str(datetime.time(datetime.now()))}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/conv_tasnet.py": {
        "torch": {
            "Conv1d_95": {
                "variable": {
                    "value": "self.conv1d_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "L // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mixture, 1)",
                            "Call"
                        ],
                        [
                            "mixture",
                            "Method Argument"
                        ],
                        [
                            "mixture",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1d_U(mixture)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_116": {
                "variable": {
                    "value": "self.basis_signals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "L // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "source_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mixture_w, 1) * est_mask",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(source_w, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "temporal_conv_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*repeats",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_187": {
                "variable": {
                    "value": "mask_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_222": {
                "variable": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_223": {
                "variable": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_252": {
                "variable": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(P - 1) * dilation if causal else (P - 1) * dilation // 2",
                            "IfExp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** x",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_258": {
                "variable": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_261": {
                "variable": {
                    "value": "pointwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_333": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "var_334": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_344": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_345": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_361": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_361": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "self.asr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "ASR(idim=80, odim=5002, args=asrConfig.ModelArgs(), get_features=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "asr_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[asr_features[0:target.shape[0]].unsqueeze(1), asr_features[target.shape[0]:].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_162": {
                "variable": {
                    "value": "bottleneck_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N + 256 * C",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_168": {
                "variable": {
                    "value": "bottleneck_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mixture_w, asr_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(mixture_w)",
                            "Call"
                        ],
                        [
                            "score.view(M, self.C, N, K)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "input": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(mixture)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1d_U(mixture))",
                            "Call"
                        ],
                        [
                            "torch.cat([mixture_w, asr_features], dim=1)",
                            "Call"
                        ],
                        [
                            "mixture_w",
                            "Method Argument"
                        ],
                        [
                            "mixture_w",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_211": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(mixture_w)",
                            "Call"
                        ],
                        [
                            "score.view(M, self.C, N, K)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_309": {
                "num_features": {
                    "value": "channel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_size",
                            "Method Argument"
                        ],
                        [
                            "channel_size",
                            "Method Argument"
                        ],
                        [
                            "channel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "(target[:, 0], target[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pow_335": {
                "input": {
                    "value": "var + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_362": {
                "input": {
                    "value": "var + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/dataloader.py": {
        "torch": {}
    },
    "Oracle/domainTranslation.py": {
        "torch": {
            "Conv1d_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(filter_size=7, dilation=1, num_filters=256, input_filters=config.num_features, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.view([batch_size * num_speakers, num_frames, num_features]).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.params(x)",
                            "Call"
                        ],
                        [
                            "Func.interpolate(x, 2399).view([batch_size, num_speakers * 256, 2399])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "2399",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/main.py": {
        "torch": {
            "manual_seed_all_12": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/pit_criterion.py": {
        "torch": {
            "unsqueeze_112": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - mean_target",
                            "BinOp"
                        ],
                        [
                            "zero_mean_target * mask",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "s_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "zero_mean_estimate * mask",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "pair_wise_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_estimate * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor([list(range(C))], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_131": {
                "variable": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,pij->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pair_wise_si_snr, perms_one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_132": {
                "variable": {
                    "value": "max_snr_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_134": {
                "variable": {
                    "value": "(max_snr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_21": {
                "variable": {
                    "value": "mean_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "mean_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimated",
                            "Method Argument"
                        ],
                        [
                            "estimated",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - mean_target",
                            "BinOp"
                        ],
                        [
                            "zero_mean_target * mask",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "s_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "zero_mean_estimate * mask",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "pair_wise_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_estimate * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor([list(range(C))], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "variable": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,pij->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pair_wise_si_snr, perms_one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_43": {
                "variable": {
                    "value": "(max_snr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "mean_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "mean_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimated",
                            "Method Argument"
                        ],
                        [
                            "estimated",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - mean_target",
                            "BinOp"
                        ],
                        [
                            "zero_mean_target * mask",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ],
                        [
                            "target - mean_target",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "s_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "zero_mean_estimate * mask",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "estimated - mean_estimate",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "pair_wise_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_estimate * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "target.new_tensor([list(range(C))], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_80": {
                "variable": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,pij->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pair_wise_si_snr, perms_one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(max_snr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "estimate_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source * mask",
                            "BinOp"
                        ],
                        [
                            "estimate_source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "s_target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "e_noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_122": {
                "input": {
                    "value": "pair_wise_si_snr + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "s_target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "e_noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_35": {
                "input": {
                    "value": "pair_wise_si_snr + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "s_target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "e_noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_73": {
                "input": {
                    "value": "pair_wise_si_snr + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/test.py": {
        "torch": {
            "DataParallel_100": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ConvTasNet(C=2, test_with_asr=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVSpeech('test')",
                            "Call"
                        ],
                        [
                            "DataLoader(dataloader, batch_size=config.batchsize['test'], num_workers=config.num_workers['test'], worker_init_fn=init_fn)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batchsize['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "cur_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.pretrained_test",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/test_real.py": {
        "torch": {
            "DataParallel_97": {
                "variable": {
                    "value": "convtasnet_audio_with_asr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ConvTasNet(C=2, test_with_asr=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_99": {
                "variable": {
                    "value": "convtasnet_audio_without_asr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ConvTasNet(C=2, asr_addition=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVSpeech('test')",
                            "Call"
                        ],
                        [
                            "DataLoader(dataloader, batch_size=config.batchsize['test'], num_workers=config.num_workers['test'], worker_init_fn=init_fn)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batchsize['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "convtasnet_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.convtasnet_audio_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_117": {
                "f": {
                    "value": "conv_asr_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convtasnet_asr_model",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "Oracle/train.py": {
        "torch": {
            "load_156": {
                "variable": {
                    "value": "trained_convtasnet_audio_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.convtasnet_audio_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "convtasnet_audio_with_asr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ConvTasNet(C=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "model_state_dict[module.separator.network.0.gamma]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model_state_dict['module.separator.network.0.gamma'], torch.randn(size=[1, 512, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "model_state_dict[module.separator.network.0.beta]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model_state_dict['module.separator.network.0.beta'], torch.randn(size=[1, 512, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "model_state_dict[module.separator.network.1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model_state_dict['module.separator.network.1.weight'], torch.randn(size=[512, 512, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_183": {
                "variable": {
                    "value": "optimizer_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "convtasnet_audio_with_asr_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_189": {
                "variable": {
                    "value": "asr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ASR(idim=80, odim=5002, args=asrConfig.ModelArgs(), get_features=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVSpeech('train')",
                            "Call"
                        ],
                        [
                            "DataLoader(dataloader, batch_size=config.batchsize['train'], num_workers=config.num_workers['train'], worker_init_fn=init_fn)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batchsize['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "load_191": {
                "variable": {
                    "value": "trained_asr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.asr_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "trained_asr_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.asr_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_210": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_211": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_224": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.pretrained_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'iterations': -1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model_save_path + '/final_model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'iterations': no}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model_save_path + '/' + str(no) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_156": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_164": {
                "size": {
                    "value": "[1, 512, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_168": {
                "size": {
                    "value": "[1, 512, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_172": {
                "size": {
                    "value": "[512, 512, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_193": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Oracle/utils.py": {
        "torch": {
            "arange_51": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "output_subframes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size // subframe_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unfold_51": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "subframes_per_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_length // subframe_length",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "subframe_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_step // subframe_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randint_84": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(M, C, K, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}