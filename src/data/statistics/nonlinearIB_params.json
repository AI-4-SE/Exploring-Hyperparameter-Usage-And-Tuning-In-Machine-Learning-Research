{
    "code/loaddata.py": {
        "sklearn": {
            "fetch_california_housing_38": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "code/do_run.py": {
        "tensorflow": {
            "ConfigProto_45": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_44": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_101": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "cfg['patience'] + 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "mi_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.true_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "trueY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self.entropyY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "entropyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_120": {
                "var_list": {
                    "value": "optimizer.variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_195": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_172": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_173": {
                "units": {
                    "value": "cfg['n_wide']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_174": {
                "units": {
                    "value": "cfg['n_wide']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_175": {
                "units": {
                    "value": "cfg['n_hidden']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dense_177": {
                "units": {
                    "value": "cfg['n_wide']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_178": {
                "units": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['trn_Y'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "Y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_214": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/entropy.py": {
        "tensorflow": {
            "cast_27": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(dist)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float64)",
                            "Call"
                        ],
                        [
                            "x.astype('float64')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx - 2.0 * tf.matmul(x, tf.transpose(x)) + tf.transpose(xx)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(dist, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dist)",
                            "Call"
                        ],
                        [
                            "xx + x2x.T - 2.0 * x.dot(x2.T)",
                            "BinOp"
                        ],
                        [
                            "dist.astype(origtype)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_55": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx - 2.0 * tf.matmul(x, tf.transpose(x)) + tf.transpose(xx)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(dist, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dist)",
                            "Call"
                        ],
                        [
                            "xx + x2x.T - 2.0 * x.dot(x2.T)",
                            "BinOp"
                        ],
                        [
                            "dist.astype(origtype)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_38": {
                "x": {
                    "value": "2.0 * np.pi * np.exp(1.0) * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "tf.reduce_logsumexp(dist_norm, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float64)",
                            "Call"
                        ],
                        [
                            "x.astype('float64')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_51": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float64)",
                            "Call"
                        ],
                        [
                            "x.astype('float64')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_12": {
                "x": {
                    "value": "tf.log(2.0 * np.pi * np.exp(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_12": {
                "x": {
                    "value": "2.0 * np.pi * np.exp(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx - 2.0 * tf.matmul(x, tf.transpose(x)) + tf.transpose(xx)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(dist, orig_dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(dist)",
                            "Call"
                        ],
                        [
                            "xx + x2x.T - 2.0 * x.dot(x2.T)",
                            "BinOp"
                        ],
                        [
                            "dist.astype(origtype)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_39": {
                "input_tensor": {
                    "value": "dist_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-dist / (2.0 * var)",
                            "BinOp"
                        ],
                        [
                            "-dist / (8.0 * var)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float64)",
                            "Call"
                        ],
                        [
                            "x.astype('float64')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/iblayer.py": {
        "tensorflow": {
            "get_variable_19": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phi",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.softplusinverse(init_noisevar).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_20": {
                "variable": {
                    "value": "self.noisevar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.vib_prior_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "prior_var",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "vib_prior_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InputSpec_32": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axes": {
                    "value": "{-1: self.input_dim}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "identity_37": {
                "variable": {
                    "value": "self.T_nonoise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "RawInput",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "self.vIxt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(tfd.kl_divergence(encoding, prior), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_50": {
                "x": {
                    "value": "self.vib_prior_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "x": {
                    "value": "self.noisevar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "input_tensor": {
                    "value": "tfd.kl_divergence(encoding, prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_58": {
                "x": {
                    "value": "self.noisevar",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/mnistdemo.py": {
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "true_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "trueY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_50": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "true_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, output_dim], name='trueY')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "entropyY",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "entropyY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_9": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_67": {
                "config": {
                    "value": "tfconfig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_38": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_39": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_40": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_43": {
                "units": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['trn_Y'].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "global_variables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_v2_55": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true, logits=y_pred)",
                            "Call"
                        ],
                        [
                            "(y_true - y_pred) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_65": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y_pred, 1), tf.argmax(y_true, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "tf.equal(tf.argmax(y_pred, 1), tf.argmax(y_true, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_65": {
                "x": {
                    "value": "tf.argmax(y_pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}