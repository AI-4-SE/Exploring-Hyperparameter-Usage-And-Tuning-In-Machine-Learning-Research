{
    "narm/DataLoader.py": {
        "torch": {
            "zeros_121": {
                "variable": {
                    "value": "padded_sesss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RecSysDataset(train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "narm/metrics.py": {
        "torch": {
            "reciprocal_37": {
                "variable": {
                    "value": "rranks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hits[:, -1] + 1",
                            "BinOp"
                        ],
                        [
                            "ranks.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_52": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(indices, k, -1)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "rranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reciprocal(ranks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "narm/model.py": {
        "torch": {
            "Embedding_24": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.emb_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.a_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.v_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.ct_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_39": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_dropout(self.emb(seq))",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(embs, lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(gru_out)",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_41": {
                "variable": {
                    "value": "(gru_out, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "gru_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(embs, hidden)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(gru_out)",
                            "Call"
                        ],
                        [
                            "gru_out.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_51": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "seq.permute(1, 0) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor([1.0], device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor([0.0], device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "c_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha.unsqueeze(2).expand_as(gru_out) * gru_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_local, c_global]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([c_local, c_global], 1)",
                            "Call"
                        ],
                        [
                            "self.ct_dropout(c_t)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.b(item_embs).permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "(self.n_layers, batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "self.n_items",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "input": {
                    "value": "q1 + q2_masked",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "narm/train.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RecSysDataset(train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RecSysDataset(valid)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RecSysDataset(test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_42": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_43": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), 0.001)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest_checkpoint.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': e + 1, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "here + f'/checkpoint_{e}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(seq, lens)",
                            "Call"
                        ],
                        [
                            "model(seq, lens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "narm/utils.py": {
        "torch": {
            "device_3": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sr-gnn/model.py": {
        "torch": {
            "stack_119": {
                "variable": {
                    "value": "seq_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get(i) for i in torch.arange(len(alias_inputs)).long()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.w_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.gate_size, self.input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.w_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.gate_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.b_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.b_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.gate_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.b_iah",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.b_oah",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear_edge_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.linear_edge_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.linear_edge_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_in, input_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_40": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_in, input_out], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.w_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_41": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(items, A)",
                            "Call"
                        ],
                        [
                            "self.GNNCell(A, hidden)",
                            "Call"
                        ],
                        [
                            "self.embedding(inputs)",
                            "Call"
                        ],
                        [
                            "self.gnn(A, hidden)",
                            "Call"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.w_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_hh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_63": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.linear_one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.linear_two",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear_three",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.linear_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_71": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_dc_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.lr_dc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_84": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * hidden * mask.view(mask.shape[0], -1, 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(alpha * hidden * mask.view(mask.shape[0], -1, 1).float(), 1)",
                            "Call"
                        ],
                        [
                            "self.linear_transform(torch.cat([a, ht], 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_37": {
                "input": {
                    "value": "A[:, :, :A.shape[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.linear_edge_in(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "input": {
                    "value": "A[:, :, A.shape[1]:2 * A.shape[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.linear_edge_out(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "input": {
                    "value": "q1 + q2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_80": {
                "start": {
                    "value": "mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "[a, ht]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_119": {
                "start": {
                    "value": "len(alias_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get_slice(i)",
                            "Call"
                        ],
                        [
                            "trans_to_cuda(torch.Tensor(mask).long())",
                            "Call"
                        ],
                        [
                            "zip(sub_scores, targets, test_data.mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}