{
    "flexehr/scripts/5_split_train_test.py": {
        "sklearn": {
            "train_test_split_45": {
                "variable": {
                    "value": "(ts_train, ts_test, m_train, m_test, LOS_train, LOS_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "ts_paths",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "mort",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "LOS",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "stratify": {
                    "value": "mort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "mort + [ev['Mortality'].iloc[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_48": {
                "variable": {
                    "value": "(ts_train, ts_valid, m_train, m_valid, LOS_train, LOS_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "ts_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "m_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "LOS_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "stratify": {
                    "value": "m_train",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "flexehr/training.py": {
        "sklearn": {
            "roc_auc_score_180": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true.to(self.device)",
                            "Call"
                        ],
                        [
                            "y_true.to(self.device)",
                            "Call"
                        ],
                        [
                            "array(y_true)",
                            "Call"
                        ],
                        [
                            "y_true[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "array(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "plot/auc_vs_time.py": {
        "sklearn": {
            "roc_curve_44": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data['Y_test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_45": {
                "variable": {
                    "value": "aucs[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_31": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(data['X_test'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data['X_test']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_22": {
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds + [model(X)]",
                            "BinOp"
                        ],
                        [
                            "predict(test_loader, model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "data": {
                    "value": "data['X_test']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plot/aurocs.py": {
        "sklearn": {
            "roc_curve_45": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "data['Y_test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "preds[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_46": {
                "variable": {
                    "value": "aucs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interp(base_fpr, fpr, tpr)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_31": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(data['X_test'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.tensor(data['X_test']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_22": {
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds + [model(X)]",
                            "BinOp"
                        ],
                        [
                            "predict(test_loader, model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "data": {
                    "value": "data['X_test']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/datasets.py": {
        "sklearn": {
            "train_test_split_54": {
                "variable": {
                    "value": "(X_train, X_valid, y_train, y_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "arrs['X_train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "arrs['Y_train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "stratify": {
                    "value": "arrs['Y_train']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.load(os.path.join(root, '_dicts', f'{t_hours}_{n_bins}_arrs.npy'), allow_pickle=True).item()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EHR(X_train, y_train, t_hours, dt, dynamic)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EHR(X_valid, y_valid, t_hours, dt, dynamic)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EHR(arrs['X_test'], arrs['Y_test'], t_hours, dt, dynamic)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory and torch.cuda.is_available",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(Y[:, None], (1, int(t_hours / dt)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flexehr/models/decoders.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_dim, hidden_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "flexehr/models/embedders.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, dim=1)",
                            "Call"
                        ],
                        [
                            "output + [X_t_avg]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.embedding(x, self.weights, padding_idx=self.padding_idx)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_43": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedW(X)",
                            "Call"
                        ],
                        [
                            "torch.exp(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_65": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T.max()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "self.dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(weights).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_tokens, self.latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truncnorm.rvs(-t, t, size=[self.n_tokens, self.latent_dim])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flexehr/models/losses.py": {
        "torch": {
            "binary_cross_entropy_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "flexehr/models/lstms.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([W_ii, W_if, W_ig, W_io], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_78": {
                "variable": {
                    "value": "W_hg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_79": {
                "variable": {
                    "value": "W_ho",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([W_hi, W_hf, W_hg, W_ho], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(4 * hidden_dim).zero_()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "W_iz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "W_ir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[W_iz, W_ir]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "W_hz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "W_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[W_hz, W_hr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_90": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_91": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_92": {
                "variable": {
                    "value": "self.ln3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_192": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_193": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_194": {
                "variable": {
                    "value": "self.ln3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_195": {
                "variable": {
                    "value": "self.ln4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_207": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ln3(torch.mm(x, self.W)) + r.sigmoid() * self.ln4(torch.mm(h, self.U))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_211": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(x, self.W) + r.sigmoid() * torch.mm(h, self.U)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "H + [h]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "[W_ii, W_if, W_ig, W_io]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "[W_hi, W_hf, W_hg, W_ho]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "H + [h]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_175": {},
            "Tensor_176": {},
            "Tensor_177": {},
            "Tensor_183": {},
            "Tensor_184": {},
            "Tensor_185": {},
            "mm_202": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_102": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_199": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "o.sigmoid() * c.tanh()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=torch.float32).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.gru_cell(x_t.squeeze(1), h)",
                            "Call"
                        ],
                        [
                            "(1 - z.sigmoid()) * h + z.sigmoid() * hh",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_200": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_212": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_98": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "o.sigmoid() * c.tanh()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=torch.float32).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.gru_cell(x_t.squeeze(1), h)",
                            "Call"
                        ],
                        [
                            "(1 - z.sigmoid()) * h + z.sigmoid() * hh",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_208": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "x.chunk(x.size(1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_213": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "o.sigmoid() * c.tanh()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=torch.float32).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.gru_cell(x_t.squeeze(1), h)",
                            "Call"
                        ],
                        [
                            "(1 - z.sigmoid()) * h + z.sigmoid() * hh",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_209": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "o.sigmoid() * c.tanh()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(x.size(0), self.hidden_dim, dtype=torch.float32).to(x.device)",
                            "Call"
                        ],
                        [
                            "self.gru_cell(x_t.squeeze(1), h)",
                            "Call"
                        ],
                        [
                            "(1 - z.sigmoid()) * h + z.sigmoid() * hh",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "flexehr/models/models.py": {
        "torch": {
            "Dropout_102": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_115": {
                "input": {
                    "value": "self.embedder(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_153": {
                "input": {
                    "value": "self.embedder(input)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "flexehr/utils/modelIO.py": {
        "torch": {
            "save_46": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_107": {
                "f": {
                    "value": "os.path.join(directory, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plot/case_study.py": {
        "torch": {}
    },
    "plot/pmort_vs_time.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['X_train'][idx:idx + 1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "device_21": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and is_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_13": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}