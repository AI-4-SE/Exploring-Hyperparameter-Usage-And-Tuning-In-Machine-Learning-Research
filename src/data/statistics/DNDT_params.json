{
    "tensorflow/neural_network_decision_tree.py": {
        "tensorflow": {
            "einsum_6": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ik->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(tf.concat([tf.constant(0.0, shape=[1]), -cut_points], 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_7": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ij,ik->ijk', a, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(res, [-1, tf.reduce_prod(res.shape[1:])])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(h / temperature)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.reduce_prod(res.shape[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.linspace(1.0, D + 1.0, D + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sort_17": {
                "variable": {
                    "value": "cut_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cut_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.sort(cut_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_18": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([tf.constant(0.0, shape=[1]), -cut_points], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_20": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "h / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "a": {
                    "value": "leaf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce(tf_kron_prod, map(lambda z: tf_bin(x[:, z[0]:z[0] + 1], z[1], temperature), enumerate(cut_points_list)))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "leaf_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_16": {
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "D + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "D + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_18": {
                "values": {
                    "value": "[tf.constant(0.0, shape=[1]), -cut_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.linspace(1.0, D + 1.0, D + 1), [1, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_7": {
                "input_tensor": {
                    "value": "res.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_18": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test.py": {
        "tensorflow": {
            "InteractiveSession_10": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_22": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_35": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_15": {
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.1, 0.2], [0.3, 0.4]]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_25": {
                "value": {
                    "value": "cut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1.5, 3.5]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_46": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 2, 3, 4, 5]).reshape(-1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 2], [2, 3], [1, 3], [2, 2]]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_48": {
                "value": {
                    "value": "leaf_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[4, 1], [3, 2], [2, 3], [1, 4]]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_47": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}