{
    "dataloader/jhmdb_loader.py": {
        "sklearn": {
            "LabelEncoder_20": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/shrec_loader.py": {
        "sklearn": {}
    },
    "train.py": {
        "sklearn": {
            "confusion_matrix_206": {
                "variable": {
                    "value": "cnf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y_t.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.argmax(Y_pred, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "X_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_0).type('torch.FloatTensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_1).type('torch.FloatTensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y).type('torch.LongTensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "X_0_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_0_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_0_t).type('torch.FloatTensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "X_1_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_1_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(X_1_t).type('torch.FloatTensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "Y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Y_t).type('torch.LongTensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_161": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X_0, X_1, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_164": {
                "variable": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_0_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X_0_t, X_1_t, Y_t)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_175": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_176": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "5e-06",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(savedir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/DDNet_Original.py": {
        "torch": {
            "Conv1d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "output.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output, 0.2, True)",
                            "Call"
                        ],
                        [
                            "self.c1D1(x)",
                            "Call"
                        ],
                        [
                            "self.c1D2(output)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_59": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "output.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output, 0.2, True)",
                            "Call"
                        ],
                        [
                            "self.c1D1(x)",
                            "Call"
                        ],
                        [
                            "self.c1D2(output)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_66": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.jcd_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l, feat_d, 2 * filters, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.jcd_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l, 2 * filters, filters, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.jcd_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool1d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.slow_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l, joint_n * joint_d, 2 * filters, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.slow_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l, 2 * filters, filters, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slow_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool1d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.fast_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l // 2, joint_n * joint_d, 2 * filters, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.fast_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l // 2, 2 * filters, filters, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.fast_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c1D(frame_l // 2, filters, filters, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.block_pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool1d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.block_pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool1d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "block(frame_l // 8, 4 * filters, 8 * filters, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d1D(8 * filters, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "d1D(128, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_d_slow, x_d_fast)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_89": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_104": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_119": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_122": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_176": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.jcd_conv1(M)",
                            "Call"
                        ],
                        [
                            "self.jcd_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.jcd_conv3(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.jcd_pool(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x_d_slow, x_d_fast), dim=2)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.block_pool1(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.block_pool2(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=1).values",
                            "Attribute"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "interpolate_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1:, ...] - x[:, :-1, ...]",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(H, W), align_corners=False, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_70": {
                "variable": {
                    "value": "P_diff_slow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_diff_slow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_diff(P)",
                            "Call"
                        ],
                        [
                            "torch.flatten(P_diff_slow, start_dim=2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "P_diff_fast",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_diff_fast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_diff(P_fast)",
                            "Call"
                        ],
                        [
                            "torch.flatten(P_diff_fast, start_dim=2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}