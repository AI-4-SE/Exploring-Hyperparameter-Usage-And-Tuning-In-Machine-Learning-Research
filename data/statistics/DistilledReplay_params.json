{
    "model/cnn1.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.conv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.conv4_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.conv5_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_bn(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_bn(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_bn(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc1(x), 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc2(x), 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_54": {
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/cnn2.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "variable": {
                    "value": "self.conv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.conv4_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.conv5_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_bn(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_bn(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_bn(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.fc1(x), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/lenet5.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.feature_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=config['input_shape'][0], out_channels=6, kernel_size=5, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=120, out_features=84)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "config['input_shape'][0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_12": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['n_classes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/mlp1.py": {
        "torch": {
            "Dropout_8": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.drop(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.drop(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.drop(self.fc3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.drop(self.fc4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/mlp2.py": {
        "torch": {
            "Dropout_8": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.drop(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.drop(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/wide_resnet.py": {
        "torch": {
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['n_classes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_172": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, output_size=1)",
                            "Call"
                        ],
                        [
                            "self._forward_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_65": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "F.dropout(y, p=self.drop_rate, training=self.training, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(y), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(y)",
                            "Call"
                        ],
                        [
                            "y + self.shortcut(x)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "pmnist_exp/config_dr.py": {
        "torch": {}
    },
    "pmnist_exp/config_joint.py": {
        "torch": {}
    },
    "pmnist_exp/config_naive.py": {
        "torch": {}
    },
    "pmnist_exp/config_sr.py": {
        "torch": {}
    },
    "pmnist_exp/run.py": {
        "torch": {
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "init_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "init_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_241": {
                "variable": {
                    "value": "buff_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[buff_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['meta_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_79": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_105": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['model_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "d_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='train', valid=data_config['valid'], transform=data_config['train_transform'], task=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "d_validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], task=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "run_config['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "self.config['run_config']",
                            "Subscript"
                        ],
                        [
                            "run_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], task=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "net.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_213": {
                "variable": {
                    "value": "net.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "model_config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "buff if buffer is None else buffer + buff",
                            "IfExp"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_249": {
                "params": {
                    "value": "[lr]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['lr_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_264": {
                "variable": {
                    "value": "model_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_301": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "epoch_loss[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_328": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                }
            },
            "log_270": {
                "input": {
                    "value": "1 + torch.exp(lr_list[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_270": {
                "input": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scifar10_exp/config_sr.py": {
        "torch": {}
    },
    "scifar10_exp/run.py": {
        "torch": {
            "CrossEntropyLoss_142": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "init_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_241": {
                "variable": {
                    "value": "init_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_244": {
                "variable": {
                    "value": "buff_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[buff_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['meta_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_85": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['model_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "d_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='train', valid=data_config['valid'], transform=data_config['train_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "d_validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "run_config['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "self.config['run_config']",
                            "Subscript"
                        ],
                        [
                            "run_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_235": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_252": {
                "params": {
                    "value": "[lr]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['lr_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_267": {
                "variable": {
                    "value": "model_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_305": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "epoch_loss[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_332": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_219": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_273": {
                "input": {
                    "value": "1 + torch.exp(lr_list[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_273": {
                "input": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sfmnist_exp/config_dr.py": {
        "torch": {}
    },
    "sfmnist_exp/config_joint.py": {
        "torch": {}
    },
    "sfmnist_exp/config_naive.py": {
        "torch": {}
    },
    "sfmnist_exp/config_sr.py": {
        "torch": {}
    },
    "sfmnist_exp/run.py": {
        "torch": {
            "CrossEntropyLoss_145": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "init_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "init_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_257": {
                "variable": {
                    "value": "buff_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[buff_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['meta_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_88": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_115": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['model_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "d_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='train', valid=data_config['valid'], transform=data_config['train_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "d_validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "run_config['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "self.config['run_config']",
                            "Subscript"
                        ],
                        [
                            "run_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_248": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_266": {
                "params": {
                    "value": "[lr]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['lr_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_283": {
                "variable": {
                    "value": "model_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_326": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "epoch_loss[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_353": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_222": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_288": {
                "input": {
                    "value": "1 + torch.exp(lr_list[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_288": {
                "input": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "smnist_exp/config_dr.py": {
        "torch": {}
    },
    "smnist_exp/config_joint.py": {
        "torch": {}
    },
    "smnist_exp/config_naive.py": {
        "torch": {}
    },
    "smnist_exp/config_sr.py": {
        "torch": {}
    },
    "smnist_exp/run.py": {
        "torch": {
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "init_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "init_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelInitDataset(model, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_240": {
                "variable": {
                    "value": "buff_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[buff_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['meta_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_80": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_106": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['model_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "d_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='train', valid=data_config['valid'], transform=data_config['train_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "d_validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['distill_batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "run_config['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "config['run_config']",
                            "Subscript"
                        ],
                        [
                            "self.config['run_config']",
                            "Subscript"
                        ],
                        [
                            "run_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(dset='test', valid=data_config['valid'], transform=data_config['test_transform'], classes=task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['param_config']",
                            "Subscript"
                        ],
                        [
                            "config['param_config']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['data_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_231": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_248": {
                "params": {
                    "value": "[lr]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "param_config['lr_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_263": {
                "variable": {
                    "value": "model_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_300": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "epoch_loss[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_327": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.log(np.exp([param_config['model_lr']]) - 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(lr, requires_grad=True, device=run_config['device'])",
                            "Call"
                        ],
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_205": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_213": {
                "dataset": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Buffer(ds, param_config['buffer_size']) if buffer is None else buffer + Buffer(ds, param_config['buffer_size'])",
                            "IfExp"
                        ],
                        [
                            "distill(d_net, buffer, config, criterion, d_trainloader, d_validloader, task_id)",
                            "Call"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ],
                        [
                            "buffer",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(buffer)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_269": {
                "input": {
                    "value": "1 + torch.exp(lr_list[j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_269": {
                "input": {
                    "value": "lr_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}