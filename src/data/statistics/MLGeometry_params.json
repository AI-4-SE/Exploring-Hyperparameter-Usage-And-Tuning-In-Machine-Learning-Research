{
    "MLGeometry/bihomoNN.py": {
        "tensorflow": {
            "transpose_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(x, bool_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_85": {
                "variable": {
                    "value": "intermediate_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "bool_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.logical_not(tf.math.less(intermediate_tensor, 0.001))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(x, bool_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "bool_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.math.logical_not(tf.math.less(intermediate_tensor, 0.001)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(x, bool_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_16": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj->aij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.math.conj(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_17": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.d ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_19": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(zzbar), tf.math.imag(zzbar)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_29": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj->aij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "band_part_30": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "remove_zero_entries(zz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 15]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_35": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj->aij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tf.math.conj(zz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_36": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 15 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(zzbar), tf.math.imag(zzbar)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_48": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj,ak->aijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "band_part_49": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_51": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 ** 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "remove_zero_entries(zz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 35]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_56": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj->aij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tf.math.conj(zz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_57": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 35 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(zzbar), tf.math.imag(zzbar)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_68": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj,ak,al->aijkl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "band_part_69": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_71": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "band_part_73": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5 ** 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "remove_zero_entries(zz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 70]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_77": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aj->aij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "tf.math.conj(zz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "band_part_78": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 70 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(zzbar), tf.math.imag(zzbar)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_94": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w_init(shape=(input_dim, units), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_100": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_120": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.linalg.band_part(tf.ones([dim, dim]), 0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_121": {
                "variable": {
                    "value": "upper_tri",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.eye(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.linalg.band_part(tf.ones([dim, dim]), 0, -1), dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([upper_tri, tf.zeros(input_dim - len(upper_tri))], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "w_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat([upper_tri, tf.zeros(input_dim - len(upper_tri))], axis=0), [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_127": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_85": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(x)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(x, bool_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_86": {
                "x": {
                    "value": "tf.math.less(intermediate_tensor, 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conj_16": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conj_35": {
                "x": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_56": {
                "x": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_77": {
                "x": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 15])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak->aijk', inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 35])",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj,ak,al->aijkl', inputs, inputs, inputs, inputs)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(zz, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zz, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zz, [-1, 5 ** 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(remove_zero_entries(zz), [-1, 70])",
                            "Call"
                        ]
                    ]
                }
            },
            "less_86": {
                "x": {
                    "value": "intermediate_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(x), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "band_part_120": {
                "input": {
                    "value": "tf.ones([dim, dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_121": {
                "num_rows": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.sqrt(input_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_122": {
                "values": {
                    "value": "[upper_tri, tf.zeros(input_dim - len(upper_tri))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_19": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_19": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_38": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_38": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_59": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_59": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_80": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_80": {
                "input": {
                    "value": "zzbar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aj->aij', inputs, tf.math.conj(inputs))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, self.d ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 15 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 35 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ai,aj->aij', zz, tf.math.conj(zz))",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(zzbar, 0, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(zzbar, [-1, 70 ** 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(zzbar), tf.math.imag(zzbar)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_120": {
                "shape": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "shape": {
                    "value": "input_dim - len(upper_tri)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MLGeometry/complex_math.py": {
        "tensorflow": {
            "gradients_4": {
                "variable": {
                    "value": "dx_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "tf.math.real(func)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_5": {
                "variable": {
                    "value": "dx_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "tf.math.imag(func)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conj_12": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gradients(func, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_4": {
                "input": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "imag_5": {
                "input": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_12": {
                "ys": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_13": {
                "values": {
                    "value": "[gradients_zbar(tmp[0], x)[0] for tmp in tf.unstack(grad, axis=2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_6": {
                "value": {
                    "value": "1j",
                    "type": "complex",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_14": {
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.conj(tf.gradients(func, x))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MLGeometry/hypersurface.py": {
        "tensorflow": {
            "constant_446": {
                "variable": {
                    "value": "s_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(s_vec, dtype=np.complex64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_447": {
                "variable": {
                    "value": "J_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(J_vec, dtype=np.complex64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_455": {
                "variable": {
                    "value": "Omega_Omegabar",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(Omega_Omegabar, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_463": {
                "variable": {
                    "value": "r_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(r, dtype=np.complex64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_480": {
                "variable": {
                    "value": "h_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "h_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.identity(n_sec)",
                            "Call"
                        ],
                        [
                            "np.identity(n_sec)",
                            "Call"
                        ],
                        [
                            "sp.MatrixSymbol('H', n_sec, n_sec)",
                            "Call"
                        ],
                        [
                            "np.diag(sp.Poly(sp.expand(sum(self.coordinates) ** k)).coeffs())",
                            "Call"
                        ],
                        [
                            "np.identity(self.n_dim, dtype=np.complex64)",
                            "Call"
                        ],
                        [
                            "np.identity(self.n_sections, dtype=np.complex64)",
                            "Call"
                        ],
                        [
                            "self.h_FS.astype(np.complex64)",
                            "Call"
                        ],
                        [
                            "np.identity(len(s))",
                            "Call"
                        ],
                        [
                            "np.array(self.h_FS, dtype=int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_491": {
                "variable": {
                    "value": "H_Jdag",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(h_matrix, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "J_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.array(J_vec, dtype=np.complex64))",
                            "Call"
                        ],
                        [
                            "self.J_tf_1",
                            "Attribute"
                        ],
                        [
                            "self.J_tf",
                            "Attribute"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_492": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "J_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.array(J_vec, dtype=np.complex64))",
                            "Call"
                        ],
                        [
                            "self.J_tf_1",
                            "Attribute"
                        ],
                        [
                            "self.J_tf",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "H_Jdag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_tf, J_tf, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "np.matmul(h_matrix, np.conj(J).T)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_493": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "s_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.array(s_vec, dtype=np.complex64))",
                            "Call"
                        ],
                        [
                            "self.s_tf_1",
                            "Attribute"
                        ],
                        [
                            "self.s_tf",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "H_Jdag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_tf, J_tf, adjoint_b=True)",
                            "Call"
                        ],
                        [
                            "np.matmul(h_matrix, np.conj(J).T)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_494": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(s_tf, H_Jdag)",
                            "Call"
                        ],
                        [
                            "np.matmul(s, H_Jdag).reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(s_tf, H_Jdag)",
                            "Call"
                        ],
                        [
                            "np.matmul(s, H_Jdag).reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_495": {
                "a": {
                    "value": "h_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(h_matrix, dtype=tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.array(s_vec, dtype=np.complex64))",
                            "Call"
                        ],
                        [
                            "self.s_tf_1",
                            "Attribute"
                        ],
                        [
                            "self.s_tf",
                            "Attribute"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_505": {
                "a": {
                    "value": "kahler_metric",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kahler_metric(h_matrix, k)",
                            "Call"
                        ],
                        [
                            "self.num_kahler_metric_tf(h_matrix, k)",
                            "Call"
                        ],
                        [
                            "self.num_kahler_metric(h_matrix, point, k)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "r_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.array(r, dtype=np.complex64))",
                            "Call"
                        ],
                        [
                            "self.r_tf",
                            "Attribute"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "det_506": {
                "variable": {
                    "value": "FS_volume_form",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FS_volume_form",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "restriction.T * kahler_metric * restriction.conjugate()",
                            "BinOp"
                        ],
                        [
                            "FS_volume_form.det()",
                            "Call"
                        ],
                        [
                            "lambda point: FS_func(point).real",
                            "Lambda"
                        ],
                        [
                            "tf.matmul(r_tf, tf.matmul(kahler_metric, r_tf, adjoint_b=True))",
                            "Call"
                        ],
                        [
                            "tf.linalg.det(FS_volume_form)",
                            "Call"
                        ],
                        [
                            "tf.math.real(FS_volume_form)",
                            "Call"
                        ],
                        [
                            "self.num_FS_volume_form_tf(h_matrix)",
                            "Call"
                        ],
                        [
                            "np.matmul(r.T, np.matmul(kahler_metric, np.conj(r)))",
                            "Call"
                        ],
                        [
                            "np.matrix(FS_volume_form, dtype=complex)",
                            "Call"
                        ],
                        [
                            "np.linalg.det(FS_volume_form).real",
                            "Attribute"
                        ],
                        [
                            "self.num_FS_volume_form(h_matrix, point)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_507": {
                "variable": {
                    "value": "FS_volume_form",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FS_volume_form",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "restriction.T * kahler_metric * restriction.conjugate()",
                            "BinOp"
                        ],
                        [
                            "FS_volume_form.det()",
                            "Call"
                        ],
                        [
                            "lambda point: FS_func(point).real",
                            "Lambda"
                        ],
                        [
                            "tf.matmul(r_tf, tf.matmul(kahler_metric, r_tf, adjoint_b=True))",
                            "Call"
                        ],
                        [
                            "tf.linalg.det(FS_volume_form)",
                            "Call"
                        ],
                        [
                            "tf.math.real(FS_volume_form)",
                            "Call"
                        ],
                        [
                            "self.num_FS_volume_form_tf(h_matrix)",
                            "Call"
                        ],
                        [
                            "np.matmul(r.T, np.matmul(kahler_metric, np.conj(r)))",
                            "Call"
                        ],
                        [
                            "np.matrix(FS_volume_form, dtype=complex)",
                            "Call"
                        ],
                        [
                            "np.linalg.det(FS_volume_form).real",
                            "Attribute"
                        ],
                        [
                            "self.num_FS_volume_form(h_matrix, point)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_222": {
                "variable": {
                    "value": "summation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f(self)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MLGeometry/lbfgs.py": {
        "tensorflow": {
            "shape_n_41": {
                "variable": {
                    "value": "shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "part",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "part",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(part)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_133": {
                "variable": {
                    "value": "f.iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_partition_67": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "params_1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "partitions": {
                    "value": "part",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(part)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "n_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(shapes)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_76": {
                "variable": {
                    "value": "volume_form",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.linalg.det(tf.matmul(restriction, tf.matmul(kahler_metric, restriction, adjoint_b=True)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights * volume_form / Omega_Omegabar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_stitch_107": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "data": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss_value, model.trainable_variables)",
                            "Call"
                        ],
                        [
                            "tf.dynamic_stitch(idx, grads)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_110": {
                "variable": {
                    "value": "mass_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "print_125": {
                "*inputs": {
                    "value": "Iter:",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "f.iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_function_128": {
                "func": {
                    "value": "f.history.append",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[total_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "tf.range(count, count + n, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "real_75": {
                "input": {
                    "value": "model(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_76": {
                "input": {
                    "value": "tf.matmul(restriction, tf.matmul(kahler_metric, restriction, adjoint_b=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_52": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "kahler_metric",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "complex_math.complex_hessian(tf.math.real(model(x)), x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "restriction",
                    "type": "Variable",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MLGeometry/loss.py": {
        "tensorflow": {
            "sum_8": {
                "a": {
                    "value": "K.abs(y_true - y_pred) / y_true * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_12": {
                "a": {
                    "value": "tf.square(y_pred / y_true - 1) * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_15": {
                "input_tensor": {
                    "value": "K.abs(y_true - y_pred) / y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_7": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_11": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_12": {
                "x": {
                    "value": "y_pred / y_true - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_15": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_8": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MLGeometry/tf_dataset.py": {
        "tensorflow": {
            "convert_to_tensor_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(patch.points, dtype=np.complex64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_31": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "patch.num_Omega_Omegabar_tf()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "variable": {
                    "value": "trans_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(trans_mat, dtype=np.complex64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "restriction",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "patch.r_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "trans_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.array(trans_mat, dtype=np.complex64))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_33": {
                "x": {
                    "value": "patch.num_FS_volume_form_tf('identity', k=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "training/bihomoNN_train.py": {
        "tensorflow": {
            "set_seed_69": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_model_104": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.load_model",
                            "Attribute"
                        ]
                    ]
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "real_141": {
                "variable": {
                    "value": "volume_form",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.linalg.det(tf.matmul(restriction, tf.matmul(kahler_metric, restriction, adjoint_b=True)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights * volume_form / Omega_Omegabar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_149": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_150": {
                "variable": {
                    "value": "total_mass",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_stitch_182": {
                "variable": {
                    "value": "init_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_func.idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_file_writer_202": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "save_dir + '/logs/' + save_name + '/train'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "create_file_writer_203": {
                "variable": {
                    "value": "test_summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "test_log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "save_dir + '/logs/' + save_name + '/test'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "mass_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialDecay_193": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "HS.n_points / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=args.learning_rate, decay_steps=HS.n_points / batch_size, decay_rate=args.decay_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_281": {
                "a": {
                    "value": "(K.abs(y_true - y_pred) / y_true - sigma_train) ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_285": {
                "a": {
                    "value": "(K.abs(y_true - y_pred) / y_true - sigma_test) ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_289": {
                "a": {
                    "value": "((y_pred / y_true - 1) ** 2 - E_train) ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_293": {
                "a": {
                    "value": "((y_pred / y_true - 1) ** 2 - E_test) ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_140": {
                "input": {
                    "value": "model(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_141": {
                "input": {
                    "value": "tf.matmul(restriction, tf.matmul(kahler_metric, restriction, adjoint_b=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_280": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_284": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_288": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_292": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "kahler_metric",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlg.complex_math.complex_hessian(tf.math.real(model(x)), x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "restriction",
                    "type": "Variable",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_235": {
                "a": {
                    "value": "(K.abs(y_true - y_pred) / y_true - sigma_train) ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_239": {
                "a": {
                    "value": "(K.abs(y_true - y_pred) / y_true - sigma_test) ** 2 * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_248": {
                "name": {
                    "value": "max_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_max_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cal_max_error(train_set)",
                            "Call"
                        ],
                        [
                            "cal_max_error(train_set)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_249": {
                "name": {
                    "value": "delta_sigma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "delta_sigma_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.sqrt(cal_total_loss(train_set, delta_sigma_square_train) / HS.n_points)",
                            "Call"
                        ],
                        [
                            "math.sqrt(cal_total_loss(train_set, delta_sigma_square_train) / HS.n_points)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_250": {
                "name": {
                    "value": "E",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "E_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cal_total_loss(train_set, mlg.loss.weighted_MSE)",
                            "Call"
                        ],
                        [
                            "cal_total_loss(train_set, mlg.loss.weighted_MSE)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_251": {
                "name": {
                    "value": "sigma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cal_total_loss(train_set, mlg.loss.weighted_MAPE)",
                            "Call"
                        ],
                        [
                            "cal_total_loss(train_set, mlg.loss.weighted_MAPE)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_254": {
                "name": {
                    "value": "max_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_max_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cal_max_error(test_set)",
                            "Call"
                        ],
                        [
                            "cal_max_error(test_set)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_255": {
                "name": {
                    "value": "delta_sigma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "delta_sigma_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.sqrt(cal_total_loss(test_set, delta_sigma_square_test) / HS.n_points)",
                            "Call"
                        ],
                        [
                            "math.sqrt(cal_total_loss(test_set, delta_sigma_square_test) / HS.n_points)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_256": {
                "name": {
                    "value": "E",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "E_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cal_total_loss(test_set, mlg.loss.weighted_MSE)",
                            "Call"
                        ],
                        [
                            "cal_total_loss(test_set, mlg.loss.weighted_MSE)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_257": {
                "name": {
                    "value": "sigma",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cal_total_loss(test_set, mlg.loss.weighted_MAPE)",
                            "Call"
                        ],
                        [
                            "cal_total_loss(test_set, mlg.loss.weighted_MAPE)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_234": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_238": {
                "a": {
                    "value": "mass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_218": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clip_threshold",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.clip_threshold",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_281": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_285": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_235": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_239": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "training/models.py": {
        "tensorflow": {
            "log_18": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_196": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_211": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_228": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k3(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k2(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ],
                        [
                            "self.bihomogeneous_k4(inputs)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "tf.math.log(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_155": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_157": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}