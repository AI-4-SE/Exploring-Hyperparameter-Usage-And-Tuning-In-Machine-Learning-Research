{
    "src/fonduer/learning/dataset.py": {
        "torch": {
            "tensor_124": {
                "data": {
                    "value": "self.features.data[self.features.indptr[i]:self.features.indptr[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[self.word2id[w] if w in self.word2id else self.word2id['<unk>'] for w in s]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "self.features.indices[self.features.indptr[i]:self.features.indptr[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "np.random.randint(self.labels, size=len(self.candidates))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "np.array(self.labels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/fonduer/learning/modules/concat_linear.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outpt_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[intermediate_output_dict[key][0] for key in self.concat_output_keys]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/fonduer/learning/modules/soft_cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "cls_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_full((n,), i, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/fonduer/learning/task.py": {
        "torch": {
            "softmax_56": {
                "input": {
                    "value": "intermediate_output_dict[module_name][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleDict_110": {
                "variable": {
                    "value": "module_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'emb': emb_layer, feature_module_name: SparseLinear(n_features + 1, config['hidden_dim'], bias=config['bias'])}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_179": {
                "variable": {
                    "value": "module_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{feature_module_name: SparseLinear(n_features + 1, config['hidden_dim'], bias=config['bias']), f'{task_name}_pred_head': ConcatLinear([feature_module_name], config['hidden_dim'], n_class)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "src/fonduer/packaging/fonduer_model.py": {
        "torch": {
            "save_371": {
                "obj": {
                    "value": "emmental_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BytesIO()",
                            "Call"
                        ],
                        [
                            "BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_380": {
                "f": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BytesIO()",
                            "Call"
                        ],
                        [
                            "BytesIO()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}