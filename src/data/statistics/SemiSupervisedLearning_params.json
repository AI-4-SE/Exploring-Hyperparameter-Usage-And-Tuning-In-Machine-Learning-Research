{
    "examples/betavae.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "1337",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "unlabelled",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SpriteDataset(transform=lambda x: x.reshape(-1), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(np.arange(len(dset) // 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adagrad_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "x * torch.log(r + 1e-08) + (1 - x) * torch.log(1 - r + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_52": {
                "indices": {
                    "value": "np.arange(len(dset) // 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VariationalAutoencoder([64 ** 2, 10, [1200, 1200]])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}.pt'.format(model.__class__.__name__)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "likelihood - next(beta) * model.kl_divergence",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_19": {
                "input": {
                    "value": "1 - r + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/imgnet_vae.py": {
        "torch": {
            "is_available_23": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "1337",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "labelled",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgnet_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(location, train=True, download=True, transform=flatten_bernoulli, target_transform=onehot(n_labels))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "get_sampler(imgnet_train.train_labels.numpy(), labels_per_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "unlabelled",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgnet_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(location, train=True, download=True, transform=flatten_bernoulli, target_transform=onehot(n_labels))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "get_sampler(imgnet_train.train_labels.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgnet_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(location, train=False, download=True, transform=flatten_bernoulli, target_transform=onehot(n_labels))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "get_sampler(imgnet_valid.test_labels.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=data_path, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([list(filter(lambda idx: labels[idx] == i, indices))[:n] for i in range(n_labels)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_56": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([list(filter(lambda idx: labels[idx] == i, indices))[:n] for i in range(n_labels)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "x * torch.log(r + 1e-08) + (1 - x) * torch.log(1 - r + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "classication_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y * torch.log(logits + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_149": {
                "variable": {
                    "value": "classication_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_161": {
                "variable": {
                    "value": "(_, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classify(x)",
                            "Call"
                        ],
                        [
                            "model.classify(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_162": {
                "variable": {
                    "value": "(_, lab_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "(pred_idx.data == lab_idx.data).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_195": {
                "variable": {
                    "value": "(_, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classify(x)",
                            "Call"
                        ],
                        [
                            "model.classify(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_196": {
                "variable": {
                    "value": "(_, lab_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "variable"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}.pt'.format(model.__class__.__name__)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "1 - r + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_197": {
                "input": {
                    "value": "(pred_idx.data == lab_idx.data).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "y * torch.log(logits + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_149": {
                "input": {
                    "value": "logits + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_187": {
                "input": {
                    "value": "logits + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mnist_sslvae.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "1337",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "labelled",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(location, train=True, download=True, transform=flatten_bernoulli, target_transform=onehot(n_labels))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "get_sampler(mnist_train.train_labels.numpy(), labels_per_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "unlabelled",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(location, train=True, download=True, transform=flatten_bernoulli, target_transform=onehot(n_labels))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "get_sampler(mnist_train.train_labels.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "validation",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(location, train=False, download=True, transform=flatten_bernoulli, target_transform=onehot(n_labels))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.is_available()",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "get_sampler(mnist_valid.test_labels.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([list(filter(lambda idx: labels[idx] == i, indices))[:n] for i in range(n_labels)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_41": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([list(filter(lambda idx: labels[idx] == i, indices))[:n] for i in range(n_labels)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_14": {
                "input": {
                    "value": "x * torch.log(r + 1e-08) + (1 - x) * torch.log(1 - r + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "classication_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y * torch.log(logits + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "classication_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classify(x)",
                            "Call"
                        ],
                        [
                            "model.classify(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_119": {
                "variable": {
                    "value": "(_, lab_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "(pred_idx.data == lab_idx.data).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_152": {
                "variable": {
                    "value": "(_, pred_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classify(x)",
                            "Call"
                        ],
                        [
                            "model.classify(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_153": {
                "variable": {
                    "value": "(_, lab_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "variable"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}.pt'.format(model.__class__.__name__)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_14": {
                "input": {
                    "value": "1 - r + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_154": {
                "input": {
                    "value": "(pred_idx.data == lab_idx.data).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "y * torch.log(logits + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_106": {
                "input": {
                    "value": "logits + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_144": {
                "input": {
                    "value": "logits + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "semi-supervised/inference/distributions.py": {
        "torch": {
            "softmax_39": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_13": {
                "input": {
                    "value": "-0.5 * math.log(2 * math.pi) - x ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "log_pdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * math.log(2 * math.pi) - log_var / 2 - (x - mu) ** 2 / (2 * torch.exp(log_var))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "p * torch.log(prior + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_26": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "prior + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "semi-supervised/inference/variational.py": {
        "torch": {
            "mean_29": {
                "variable": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sum_exp(elbo, dim=1, sum_op=torch.mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(logits, L)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L + H",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_101": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sampler(elbo)",
                            "Call"
                        ],
                        [
                            "L.view_as(logits.t()).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(logits, L), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "torch.mul(logits, torch.log(logits + 1e-08))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_109": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.classify(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sampler(elbo)",
                            "Call"
                        ],
                        [
                            "L.view_as(logits.t()).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(logits, L), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.classify(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(logits + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "logits + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "semi-supervised/layers/flow.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_21": {
                "variable": {
                    "value": "uw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_33": {
                "variable": {
                    "value": "psi_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - F.tanh(zwb) ** 2).view(-1, 1) * self.w.view(1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "vec": {
                    "value": "uhat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u + (muw - uw) * torch.transpose(self.w, 0, -1) / torch.sum(self.w ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_37": {
                "variable": {
                    "value": "logdet_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(1 + psi_u) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.flows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[flow_type(in_features) for _ in range(n_flows)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_16": {
                "*size": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_22": {
                "input": {
                    "value": "uw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.dot(self.u, self.w)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_26": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "self.w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "input": {
                    "value": "zwb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mv(z, self.w) + self.b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_37": {
                "input": {
                    "value": "1 + psi_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "input": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "input": {
                    "value": "zwb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mv(z, self.w) + self.b",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "semi-supervised/layers/stochastic.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_44": {
                "variable": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_var(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_64": {
                "variable": {
                    "value": "log_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_var(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_72": {
                "variable": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_distributions * out_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits(x).view(-1, self.n_distributions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reparametrize(logits, tau).view(-1, self.n_distributions, self.out_features)",
                            "Call"
                        ],
                        [
                            "torch.mean(sample, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits + gumbel) / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_102": {
                "*size": {
                    "value": "logits.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "epsilon + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "log_var2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(self.log_var(z))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "semi-supervised/models/dgm.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logits(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.decoder.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.reconstruction.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[LadderEncoder([neurons[i - 1], neurons[i], z_dim[i - 1]]) for i in range(1, len(neurons))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[LadderDecoder([z_dim[i - 1], h_dim[i - 1], z_dim[i]]) for i in range(1, len(h_dim))][::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "[x, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[x, y, q_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semi-supervised/models/vae.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(map(lambda d: nn.Linear(*d), list(zip(dims, dims[1:]))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(neurons[i - 1], neurons[i]) for i in range(1, len(neurons))]",
                            "ListComp"
                        ],
                        [
                            "[nn.Linear(neurons[i - 1], neurons[i]) for i in range(1, len(neurons))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(neurons[i - 1], neurons[i]) for i in range(1, len(neurons))]",
                            "ListComp"
                        ],
                        [
                            "[nn.Linear(neurons[i - 1], neurons[i]) for i in range(1, len(neurons))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_84": {
                "variable": {
                    "value": "self.output_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_235": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchnorm(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_260": {
                "variable": {
                    "value": "self.batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_264": {
                "variable": {
                    "value": "self.batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_276": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchnorm2(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[LadderEncoder([neurons[i - 1], neurons[i], z_dim[i - 1]]) for i in range(1, len(neurons))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_302": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[LadderDecoder([z_dim[i - 1], h_dim[i - 1], z_dim[i]]) for i in range(1, len(h_dim))][::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qz - pz",
                            "BinOp"
                        ],
                        [
                            "qz * (torch.log(qz + 1e-08) - torch.log(1.0 / k))",
                            "BinOp"
                        ],
                        [
                            "kl.view(-1, self.n_samples, self.z_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_271": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchnorm1(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "neurons[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "neurons[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "neurons[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_202": {
                "input": {
                    "value": "1.0 / k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "*d",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "semi-supervised/utils.py": {
        "torch": {
            "cat_23": {
                "variable": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch(batch_size, i) for i in range(y_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, y_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "sum_op(torch.exp(tensor - max), dim=dim, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "tensor - max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}