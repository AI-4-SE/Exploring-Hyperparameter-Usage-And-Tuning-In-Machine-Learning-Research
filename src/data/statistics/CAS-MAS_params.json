{
    "trainer.py": {
        "sklearn": {
            "f1_score_286": {
                "variable": {
                    "value": "f1scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_1070": {
                "variable": {
                    "value": "f1scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_1128": {
                "variable": {
                    "value": "f1scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_876": {
                "variable": {
                    "value": "f1scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "label.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds.cpu().data.numpy().tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_562": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_1462": {
                "variable": {
                    "value": "best_dag",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_dag_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_path",
                            "variable"
                        ],
                        [
                            "''",
                            "str"
                        ],
                        [
                            "path",
                            "variable"
                        ]
                    ]
                }
            },
            "save_368": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_629": {
                "obj": {
                    "value": "best_dag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.derive()",
                            "Call"
                        ],
                        [
                            "self.get_best_dag()",
                            "Call"
                        ],
                        [
                            "[best_dag]",
                            "List"
                        ],
                        [
                            "dag",
                            "variable"
                        ],
                        [
                            "t.load(best_dag_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'best_dag.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1495": {
                "obj": {
                    "value": "self.shared.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.shared_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_1498": {
                "obj": {
                    "value": "self.controller.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.controller_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1551": {
                "variable": {
                    "value": "checkpoint_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(load_path, 'checkpoint_tracker.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_373": {
                "variable": {
                    "value": "checkpoint_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'checkpoint_tracker.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_393": {
                "obj": {
                    "value": "checkpoint_tracker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.load(os.path.join(self.args.model_dir, 'checkpoint_tracker.dat'))",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "t.load(os.path.join(self.args.load_path, 'checkpoint_tracker.dat'))",
                            "Call"
                        ],
                        [
                            "t.load(os.path.join(self.args.model_dir, 'checkpoint_tracker.dat'))",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "t.load(os.path.join(load_path, 'checkpoint_tracker.dat'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'checkpoint_tracker.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_433": {
                "variable": {
                    "value": "checkpoint_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.load_path, 'checkpoint_tracker.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1097": {
                "variable": {
                    "value": "dag",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'best_dag.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_1272": {
                "variable": {
                    "value": "ortho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t.t(p1 - p2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_1355": {
                "obj": {
                    "value": "best_dag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.derive()",
                            "Call"
                        ],
                        [
                            "self.get_best_dag()",
                            "Call"
                        ],
                        [
                            "[best_dag]",
                            "List"
                        ],
                        [
                            "dag",
                            "variable"
                        ],
                        [
                            "t.load(best_dag_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'networks', dag_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1505": {
                "variable": {
                    "value": "checkpoint_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'checkpoint_tracker.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1528": {
                "obj": {
                    "value": "checkpoint_tracker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.load(os.path.join(self.args.model_dir, 'checkpoint_tracker.dat'))",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "t.load(os.path.join(self.args.load_path, 'checkpoint_tracker.dat'))",
                            "Call"
                        ],
                        [
                            "t.load(os.path.join(self.args.model_dir, 'checkpoint_tracker.dat'))",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "t.load(os.path.join(load_path, 'checkpoint_tracker.dat'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.model_dir, 'checkpoint_tracker.dat')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1574": {
                "f": {
                    "value": "f'{load_path}/shared_epoch{self.epoch}_step{self.shared_step}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "load_428": {
                "f": {
                    "value": "self.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "load_461": {
                "f": {
                    "value": "self.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "load_1579": {
                "f": {
                    "value": "f'{load_path}/controller_epoch{self.epoch}_step{self.controller_step}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "load_1582": {
                "f": {
                    "value": "f'{load_path}/controller_epoch{self.epoch}_step{self.controller_step}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "lambda storage, loc: storage",
                            "Lambda"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "t_1272": {
                "input": {
                    "value": "p1 - p2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "common_loader.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/controller.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_total_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(self.num_tokens)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "args.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_40": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self._decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "prev_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.stack(prev_nodes).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "prev_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.stack(activations).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.args.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "chunk_132": {
                "variable": {
                    "value": "sub_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_nodes[k]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_dags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_133": {
                "variable": {
                    "value": "sub_func_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.num_dags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoders[block_idx](hx)",
                            "Call"
                        ],
                        [
                            "self.args.tanh_c * F.tanh(logits)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "self.args.tanh_c * F.tanh(logits / self.args.softmax_temperature)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "variable"
                        ]
                    ]
                }
            },
            "log_softmax_111": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoders[block_idx](hx)",
                            "Call"
                        ],
                        [
                            "self.args.tanh_c * F.tanh(logits)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "self.args.tanh_c * F.tanh(logits / self.args.softmax_temperature)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.args.controller_hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "entropies",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoders[block_idx](hx)",
                            "Call"
                        ],
                        [
                            "self.args.tanh_c * F.tanh(logits)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "self.args.tanh_c * F.tanh(logits / self.args.softmax_temperature)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "variable"
                        ]
                    ]
                }
            },
            "tanh_81": {
                "input": {
                    "value": "logits / self.args.softmax_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/nas_rnn.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.w_xh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size + self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.w_xc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size + self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self._w_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.w_h[idx][jdx] for idx in self.w_h for jdx in self.w_h[idx]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self._w_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.w_c[idx][jdx] for idx in self.w_c for jdx in self.w_c[idx]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "c[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_xc(t.cat([x, h_prev], -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t.stack(leaf_nodes, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.batchnorm_momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.w_h[idx][jdx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.w_c[idx][jdx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "leaf_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h[node_id] for node_id in leaf_node_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[x, h_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "c[next_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "w_c(h[node_id])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[x, h_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[x, h_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/rte_classifier.py": {
        "torch": {
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.mlp_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.seq_count * 4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([parameter for parameter in self.scalar_parameters])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_114": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(torch.cat([parameter for parameter in self.scalar_parameters]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(normed_weights, split_size_or_sections=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "outputs_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(outputs_fw)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "variable": {
                    "value": "outputs_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(outputs_bw)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_fw, outputs_bw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "final_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(premise_rep, hypo_rep, premise_rep - hypo_rep, premise_rep * hypo_rep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_layer(mlp_out)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.proj_layer[self.args.dataset](mlp_out)",
                            "Call"
                        ],
                        [
                            "self.proj_layer(mlp_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "final_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(premise_rep, hypo_rep, premise_rep - hypo_rep, premise_rep * hypo_rep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_48": {
                "variable": {
                    "value": "self.scalar_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.FloatTensor([1.0]), requires_grad=True) for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_59": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.birnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self._proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[v for (k, v) in self.proj_layer.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_240": {
                "variable": {
                    "value": "premise_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(premise_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_268": {
                "variable": {
                    "value": "hypo_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(hypo_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_layer(mlp_out)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.proj_layer[self.args.dataset](mlp_out)",
                            "Call"
                        ],
                        [
                            "self.proj_layer(mlp_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 768",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.proj_layer[qnli]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.proj_layer[wnli]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.proj_layer[rte]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self._proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[v for (k, v) in self.proj_layer.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.proj_layer[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[parameter for parameter in self.scalar_parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "outputs_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.transpose(torch.stack(outputs_fw), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_147": {
                "tensors": {
                    "value": "outputs_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs_bw[::-1]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(torch.stack(outputs_bw), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_197": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "F.softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "probs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "self.seq_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "self.seq_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_181": {
                "input": {
                    "value": "premise_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_outputs * mask_p.unsqueeze(2).expand_as(premise_outputs)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.birnn_encoder(premise_emb, dag[0])",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(premise_emb, dag)",
                            "Call"
                        ],
                        [
                            "premise_outputs * mask_p.unsqueeze(2).expand_as(premise_outputs)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(torch.stack(premise_outputs), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_182": {
                "input": {
                    "value": "hypo_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypo_outputs * mask_h.unsqueeze(2).expand_as(hypo_outputs)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag)",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag[1])",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag[0])",
                            "Call"
                        ],
                        [
                            "hypo_outputs * mask_h.unsqueeze(2).expand_as(hypo_outputs)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(torch.stack(hypo_outputs), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_240": {
                "tensors": {
                    "value": "premise_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_outputs * mask_p.unsqueeze(2).expand_as(premise_outputs)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.birnn_encoder(premise_emb, dag[0])",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(premise_emb, dag)",
                            "Call"
                        ],
                        [
                            "premise_outputs * mask_p.unsqueeze(2).expand_as(premise_outputs)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(torch.stack(premise_outputs), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_268": {
                "tensors": {
                    "value": "hypo_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypo_outputs * mask_h.unsqueeze(2).expand_as(hypo_outputs)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag)",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag[1])",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag[0])",
                            "Call"
                        ],
                        [
                            "hypo_outputs * mask_h.unsqueeze(2).expand_as(hypo_outputs)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(torch.stack(hypo_outputs), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_276": {
                "input": {
                    "value": "premise_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "premise_outputs * mask_p.unsqueeze(2).expand_as(premise_outputs)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.birnn_encoder(premise_emb, dag[0])",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(premise_emb, dag)",
                            "Call"
                        ],
                        [
                            "premise_outputs * mask_p.unsqueeze(2).expand_as(premise_outputs)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(torch.stack(premise_outputs), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_277": {
                "input": {
                    "value": "hypo_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hypo_outputs * mask_h.unsqueeze(2).expand_as(hypo_outputs)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag)",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag[1])",
                            "Call"
                        ],
                        [
                            "self.birnn_encoder(hypo_emb, dag[0])",
                            "Call"
                        ],
                        [
                            "hypo_outputs * mask_h.unsqueeze(2).expand_as(hypo_outputs)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(torch.stack(hypo_outputs), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_299": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "F.softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_49": {
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_307": {
                "input": {
                    "value": "probs[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/shared_base.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "Tensor_147": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}