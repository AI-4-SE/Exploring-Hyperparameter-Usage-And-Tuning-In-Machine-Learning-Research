{
    "data.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(data.x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_24": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.graph_atts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GraphAttConvOneHead(in_features, out_perhead, dropout=dropout) for _ in range(heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(input, adj) for att in self.graph_atts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, 2 * out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_70": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.a.mm(edge_h).squeeze())",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge[0], n)",
                            "Call"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_74": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "edge_h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[edge[0, :], :], h[edge[1, :], :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_76": {
                "variable": {
                    "value": "edge_h",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "size": {
                    "value": "(1, 2 * out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "OUT_PATH + 'checkpoint-best-acc.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "OUT_PATH + 'checkpoint-best-acc.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "OUT_PATH + 'checkpoint-best-loss.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}