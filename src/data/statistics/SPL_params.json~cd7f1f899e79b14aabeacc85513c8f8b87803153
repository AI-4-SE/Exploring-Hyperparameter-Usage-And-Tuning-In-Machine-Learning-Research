{
    "dataset.py": {
        "torch": {
            "DistributedSampler_143": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_name=dataset_name, flist=flist, mask_flist=mask_flist, test_mask_index=test_mask_index, augment=augment, training=training, input_size=input_size)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_name=dataset_name, flist=flist, mask_flist=mask_flist, test_mask_index=test_mask_index, augment=augment, training=training, input_size=input_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, num_replicas=world_size, rank=rank, shuffle=shuffle)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset_test.py": {
        "torch": {
            "DataLoader_147": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(dataset_name=dataset_name, flist=flist, mask_flist=mask_flist, test_mask_index=test_mask_index, augment=augment, training=training, input_size=input_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "eval_final.py": {
        "torch": {
            "load_182": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_187": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_batch.cuda(device)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask_batch, 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(mask_batch.detach().permute(0, 2, 3, 1).cpu().numpy()[:, :, :, 0] * 255).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_63": {
                "variable": {
                    "value": "mask_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_batch.cuda(device)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask_batch, 1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "(mask_batch.detach().permute(0, 2, 3, 1).cpu().numpy()[:, :, :, 0] * 255).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "gt_512_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_256_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_batch * (1.0 - mask_batch) + mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "model.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_191": {
                "variable": {
                    "value": "model.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "set_device_79": {
                "device": {
                    "value": "opt.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "mask_64",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask, 1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "g_l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.l1_loss_feature(prediction, gt) * (1 + 2 * mask)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_135": {
                "variable": {
                    "value": "g_l1_FM_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.l1_loss_feature(img_f_pred, img_f_full) * (1 + 3 * mask_64)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_out_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.save_folder + '/' + 'x_' + hostname + opt.model_type + '_' + opt.prefix + '_bs_{}_epoch_{}.pt'.format(opt.bs, epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_101": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask, 1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "mask_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask, 1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "gt_512_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_256_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt * (1.0 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "gt_batch * (1.0 - mask_batch) + mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_batch.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask_batch, 1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_216": {
                "variable": {
                    "value": "mask_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_batch.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(mask_batch, 1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_218": {
                "variable": {
                    "value": "gt_512_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_256_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt * (1.0 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "gt_batch * (1.0 - mask_batch) + mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_256": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "pretained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.pretrained_sr)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(opt.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models_inpaint.py": {
        "torch": {
            "L1Loss_68": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_69": {
                "variable": {
                    "value": "self.l1_loss_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_79": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_81": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "self.gen_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.generator.parameters(), 'lr': float(self.g_lr)}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(self.g_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "self.dis_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(self.d_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BCELoss_28": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "state_xL",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "TRresNet_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "target_real_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "data": {
                    "value": "target_fake_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_31": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "module_util.py": {
        "torch": {
            "meshgrid_113": {
                "variable": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, H)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "vgrid_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vgrid_x, vgrid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_122": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "vgrid_scaled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack((vgrid_x, vgrid_y), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "interp_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[DenseLayer(in_channels + growth_rate * i, growth_rate) for i in range(num_layers)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.lff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + growth_rate * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_42": {
                "variable": {
                    "value": "self.encoder_prePad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.encoder_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.encoder_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.encoder_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.encoder_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.encoder_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.encoder_relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_62": {
                "variable": {
                    "value": "self.encoder_prePad_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.encoder_conv1_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "variable": {
                    "value": "self.encoder_relu1_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.encoder_conv2_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "variable": {
                    "value": "self.encoder_relu2_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.encoder_conv3_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "variable": {
                    "value": "self.encoder_relu3_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.encoder_conv4_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "variable": {
                    "value": "self.encoder_relu4_sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.encoder_sm_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.rdbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RDB(self.G0, self.G, self.C)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.gff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.G0 * self.D, self.G0, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.feature_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResnetBlock(256, dilation=1, use_spectral_norm=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.feature_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "152",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 128 * 4, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=in_channels, out_channels=64, kernel_size=4, stride=2, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=64, out_channels=128, kernel_size=4, stride=2, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=128, out_channels=256, kernel_size=4, stride=2, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=256, out_channels=512, kernel_size=4, stride=1, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=512, out_channels=1, kernel_size=4, stride=1, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SPADE(dim, layout_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_18": {
                "tensors": {
                    "value": "[x, self.relu(self.conv(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_215": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv5(conv4)",
                            "Call"
                        ]
                    ]
                }
            },
            "spectral_norm_283": {
                "module": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "self.G0 * self.D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.G0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "self.G0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.G0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_97": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_102": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_106": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "(masked_512, mask_512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_182": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_187": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_192": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_197": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_226": {
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_231": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_250": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_251": {
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_257": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "local_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder_prePad(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_in1(x, mask)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_in2(x, mask)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_in3(x, mask)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu3(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_prePad_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv1_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu2_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv2_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu2_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv3_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu3_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_conv4_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_relu4_sm(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_input, mask)",
                            "Call"
                        ],
                        [
                            "sub_block(x, layout)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "(torch.tanh(x) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rn.py": {
        "torch": {
            "BatchNorm2d_8": {
                "variable": {
                    "value": "self.bn_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "Sr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "(sa_map.detach() >= self.threshold).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_43": {
                "variable": {
                    "value": "self.IN_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feature_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "Sr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "(sa_map.detach() >= self.threshold).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.foreground_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(feature_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.foreground_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(feature_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.background_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(feature_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.background_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(feature_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "(sa_map.detach() >= self.threshold).float()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if kernel_size == 7 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_114": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.gamma_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if kernel_size == 7 else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.beta_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 if kernel_size == 7 else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mean_120": {
                "variable": {
                    "value": "avg_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([avg_out, max_out], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_121": {
                "variable": {
                    "value": "(max_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([avg_out, max_out], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[avg_out, max_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_174": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "segmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "feature_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "feature_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "feature_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "feature_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "input": {
                    "value": "Sr / (shape[0] * shape[2] * shape[3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "Sr / (shape[2] * shape[3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/helper_functions/helper_functions.py": {
        "torch": {
            "zeros_112": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 80)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss_functions/losses.py": {
        "torch": {
            "sigmoid_24": {
                "variable": {
                    "value": "x_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "self.xs_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_112": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "variable": {
                    "value": "self.targets_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_126": {
                "variable": {
                    "value": "xs_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ],
                        [
                            "log_preds * asymmetric_w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_130": {
                "variable": {
                    "value": "asymmetric_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - xs_pos - xs_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma_pos * targets + self.gamma_neg * anti_targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_45": {
                "variable": {
                    "value": "one_sided_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - pt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "one_sided_gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gamma_pos * y + self.gamma_neg * (1 - y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_98": {
                "variable": {
                    "value": "self.asymmetric_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.xs_pos - self.xs_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma_pos * self.targets + self.gamma_neg * self.anti_targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_33": {
                "input": {
                    "value": "xs_pos.clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_34": {
                "input": {
                    "value": "xs_neg.clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "self.xs_pos.clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_40": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_47": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "self.xs_neg.clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_95": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_101": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/tresnet/layers/anti_aliasing.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_39": {
                "variable": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_59": {
                "variable": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "input": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(input, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(input, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_60": {
                "input": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(input, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.pad(input, (1, 1, 1, 1), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "filt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(a[:, None] * a[None, :]).clone().detach()",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "(a[:, None] * a[None, :]).clone().detach()",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_55": {
                "input": {
                    "value": "filt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(a[:, None] * a[None, :]).clone().detach()",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "(a[:, None] * a[None, :]).clone().detach()",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/tresnet/layers/avg_pool.py": {
        "torch": {}
    },
    "src/models/tresnet/layers/general_layers.py": {
        "torch": {
            "Conv2d_81": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduction_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu6_73": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/tresnet/tresnet.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.embedding_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.embedding_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.embedding_generator",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "nn.Conv2d(ni, nf, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.Conv2d(ni, nf, kernel_size=kernel_size, stride=stride, padding=kernel_size // 2, groups=groups, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('SpaceToDepth', space_to_depth), ('conv1', conv1), ('layer1', layer1), ('layer2', layer2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ni",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "ni",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_ABN(inplanes, planes, stride=1, activation_param=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_ABN(planes, planes, kernel_size=3, stride=1, activation='leaky_relu', activation_param=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "m.conv2[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(m.conv2[1].weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "m.conv3[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(m.conv3[1].weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_186": {
                "input": {
                    "value": "m.conv2[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_188": {
                "input": {
                    "value": "m.conv3[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_197": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/torchlight/gpu.py": {
        "torch": {
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchlight/torchlight/io.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(weights_path)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[''.join(k.split('module.')), v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.work_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/activations.py": {
        "torch": {
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_30": {
                "variable": {
                    "value": "sx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_54": {
                "variable": {
                    "value": "sx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_55": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_70": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_10": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_41": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "hardtanh_17": {
                "input": {
                    "value": "x + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_49": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_49": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "zeros_594": {
                "variable": {
                    "value": "labels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nL, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedSampler_67": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(path, imgsz, batch_size, augment=augment, hyp=hyp, rect=rect, cache_images=cache, single_cls=opt.single_cls, stride=int(stride), pad=pad, rank=rank)",
                            "Call"
                        ],
                        [
                            "'path/dataset_bmp'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_370": {
                "variable": {
                    "value": "cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(Path(self.label_files[0]).parent) + '.cache'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_508": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.arange(0, 256, dtype=np.int16)",
                            "Call"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "xy[:, [0, 2, 4, 6]]",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.labels[index]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.img_files[index]",
                            "Subscript"
                        ],
                        [
                            "self.files[self.count]",
                            "Subscript"
                        ],
                        [
                            "self.files[self.count]",
                            "Subscript"
                        ],
                        [
                            "'path/images'",
                            "MethodArgument"
                        ],
                        [
                            "'path/images.txt'",
                            "MethodArgument"
                        ],
                        [
                            "'./new'",
                            "MethodArgument"
                        ],
                        [
                            "'../coco128'",
                            "MethodArgument"
                        ],
                        [
                            "'labels.cache'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_596": {
                "variable": {
                    "value": "labels_out[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "np.append(labels, [[labels[i, 0], x1a, y1a, x2a, y2a]], axis=0)",
                            "Call"
                        ],
                        [
                            "labels[ioa < 0.6]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate((labels, labels2), 0)",
                            "Call"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_602": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.imread(f)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_609": {
                "tensors": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w0 * r), int(h0 * r)), interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), borderValue=(114, 114, 114))",
                            "Call"
                        ],
                        [
                            "cv2.imread(f)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, auto=self.rect)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "(img * r + img2 * (1 - r)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_609": {
                "tensors": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/general.py": {
        "torch": {
            "set_printoptions_31": {
                "linewidth": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "precision": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "profile": {
                    "value": "long",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_424": {
                "variable": {
                    "value": "inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wh1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "wh1[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "prod_424": {
                "variable": {
                    "value": "inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_487": {
                "variable": {
                    "value": "BCEcls",
                    "type": "Variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.Tensor([h['cls_pw']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_488": {
                "variable": {
                    "value": "BCEobj",
                    "type": "Variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.Tensor([h['obj_pw']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_548": {
                "variable": {
                    "value": "gain",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_549": {
                "variable": {
                    "value": "ai",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "na",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.anchor_grid.numel() // 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_550": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets.repeat(na, 1, 1), ai[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_684": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Path(s).name",
                            "Attribute"
                        ],
                        [
                            "['study/study_coco_yolov5%s.txt' % x for x in ['s', 'm', 'l', 'x']]",
                            "ListComp"
                        ],
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "'weights/best.pt'",
                            "MethodArgument"
                        ],
                        [
                            "'study.txt'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_824": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes * scale, dataset.labels)])).float()",
                            "Call"
                        ],
                        [
                            "wh0[(wh0 >= 2.0).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(wh, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_825": {
                "variable": {
                    "value": "wh0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wh0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([l[:, 3:5] * s for (s, l) in zip(shapes, dataset.labels)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(wh0, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "iou * scores[None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_444": {
                "variable": {
                    "value": "pred_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "o",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_467": {
                "variable": {
                    "value": "self.loss_fcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_472": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "o",
                            "Name"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_504": {
                "variable": {
                    "value": "tobj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_691": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "x[np.argsort(-fitness(x))]",
                            "Subscript"
                        ],
                        [
                            "box[0] / width + w / 2",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.arange(y.shape[1]) if x is None else np.array(x)",
                            "IfExp"
                        ],
                        [
                            "pd.DataFrame(b.transpose(), columns=['x', 'y', 'width', 'height'])",
                            "Call"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "f": {
                    "value": "s or f",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "new_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_anchors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)",
                            "Call"
                        ],
                        [
                            "torch.tensor(new_anchors, device=m.anchors.device).type_as(m.anchors)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "m.anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "x[np.argsort(-fitness(x))]",
                            "Subscript"
                        ],
                        [
                            "box[0] / width + w / 2",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.arange(y.shape[1]) if x is None else np.array(x)",
                            "IfExp"
                        ],
                        [
                            "pd.DataFrame(b.transpose(), columns=['x', 'y', 'width', 'height'])",
                            "Call"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_218": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "x[np.argsort(-fitness(x))]",
                            "Subscript"
                        ],
                        [
                            "box[0] / width + w / 2",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.arange(y.shape[1]) if x is None else np.array(x)",
                            "IfExp"
                        ],
                        [
                            "pd.DataFrame(b.transpose(), columns=['x', 'y', 'width', 'height'])",
                            "Call"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_482": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_514": {
                "variable": {
                    "value": "pbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pxy, pwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_540": {
                "tensors": {
                    "value": "(lbox, lobj, lcls, loss)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "data": {
                    "value": "[[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_576": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(j), j, k, l, m)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_637": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box[i], x[i, j + 5, None], j[:, None].float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1014": {
                "input": {
                    "value": "torch.from_numpy(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_95": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_375": {
                "input": {
                    "value": "b1_x2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_375": {
                "input": {
                    "value": "b1_x1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_376": {
                "input": {
                    "value": "b1_y2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_376": {
                "input": {
                    "value": "b1_y1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_475": {
                "input": {
                    "value": "(dx - 1) / (self.alpha + 0.0001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_523": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps[:, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "cn",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_560": {
                "data": {
                    "value": "p[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_593": {
                "tensors": {
                    "value": "(gxy - gij, gwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_684": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_781": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_786": {
                "data": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k * s",
                            "BinOp"
                        ],
                        [
                            "print_results(k)",
                            "Call"
                        ],
                        [
                            "k[np.argsort(k.prod(1))]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_640": {
                "tensors": {
                    "value": "(box, conf, j.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_365": {
                "input": {
                    "value": "b1_x2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_365": {
                "input": {
                    "value": "b1_x1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_366": {
                "input": {
                    "value": "b1_y2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_366": {
                "input": {
                    "value": "b1_y1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_567": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_576": {
                "input": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(tp.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.max(r, 1.0 / r).max(2)[0] < model.hyp['anchor_t']",
                            "Compare"
                        ],
                        [
                            "torch.stack((torch.ones_like(j), j, k, l, m))",
                            "Call"
                        ],
                        [
                            "y[3].argmax() + 1",
                            "BinOp"
                        ],
                        [
                            "[i, i + 5]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_668": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "iou * scores[None]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1014": {
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "x[xc[xi]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((box[i], x[i, j + 5, None], j[:, None].float()), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((box, conf, j.float()), 1)[conf.view(-1) > conf_thres]",
                            "Subscript"
                        ],
                        [
                            "x[(x[:, 5:6] == torch.tensor(classes, device=x.device)).any(1)]",
                            "Subscript"
                        ],
                        [
                            "torch.load(f, map_location=torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "torch.min(r, 1.0 / r).min(2)[0]",
                            "Subscript"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "x[np.argsort(-fitness(x))]",
                            "Subscript"
                        ],
                        [
                            "box[0] / width + w / 2",
                            "BinOp"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.arange(y.shape[1]) if x is None else np.array(x)",
                            "IfExp"
                        ],
                        [
                            "pd.DataFrame(b.transpose(), columns=['x', 'y', 'width', 'height'])",
                            "Call"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_384": {
                "input": {
                    "value": "torch.atan(w2 / h2) - torch.atan(w1 / h1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_416": {
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_416": {
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_578": {
                "input": {
                    "value": "gxy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t[:, 2:4]",
                            "Subscript"
                        ],
                        [
                            "t[:, 2:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_920": {},
            "tensor_644": {
                "data": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels[:, 0].astype(np.int)",
                            "Call"
                        ],
                        [
                            "image_targets[:, 1].astype('int')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_384": {
                "input": {
                    "value": "w1 / h1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/google_utils.py": {
        "torch": {}
    },
    "utils/torch_utils.py": {
        "torch": {
            "Conv2d_109": {
                "variable": {
                    "value": "fusedconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_119": {
                "variable": {
                    "value": "w_bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.div(torch.sqrt(bn.eps + bn.running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "model.fc.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "model.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n, filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_count_38": {
                "variable": {
                    "value": "ng",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_51": {
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_178": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=s, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'Using torch {torch.__version__} '",
                            "JoinedStr"
                        ],
                        [
                            "' ' * len(s)",
                            "BinOp"
                        ],
                        [
                            "(int(h * ratio), int(w * ratio))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_120": {
                "input": {
                    "value": "w_bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "conv.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "conv.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_182": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=s, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, w - s[1], 0, h - s[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.447",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_device_properties_41": {
                "device": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(0, ng)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_unstructured_100": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.modules()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "amount": {
                    "value": "amount",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "remove_101": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.modules()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_119": {
                "input": {
                    "value": "bn.eps + bn.running_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_125": {
                "input": {
                    "value": "w_bn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_conv.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}