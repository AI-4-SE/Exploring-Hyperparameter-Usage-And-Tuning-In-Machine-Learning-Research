{
    "Utils/inception_score.py": {
        "tensorflow": {
            "GraphDef_73": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_75": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_71": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_90": {
                "variable": {
                    "value": "o._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "squeeze_92": {
                "input": {
                    "value": "pool3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Utils/ops.py": {
        "tensorflow": {
            "batch_norm_with_global_normalization_42": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_after_normalization": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(preds, name='preds')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_63": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(targets, name='targets')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[x, y * tf.ones([x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_h, output_shape[-1], input_.get_shape()[-1]], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_h, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_109": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "w_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_135": {
                "variable": {
                    "value": "w_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "r_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rf",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[r_f, classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_concat_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_16": {
                "variable": {
                    "value": "self.ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "input_tensor": {
                    "value": "-(targets * tf.log(preds + eps) + (1.0 - targets) * tf.log(1.0 - preds + eps))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'gt'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'gt'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_92": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_h, output_shape[-1], input_.get_shape()[-1]], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'gt'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'gt'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'gt'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_81": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_101": {
                "value": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_30": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_71": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_80": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_100": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_121": {
                "value": {
                    "value": "bias_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "seq_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seq_outputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "w_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', [output_size, output_size], tf.float32, tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_151": {
                "value": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_32": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_37": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_142": {
                "x": {
                    "value": "tf.matmul(seq_out, w_1) + tf.matmul(decoder_output, w_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_25": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_27": {
                "mean": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "identity_38": {
                "input": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_64": {
                "x": {
                    "value": "preds + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_65": {
                "x": {
                    "value": "1.0 - preds + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "a": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w2', [output_size, output_size], tf.float32, tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "create_dataset.py": {
        "tensorflow": {
            "InteractiveSession_83": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_86": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_89": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_90": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_88": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "decoder.py": {
        "tensorflow": {
            "DEFINE_string_30": {
                "name": {
                    "value": "input_codes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of binary code file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "iteration",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The max quality level of the images to output. Use -1 to infer from loaded  codes.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to save decoded images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of compression model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_98": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_102": {
                "variable": {
                    "value": "encoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_66": {
                "filename": {
                    "value": "FLAGS.output_directory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_67": {
                "dirname": {
                    "value": "FLAGS.output_directory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_69": {
                "filename": {
                    "value": "FLAGS.input_codes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FastGFile_74": {
                "name": {
                    "value": "FLAGS.input_codes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_96": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_112": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FastGFile_95": {
                "name": {
                    "value": "FLAGS.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_120": {
                "name": {
                    "value": "os.path.join(FLAGS.output_directory, 'image_{0:02d}.png'.format(index))",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "encoder.py": {
        "tensorflow": {
            "DEFINE_string_32": {
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of input image. We rely on tf.image to decode the image, so only PNG and JPEG formats are currently supported.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "iteration",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Quality level for encoding image. Must be between 0 and 15 inclusive.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "output_codes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "File to save output encoding.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of compression model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_70": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "decoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_png(input_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(decoded_image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(input_image, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_62": {
                "name": {
                    "value": "FLAGS.input_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_68": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_png_79": {
                "variable": {
                    "value": "decoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_86": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FastGFile_100": {
                "name": {
                    "value": "FLAGS.output_codes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_67": {
                "name": {
                    "value": "FLAGS.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "decode_jpeg_81": {
                "variable": {
                    "value": "decoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_images.py": {
        "tensorflow": {
            "InteractiveSession_81": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_87": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_88": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_86": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "placeholder_26": {
                "variable": {
                    "value": "t_real_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.options['batch_size'], img_size, img_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "t_wrong_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.options['batch_size'], img_size, img_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "wrong_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "t_real_caption",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.options['batch_size'], self.options['caption_vector_length']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_captions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "t_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.options['batch_size'], self.options['z_dim']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "t_real_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.options['batch_size'], self.options['n_classes']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "t_wrong_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.options['batch_size'], self.options['n_classes']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "wrong_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "t_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_70": {
                "variable": {
                    "value": "d_right_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(disc_real_image_aux, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(t_real_classes, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "d_right_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(d_right_predictions, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_75": {
                "variable": {
                    "value": "d_wrong_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(disc_wrong_image_aux, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(t_wrong_classes, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "d_wrong_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(d_wrong_predictions, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_80": {
                "variable": {
                    "value": "d_fake_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(disc_fake_image_aux_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(t_real_classes, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "d_fake_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(d_fake_predictions, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "g_loss_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake_image_logits, labels=tf.ones_like(disc_fake_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "g_loss_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake_image_aux_logits, labels=t_real_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "d_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real_image_logits, labels=tf.ones_like(disc_real_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "d_loss1_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real_image_aux_logits, labels=t_real_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "d_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_wrong_image_logits, labels=tf.zeros_like(disc_wrong_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "d_loss2_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_wrong_image_aux_logits, labels=t_wrong_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "d_loss3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake_image_logits, labels=tf.zeros_like(disc_fake_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_122": {
                "variable": {
                    "value": "t_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_228": {
                "variable": {
                    "value": "z_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[t_z, reduced_text_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(z_concat, self.options['gf_dim'] * 8 * s16 * s16, 'g_h0_lin')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s16, s16, self.options['gf_dim'] * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_232": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "slim.batch_norm(h0, is_training=t_training, scope='g_bn0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_237": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "slim.batch_norm(h1, is_training=t_training, scope='g_bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_242": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "slim.batch_norm(h2, is_training=t_training, scope='g_bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_247": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "slim.batch_norm(h3, is_training=t_training, scope='g_bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_289": {
                "variable": {
                    "value": "reduced_text_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_text_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.lrelu(ops.linear(t_text_embedding, self.options['t_dim'], 'd_embedding'))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(reduced_text_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(reduced_text_embeddings, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_290": {
                "variable": {
                    "value": "reduced_text_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_text_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.lrelu(ops.linear(t_text_embedding, self.options['t_dim'], 'd_embedding'))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(reduced_text_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(reduced_text_embeddings, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_291": {
                "variable": {
                    "value": "tiled_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_text_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.lrelu(ops.linear(t_text_embedding, self.options['t_dim'], 'd_embedding'))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(reduced_text_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(reduced_text_embeddings, 2)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, h3_shape[1], h3_shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tiled_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "h3_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h3, tiled_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "h3_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "h3_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h3_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.lrelu(slim.batch_norm(ops.conv2d(h3_concat, self.options['df_dim'] * 8, 1, 1, 1, 1, name='d_h3_conv_new'), reuse=reuse, is_training=t_training, scope='d_bn4'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.options['batch_size'], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_320": {
                "variable": {
                    "value": "ui",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "ui",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.attention(decoder_output, seq_outputs, output_size, time_steps, name='g_a_attention')",
                            "Call"
                        ],
                        [
                            "tf.transpose(ui, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_321": {
                "variable": {
                    "value": "ai",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "ui",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.attention(decoder_output, seq_outputs, output_size, time_steps, name='g_a_attention')",
                            "Call"
                        ],
                        [
                            "tf.transpose(ui, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_322": {
                "variable": {
                    "value": "seq_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "seq_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(seq_outputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_323": {
                "variable": {
                    "value": "d_dash",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.mul(seq_outputs, ai)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "input": {
                    "value": "disc_real_image_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_71": {
                "input": {
                    "value": "t_real_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [self.options['batch_size'], self.options['n_classes']], name='real_classes')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "d_right_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(disc_real_image_aux, 1), tf.argmax(t_real_classes, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_75": {
                "input": {
                    "value": "disc_wrong_image_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "input": {
                    "value": "t_wrong_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [self.options['batch_size'], self.options['n_classes']], name='wrong_classes')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_77": {
                "x": {
                    "value": "d_wrong_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(disc_wrong_image_aux, 1), tf.argmax(t_wrong_classes, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_80": {
                "input": {
                    "value": "disc_fake_image_aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_81": {
                "input": {
                    "value": "t_real_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [self.options['batch_size'], self.options['n_classes']], name='real_classes')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "d_fake_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(disc_fake_image_aux_logits, 1), tf.argmax(t_real_classes, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_88": {
                "logits": {
                    "value": "disc_fake_image_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_93": {
                "logits": {
                    "value": "disc_fake_image_aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "t_real_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [self.options['batch_size'], self.options['n_classes']], name='real_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_98": {
                "logits": {
                    "value": "disc_real_image_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(disc_real_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_102": {
                "logits": {
                    "value": "disc_real_image_aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "t_real_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [self.options['batch_size'], self.options['n_classes']], name='real_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_106": {
                "logits": {
                    "value": "disc_wrong_image_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(disc_wrong_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_110": {
                "logits": {
                    "value": "disc_wrong_image_aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "t_wrong_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', [self.options['batch_size'], self.options['n_classes']], name='wrong_classes')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_114": {
                "logits": {
                    "value": "disc_fake_image_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_208": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_209": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_213": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_216": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_217": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "max_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_scope_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_309": {
                "x": {
                    "value": "h4_aux",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.linear(h3_flat, n_classes, 'd_h4_lin_ac')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "g_a_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_252": {
                "x": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.deconv2d(h3, [self.options['batch_size'], s, s, 3], name='g_h4')",
                            "Call"
                        ],
                        [
                            "ops.linear(h3_flat, 1, 'd_h4_lin_rw')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "input": {
                    "value": "disc_fake_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "disc_real_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "disc_wrong_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_116": {
                "input": {
                    "value": "disc_fake_image",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "msssim.py": {
        "tensorflow": {
            "Session_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "input_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_255": {
                "variable": {
                    "value": "decoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.decode_png(input_img, channels=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "input_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_281": {
                "variable": {
                    "value": "decoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.decode_png(input_img, channels=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_png_256": {
                "contents": {
                    "value": "input_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_png_282": {
                "contents": {
                    "value": "input_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "t_interpolation.py": {
        "tensorflow": {
            "InteractiveSession_89": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_95": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_96": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_94": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "AdamOptimizer_93": {
                "variable": {
                    "value": "d_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "g_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "global_step_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_101": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_102": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_104": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_summaries_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(model_dir, 'summaries')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_107": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_112": {
                "checkpoint_dir": {
                    "value": "model_chkpnts_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(model_dir, 'checkpoints')",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_113": {
                "checkpoint_dir": {
                    "value": "model_chkpnts_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(model_dir, 'checkpoints')",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_111": {
                "checkpoint_dir": {
                    "value": "model_chkpnts_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(model_dir, 'checkpoints')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "z_interpolation.py": {
        "tensorflow": {
            "InteractiveSession_88": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_91": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initialize_all_variables_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_94": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_95": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_93": {
                "checkpoint_dir": {
                    "value": "args.checkpoints_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}