{
    "tools.py": {
        "sklearn": {
            "roc_curve_157": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target.view(-1).numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "out.view(-1).numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_158": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_curve_884": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "obj_matrix.numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pre_adj.numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_886": {
                "variable": {
                    "value": "roc_auc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_curve_907": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_un",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_adj[un_mask.bool()].cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pre_un",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre[un_mask.bool()].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "pre[mask.bool()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_908": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_curve_188": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "obj_matrix.numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_score1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(mat, dim=1)[:, 0].detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(mat, dim=1)[:, 0].detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_189": {
                "variable": {
                    "value": "soft_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_curve_248": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "obj_matrix.view(-1).numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_score1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(mat, dim=1)[:, 0].detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(mat, dim=1)[:, 0].detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_249": {
                "variable": {
                    "value": "roc_auc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_curve_250": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "obj_matrix.view(-1).numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_score2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(mat, dim=1)[:, 1].detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_251": {
                "variable": {
                    "value": "roc_auc2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "roc_curve_255": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "obj_matrix.view(-1).numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "out_matrix.view(-1).numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_256": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(fp) / (fp + tn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "fp / (tn + fp)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "float(tp) / (tp + fn)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tp / (tp + fn)",
                            "BinOp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_15": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(out - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "obj_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obj_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(obj_matrix)",
                            "Call"
                        ],
                        [
                            "obj_matrix > 0 + 0",
                            "Compare"
                        ],
                        [
                            "obj_matrix.astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obj_matrix)",
                            "Call"
                        ],
                        [
                            "obj_matrix.cuda()",
                            "Call"
                        ],
                        [
                            "obj_matrix.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "obj_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obj_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(obj_matrix)",
                            "Call"
                        ],
                        [
                            "obj_matrix > 0 + 0",
                            "Compare"
                        ],
                        [
                            "obj_matrix.astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obj_matrix)",
                            "Call"
                        ],
                        [
                            "obj_matrix.cuda()",
                            "Call"
                        ],
                        [
                            "obj_matrix.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_352": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_353": {
                "variable": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_354": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_357": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_358": {
                "variable": {
                    "value": "valid_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_359": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_435": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_436": {
                "variable": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_437": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_440": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_441": {
                "variable": {
                    "value": "valid_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_442": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_459": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_480": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_481": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_482": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_500": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_528": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_529": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_530": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_549": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_563": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "torch.cat((features, feat), dim=0)",
                            "Call"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "torch.cat((features, feat), dim=0)",
                            "Call"
                        ],
                        [
                            "feat",
                            "Name"
                        ],
                        [
                            "torch.cat((features, feat), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_584": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "loc_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_585": {
                "variable": {
                    "value": "vel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_586": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loc, vel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_593": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(loc.size(0) / P)",
                            "Call"
                        ],
                        [
                            "int(loc.size(0) / P)",
                            "Call"
                        ],
                        [
                            "int(loc.size(0))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "node_order_r",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "prediction_steps + 1",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc.size(1)",
                            "Call"
                        ],
                        [
                            "loc.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_602": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_603": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_604": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_625": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "loc_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_626": {
                "variable": {
                    "value": "vel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_627": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loc, vel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_635": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(loc.size(0) / P)",
                            "Call"
                        ],
                        [
                            "int(loc.size(0) / P)",
                            "Call"
                        ],
                        [
                            "int(loc.size(0))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "node_order_r",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "prediction_steps + 1",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc.size(1)",
                            "Call"
                        ],
                        [
                            "loc.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_644": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_645": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_646": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_674": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "loc_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_675": {
                "variable": {
                    "value": "vel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_676": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loc, vel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_682": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(loc.shape[0] - control_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "loc.size(2)",
                            "Call"
                        ],
                        [
                            "node_order_r",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loc.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_696": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, target_train)",
                            "Call"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[:features.shape[0] // 6 * 5, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(train_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[:int(sample * 5 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_697": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_val, target_val)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 6 * 5:features.shape[0] // 12 * 11, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(val_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 5 / 7):int(sample * 6 / 7)]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_698": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, target_test)",
                            "Call"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "features[features.shape[0] // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "states_r(test_data, order, new_order, 'cmn')",
                            "Call"
                        ],
                        [
                            "data[data.size(0) // 12 * 11:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ],
                        [
                            "data[int(sample * 6 / 7):]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_708": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(loc.shape[0] / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "371",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "loc.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_713": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data[:int(gates * (5 / 7))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_714": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data[int(gates * (5 / 7)):int(gates * (6 / 7))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_715": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data[int(gates * (6 / 7)):]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_725": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(loc.shape[0] / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "loc.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_731": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data[:int(gates * (5 / 7))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_732": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data[int(gates * (5 / 7)):int(gates * (6 / 7))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_733": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data[int(gates * (6 / 7)):]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_787": {
                "variable": {
                    "value": "kn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_790": {
                "variable": {
                    "value": "un_un_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_794": {
                "variable": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_809": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "prediction_steps + 1",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pre_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_p(generator, sz, un_mask).detach()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(P, pre_adj), P.T)",
                            "Call"
                        ],
                        [
                            "gumbel_p(generator_nc, sz, un_mask).detach()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(P, pre_adj), P.T)",
                            "Call"
                        ],
                        [
                            "pre_adj.cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_876": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "prediction_steps + 1",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pre_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_p(generator, sz, un_mask).detach()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(P, pre_adj), P.T)",
                            "Call"
                        ],
                        [
                            "gumbel_p(generator_nc, sz, un_mask).detach()",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(P, pre_adj), P.T)",
                            "Call"
                        ],
                        [
                            "pre_adj.cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_891": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "triu_892": {
                "variable": {
                    "value": "un_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(sz, sz)",
                            "Call"
                        ],
                        [
                            "left_mask - torch.diag(torch.diag(left_mask))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_892": {
                "variable": {
                    "value": "un_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_922": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pre_un - true_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_923": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_un[true_mask.bool()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_924": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - pre_un[true_mask.bool()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_925": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - pre_un[(1 - true_mask).bool()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_926": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_un[(1 - true_mask).bool()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_939": {
                "variable": {
                    "value": "new_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(out_matrix - obj_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_257": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_matrix - obj_matrix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_258": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(out_matrix - obj_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_710": {
                "variable": {
                    "value": "data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "loc[i * 2:(i + 1) * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_710": {
                "variable": {
                    "value": "data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_728": {
                "variable": {
                    "value": "data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "loc[i * 2:(i + 1) * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_728": {
                "variable": {
                    "value": "data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_824": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "prediction_steps + 1",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_generator.sample_all(hard=True, epoch=e)",
                            "Call"
                        ],
                        [
                            "out_matrix.cpu()",
                            "Call"
                        ],
                        [
                            "gumbel_generator.sample_all(hard=True, epoch=e)",
                            "Call"
                        ],
                        [
                            "out_matrix.cpu()",
                            "Call"
                        ],
                        [
                            "gumbel_generator.sample()",
                            "Call"
                        ],
                        [
                            "out_matrix.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "out_matrix.repeat(data_train.size()[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "generator.sample_all(hard=True)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.mm(P, out_matrix), P.T)",
                            "Call"
                        ],
                        [
                            "matrix + matrix.T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_153": {
                "input": {
                    "value": "out - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_361": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_444": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_467": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_606": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_648": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_699": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_716": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_734": {
                "ndarray": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='latin1')",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_792": {
                "input": {
                    "value": "un_un_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sz, sz)",
                            "Call"
                        ],
                        [
                            "un_un_mask - torch.diag(torch.diag(un_un_mask))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_796": {
                "input": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(sz, sz)",
                            "Call"
                        ],
                        [
                            "left_mask - torch.diag(torch.diag(left_mask))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_880": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "generator.gen_matrix",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_890": {
                "input": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_922": {
                "input": {
                    "value": "pre_un - true_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_193": {
                "input": {
                    "value": "out_matrix - obj_matrix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_258": {
                "input": {
                    "value": "out_matrix - obj_matrix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "generator.gen_matrix",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_246": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "generator.gen_matrix",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "gumbel_generator.gen_matrix.cpu().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "generator.gen_matrix",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/generate_cmn.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_9": {
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "self.thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "input": {
                    "value": "logistic_map(self.thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.obj_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "simulator.obj_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/generate_spring.py": {
        "torch": {}
    },
    "AIDD/generate_voter.py": {
        "torch": {}
    },
    "AIDD/generate_voter_real.py": {
        "torch": {}
    },
    "AIDD/test_Gene.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_gene_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_42": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_gene_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_30": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_76": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/test_SIR.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_SIR_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_40": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_SIR_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_73": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/test_cmn.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_cmn_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_43": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_cmn_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_30": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/test_spring.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_spring_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_41": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_spring_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_30": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_76": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/test_voter.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_voter_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_44": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_voter_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "NLLLoss_55": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/train_Gene.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 4096, 'lr_net': 0.004, 'lr_dyn': 0.0033, 'lr_stru': 1e-05, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 4096, 'lr_net': 0.004, 'lr_dyn': 0.0033, 'lr_stru': 1e-05, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_34": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B(args.dim, HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_gene_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=args.nodes, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_gene_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_150": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_gene_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__89": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_85": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/train_SIR.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 371, 'hid': 128, 'epoch_num': 1000, 'batch_size': 2048, 'lr_net': 0.004, 'lr_dyn': 0.0033, 'lr_stru': 1e-05, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 371, 'hid': 128, 'epoch_num': 1000, 'batch_size': 2048, 'lr_net': 0.004, 'lr_dyn': 0.0033, 'lr_stru': 1e-05, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_34": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B(args.dim, HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_SIR_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=args.nodes, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_SIR_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_150": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_SIR_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__89": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_85": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/train_cmn.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 2048, 'node_size': 100, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 2048, 'node_size': 100, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_35": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B(args.dim, HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_cmn_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_149": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=args.nodes, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_cmn_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_151": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_cmn_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__90": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/train_spring.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_35": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B(args.dim, HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_spring_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_149": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=args.nodes, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_spring_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_151": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_spring_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__90": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AIDD/train_voter.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 200, 'batch_size': 2048, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 200, 'batch_size': 2048, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "NLLLoss_59": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_34": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_145": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B_Voter(args.dim, HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_voter_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_189": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=args.nodes, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_voter_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_191": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_voter_' + args.network + '_' + str(args.nodes) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__103": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AIDD_Multi_step_prediction/generate_spring.py": {
        "torch": {}
    },
    "AIDD_Multi_step_prediction/test_spring_multistep.py": {
        "torch": {}
    },
    "AIDD_Multi_step_prediction/train_spring_multistep.py": {
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 100, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_net': 0.004, 'lr_dyn': 0.001, 'lr_stru': 0.0001, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "clip_grad_norm__104": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Controller_Optimization/control_cmn_controlmodel_realdyn.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "control_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "control_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/control_cmn_' + str(args.network) + '_ourmodel_ournet_model_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.prediction_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(temp_x[:, controlled_node_list, :] - new_y[:, time, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "input": {
                    "value": "logistic_map(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "obj_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "object_matrix.to(device)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_102": {
                "input": {
                    "value": "temp_x[:, controlled_node_list, :] - new_y[:, time, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.prediction_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(controlled_node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Controller_Optimization/control_cmn_ourmodel_ournet.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_46": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_cmn_BA_10_id1.pkl'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_cmn_BA_10_id1.pkl'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "op_con",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "control_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_con']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 10, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_con': 0.01, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.control_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(temp_x[:, controlled_node_list, :] - new_y[:, time, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "control_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Controller(HYP['dim'], HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "control_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main_path + 'control_cmn_' + str(args.network) + '_ourmodel_ournet_model_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_106": {
                "input": {
                    "value": "temp_x[:, controlled_node_list, :] - new_y[:, time, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.control_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(controlled_node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Controller_Optimization/control_cmn_realdyn_realnet.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "op_con",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "control_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_con']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 10, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_con': 0.01, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.prediction_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_103": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(temp_x[:, controlled_node_list, :] - new_y[:, time, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "control_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Controller(HYP['dim'], HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "control_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main_path + 'control_cmn_' + str(args.network) + '_realdyn_realnet_model_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "input": {
                    "value": "logistic_map(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "obj_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "object_matrix.to(device)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_103": {
                "input": {
                    "value": "temp_x[:, controlled_node_list, :] - new_y[:, time, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.prediction_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(controlled_node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Controller_Optimization/control_spring_controlmodel_realdyn.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "control_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "control_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main_path + 'control_spring_' + str(args.network) + '_ourmodel_ournet_model_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_30": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forces_size.unsqueeze(0).expand(2 * temp_x.size(0), args.nodes, args.nodes) * torch.cat((temp_x[:, :, 0].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 0].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes), temp_x[:, :, 1].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 1].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F[:temp_x.size(0)], F[temp_x.size(0):])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "(temp_x[:, :, 0].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 0].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes), temp_x[:, :, 1].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 1].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "torch.abs(temp_x[:, cur_con_node, 2:] / torch.norm(temp_x[:, cur_con_node, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, cur_con_node, 2:].size(0), 2) - temp_x[:, no, 2:] / torch.norm(temp_x[:, no, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, no, 2:].size(0), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_120": {
                "input": {
                    "value": "temp_x[:, cur_con_node, 2:] / torch.norm(temp_x[:, cur_con_node, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, cur_con_node, 2:].size(0), 2) - temp_x[:, no, 2:] / torch.norm(temp_x[:, no, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, no, 2:].size(0), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_120": {
                "input": {
                    "value": "temp_x[:, cur_con_node, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_122": {
                "input": {
                    "value": "temp_x[:, no, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_122": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Controller_Optimization/control_spring_ourmodel_ournet.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_spring_BA_10_id1.pkl'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_46": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_spring_BA_10_id1.pkl'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "op_con",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "control_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_con']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 10, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_con': 0.01, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_30": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "args.control_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "control_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Controller(HYP['dim'], HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "control_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main_path + 'control_spring_' + str(args.network) + '_ourmodel_ournet_model_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_111": {
                "input": {
                    "value": "torch.abs(temp_x[:, cur_con_node, 2:] / torch.norm(temp_x[:, cur_con_node, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, cur_con_node, 2:].size(0), 2) - temp_x[:, no, 2:] / torch.norm(temp_x[:, no, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, no, 2:].size(0), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_111": {
                "input": {
                    "value": "temp_x[:, cur_con_node, 2:] / torch.norm(temp_x[:, cur_con_node, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, cur_con_node, 2:].size(0), 2) - temp_x[:, no, 2:] / torch.norm(temp_x[:, no, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, no, 2:].size(0), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_111": {
                "input": {
                    "value": "temp_x[:, cur_con_node, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_113": {
                "input": {
                    "value": "temp_x[:, no, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_113": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Controller_Optimization/control_spring_realdyn_realnet.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "op_con",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "control_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_con']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'node_size': 10, 'hid': 128, 'epoch_num': 1000, 'batch_size': 512, 'lr_con': 0.01, 'hard_sample': False, 'sample_time': 1, 'temp': 1, 'drop_frac': 1}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_31": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(node_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_179": {
                "obj": {
                    "value": "control_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Controller(HYP['dim'], HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "control_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main_path + 'control_spring_' + str(args.network) + '_realdyn_realnet_model_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_99": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forces_size.unsqueeze(0).expand(2 * temp_x.size(0), args.nodes, args.nodes) * torch.cat((temp_x[:, :, 0].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 0].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes), temp_x[:, :, 1].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 1].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F[:temp_x.size(0)], F[temp_x.size(0):])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "(temp_x[:, :, 0].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 0].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes), temp_x[:, :, 1].unsqueeze(2).expand(temp_x.size(0), args.nodes, args.nodes) - temp_x[:, :, 1].unsqueeze(1).expand(temp_x.size(0), args.nodes, args.nodes))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "torch.abs(temp_x[:, cur_con_node, 2:] / torch.norm(temp_x[:, cur_con_node, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, cur_con_node, 2:].size(0), 2) - temp_x[:, no, 2:] / torch.norm(temp_x[:, no, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, no, 2:].size(0), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "temp_x[:, cur_con_node, 2:] / torch.norm(temp_x[:, cur_con_node, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, cur_con_node, 2:].size(0), 2) - temp_x[:, no, 2:] / torch.norm(temp_x[:, no, 2:], p=2, dim=-1).unsqueeze(1).expand(temp_x[:, no, 2:].size(0), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_126": {
                "input": {
                    "value": "temp_x[:, cur_con_node, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_128": {
                "input": {
                    "value": "temp_x[:, no, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Network_Completetion/generate_cmn.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_9": {
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_33": {
                "variable": {
                    "value": "self.thetas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "input": {
                    "value": "logistic_map(self.thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.obj_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "simulator.obj_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Network_Completetion/generate_voter.py": {
        "torch": {}
    },
    "Network_Completetion/train_cmn_completetion.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'cml', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'cml', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "op_dyn_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom_nc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn_comp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'cml', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "op_net_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator_nc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net_comp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'cml', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_341": {
                "variable": {
                    "value": "opt_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "states_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_state']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'cml', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_344": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_354": {
                "variable": {
                    "value": "opt_states_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "states_learner_v.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_state']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'cml', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "set_device_72": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_254": {
                "variable": {
                    "value": "x_un_pre_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_un_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states_learner(states_id.cuda())",
                            "Call"
                        ],
                        [
                            "states_learner(states_id.cuda()).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_149": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "x_hypo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_un_pre.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat - y[:, j, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_237": {
                "input": {
                    "value": "generator_nc.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_241": {
                "input": {
                    "value": "torch.FloatTensor(mse_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_259": {
                "input": {
                    "value": "torch.FloatTensor(mse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_311": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B(HYP['dim'], HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_312": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=known_num, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(gen_path).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_314": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_406": {
                "obj": {
                    "value": "dyn_isom_nc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "com_dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/com_dyn_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_407": {
                "obj": {
                    "value": "generator_nc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "com_gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/com_gennc_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_408": {
                "obj": {
                    "value": "states_learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "com_states_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/com_states_cml_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__154": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mse_loss_166": {
                "input": {
                    "value": "y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(y.size(0), y.size(1), y.size(2))",
                            "Call"
                        ],
                        [
                            "torch.zeros(y.size(0), y.size(1), y.size(2)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__219": {
                "parameters": {
                    "value": "generator_nc.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_232": {
                "input": {
                    "value": "torch.FloatTensor(loss_node)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_233": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, :-del_num, 1, :]",
                            "Subscript"
                        ],
                        [
                            "data[:, :-del_num, 1, :]",
                            "Subscript"
                        ],
                        [
                            "data[:, :-del_num, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(y.size(0), y.size(1), y.size(2))",
                            "Call"
                        ],
                        [
                            "torch.zeros(y.size(0), y.size(1), y.size(2)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_256": {
                "input": {
                    "value": "abs(x_un.cuda() - x_un_pre_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_257": {
                "input": {
                    "value": "x_un.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "x_un_pre_p.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_149": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_214": {
                "input": {
                    "value": "y_hat - y[:, j, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Network_Completetion/train_voter_completetion.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "unedges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "object_matrix[-del_num:, -del_num:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_91": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "op_dyn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'voter', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "op_net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'voter', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "op_dyn_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dyn_isom_nc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_dyn_comp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'voter', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "op_net_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator_nc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_net_comp']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'voter', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "NLLLoss_122": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_424": {
                "variable": {
                    "value": "opt_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "states_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "HYP['lr_state']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'note': 'try init', 'node_num': args.nodes, 'node_size': args.node_size, 'conn_p': '25', 'seed': args.seed, 'dim': args.dim, 'hid': args.hidden_size, 'epoch_num': args.epoch_num, 'batch_size': args.batch_size, 'lr_net': args.lr_net, 'lr_net_comp': args.lr_net_comp, 'lr_dyn': args.lr_dyn, 'lr_dyn_comp': args.lr_dyn_comp, 'lr_stru': args.lr_stru, 'lr_stru_comp': args.lr_stru_comp, 'lr_state': args.lr_state, 'hard_sample': False, 'sample_time': 1, 'sys': 'voter', 'isom': True, 'temp': 1, 'drop_frac': 1, 'save': True}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_429": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_76": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_332": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_un_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states_learner(states_id.cuda())",
                            "Call"
                        ],
                        [
                            "states_learner(states_id.cuda()).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_333": {
                "variable": {
                    "value": "pre_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, 1 - state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_333": {
                "variable": {
                    "value": "pre_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_335": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_un_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states_learner(states_id.cuda())",
                            "Call"
                        ],
                        [
                            "states_learner(states_id.cuda()).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_335": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "pre_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, 1 - state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_433": {
                "input": {
                    "value": "observed_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "generator.sample_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "x_hypo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_kn, x_un_pre.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_393": {
                "obj": {
                    "value": "dyn_isom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IO_B_Voter(HYP['dim'], HYP['hid']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/dyn_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_394": {
                "obj": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gumbel_Generator_Old(sz=known_num, temp=HYP['temp'], temp_drop_frac=HYP['drop_frac']).to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(gen_path).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/gen_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_396": {
                "obj": {
                    "value": "out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.sample_all(hard=HYP['hard_sample']).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "adj_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/adj_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_471": {
                "obj": {
                    "value": "dyn_isom_nc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "com_dyn_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/com_dyn_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_472": {
                "obj": {
                    "value": "generator_nc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "com_gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/com_gennc_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_473": {
                "obj": {
                    "value": "states_learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "com_states_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./model/com_states_voter_' + args.network + '_' + str(args.nodes) + '_miss' + str(args.miss_percent) + '_id' + str(args.exp_id) + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__171": {
                "parameters": {
                    "value": "generator.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__279": {
                "parameters": {
                    "value": "generator_nc.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "7.5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_347": {
                "input": {
                    "value": "pre_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((state, 1 - state), 1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat((state, 1 - state), 2)",
                            "Call"
                        ],
                        [
                            "onehot_state(x_un_pre)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_282": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.n2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.e2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.e2n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.n2n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim + hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2n(x_total_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n2n(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(starter, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.n2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.e2e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.e2n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.n2n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim + hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_74": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2n(x_total_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n2n(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(starter, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(sz, sz, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid + self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(starter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.e2n(x_total_sum))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2n(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((starter, x), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.e2n(x_total_sum))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2n(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((starter, x), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ],
                        [
                            "self.logsoftmax(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear1(starter))",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear2(x))",
                            "Call"
                        ],
                        [
                            "x * adj_col.unsqueeze(1).expand(adj_col.size(0), self.hid)",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.linear3(x_sum))",
                            "Call"
                        ],
                        [
                            "F.relu(self.linear4(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((cur_x, x), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.output(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x_sum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cur_x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.gen_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(del_num * (2 * sz - del_num - 1) // 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_246": {
                "variable": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_249": {
                "variable": {
                    "value": "un_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(self.sz, self.sz)",
                            "Call"
                        ],
                        [
                            "left_mask - torch.diag(torch.diag(left_mask))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_249": {
                "variable": {
                    "value": "un_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_264": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dat_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "del_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_266": {
                "variable": {
                    "value": "pos_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_266": {
                "variable": {
                    "value": "pos_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_273": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dat_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "del_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_275": {
                "variable": {
                    "value": "pos_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_275": {
                "variable": {
                    "value": "pos_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_probs, 1 - pos_probs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_x, ender)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n2e(c_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2e(c_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "current_x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((current_x, ender), 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2e(c_x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.e2e(c_x))",
                            "Call"
                        ],
                        [
                            "c_x * current_adj_col.unsqueeze(1).expand(current_adj_col.size(0), self.hid)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((current_x, ender), 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2e(c_x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.e2e(c_x))",
                            "Call"
                        ],
                        [
                            "c_x * current_adj_col.unsqueeze(1).expand(current_adj_col.size(0), self.hid)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_x, ender)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n2e(c_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e2e(c_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_104": {
                "variable": {
                    "value": "current_x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((current_x, ender), 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2e(c_x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.e2e(c_x))",
                            "Call"
                        ],
                        [
                            "c_x * current_adj_col.unsqueeze(1).expand(current_adj_col.size(0), self.hid)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((current_x, ender), 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2e(c_x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.e2e(c_x))",
                            "Call"
                        ],
                        [
                            "c_x * current_adj_col.unsqueeze(1).expand(current_adj_col.size(0), self.hid)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.gen_matrix.size()[0] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.del_num * (2 * self.sz - self.del_num - 1) // 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_125": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_220": {
                "*size": {
                    "value": "del_num * (2 * sz - del_num - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_248": {
                "input": {
                    "value": "left_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(self.sz, self.sz)",
                            "Call"
                        ],
                        [
                            "left_mask - torch.diag(torch.diag(left_mask))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_310": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sgm.py": {
        "torch": {
            "mm_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A[m:totv, :m]",
                            "Subscript"
                        ],
                        [
                            "A21.T",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "B21.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A12.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "B12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B[:m, m:totv]",
                            "Subscript"
                        ],
                        [
                            "B12.T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_102": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "totv - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "ccat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.eye(m).cuda(), torch.zeros([m, n]).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_107": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start",
                            "Name"
                        ],
                        [
                            "torch.eye(n).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(P, 0, corr)",
                            "Call"
                        ],
                        [
                            "torch.cat((ccat, rcat), 0)",
                            "Call"
                        ],
                        [
                            "alpha * P + (1 - alpha) * Tt",
                            "BinOp"
                        ],
                        [
                            "Tt",
                            "Name"
                        ],
                        [
                            "Tt",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(corr).cuda()",
                            "Call"
                        ],
                        [
                            "corr",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "rcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([n, m]).cuda(), P]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ccat, rcat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_16": {
                "variable": {
                    "value": "A12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "totv - m",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "totv - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_44": {
                "input": {
                    "value": "A22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A[m:totv, m:totv]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start",
                            "Name"
                        ],
                        [
                            "torch.eye(n).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(P, 0, corr)",
                            "Call"
                        ],
                        [
                            "torch.cat((ccat, rcat), 0)",
                            "Call"
                        ],
                        [
                            "alpha * P + (1 - alpha) * Tt",
                            "BinOp"
                        ],
                        [
                            "Tt",
                            "Name"
                        ],
                        [
                            "Tt",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_45": {
                "input": {
                    "value": "A22.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start",
                            "Name"
                        ],
                        [
                            "torch.eye(n).cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(P, 0, corr)",
                            "Call"
                        ],
                        [
                            "torch.cat((ccat, rcat), 0)",
                            "Call"
                        ],
                        [
                            "alpha * P + (1 - alpha) * Tt",
                            "BinOp"
                        ],
                        [
                            "Tt",
                            "Name"
                        ],
                        [
                            "Tt",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_55": {
                "variable": {
                    "value": "Tt",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "totv - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_58": {
                "input": {
                    "value": "A22.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(n).cuda()",
                            "Call"
                        ],
                        [
                            "Tt[ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_62": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.mm(w, P.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.mm(wt, Tt.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.mm(P.T, x) + torch.mm(P.T, y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.mm(Tt.T, x) + torch.mm(Tt.T, y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_6": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "totv - m",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "totv - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_62": {
                "input": {
                    "value": "torch.mm(w, P.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "torch.diag(torch.mm(wt, Tt.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_66": {
                "input": {
                    "value": "torch.mm(wt, Tt.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_69": {
                "input": {
                    "value": "torch.mm(P.T, x) + torch.mm(P.T, y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_70": {
                "input": {
                    "value": "torch.mm(Tt.T, x) + torch.mm(Tt.T, y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_106": {
                "n": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "[n, m]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_62": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(A22.T, P), B22)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "P.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_65": {
                "input": {
                    "value": "torch.mm(wt, Tt.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_66": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(A22.T, Tt), B22)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Tt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_65": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(A22.T, Tt), B22)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Tt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_69": {
                "input": {
                    "value": "P.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(A12.T, B12)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_70": {
                "input": {
                    "value": "Tt.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(A12.T, B12)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}