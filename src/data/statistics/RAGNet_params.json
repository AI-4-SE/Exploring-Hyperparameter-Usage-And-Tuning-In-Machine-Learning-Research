{
    "data/dataset.py": {
        "torch": {}
    },
    "models/GR.py": {
        "torch": {
            "ConvTranspose2d_9": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_21": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, in_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, in_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "input": {
                    "value": "out_R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.outzc(z1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/GT.py": {
        "torch": {
            "ConvTranspose2d_10": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_15": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_28": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2 - x3, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_34": {
                "variable": {
                    "value": "mask_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pooling(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, in_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.mask_conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "io_ch * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "io_ch * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.mask_ac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.mask_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "io_ch * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "io_ch * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x3, x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_131": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_conv1(self.mask_ac(self.mask_conv0(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_132": {
                "variable": {
                    "value": "(mask_e, mask_d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.mask_conv1(self.mask_ac(self.mask_conv0(x))))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.io_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(6, 64, kernel_size=4, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[blended, transmission]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.outTc(y1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_179": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_180": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_185": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_189": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_190": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_159": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.outTc(y1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/encoder_build.py": {
        "torch": {
            "Sequential_16": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_8": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "solver.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "vgg_feature_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.vgg_feature_pretrained_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "self.G_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.gt_model.parameters()) + list(self.gr_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_142": {
                "variable": {
                    "value": "self.D_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "train_dataloader_fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_fusion_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FusionDataset([train_refsyn_dataset, train_refreal_dataset], [0.7, 0.3])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.load_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "img_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img_T, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "img_R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img_R, scale_factor=0.5, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_108": {
                "input": {
                    "value": "torch.abs(input - output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "map_thr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gray_r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "map_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gray_r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_244": {
                "variable": {
                    "value": "A_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.log(score_fake + EPS)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "sum(grad_y_loss) / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_108": {
                "input": {
                    "value": "input - output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.resume_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_90": {
                "input": {
                    "value": "torch.abs(grad_x_T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_91": {
                "input": {
                    "value": "torch.abs(grad_y_T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_90": {
                "input": {
                    "value": "grad_x_T",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_91": {
                "input": {
                    "value": "grad_y_T",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "input": {
                    "value": "grad_x_T",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "input": {
                    "value": "grad_y_T",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "input": {
                    "value": "grad_x_R * alphax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "input": {
                    "value": "grad_y_R * alphay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "torch.mul(gradx1_s.pow(2), gradx2_s.pow(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_99": {
                "input": {
                    "value": "torch.mul(grady1_s.pow(2), grady2_s.pow(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_228": {
                "input": {
                    "value": "-(torch.log(score_real + EPS) + torch.log(1 - score_fake + EPS))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_244": {
                "input": {
                    "value": "score_fake + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_98": {
                "input": {
                    "value": "gradx1_s.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "gradx2_s.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_99": {
                "input": {
                    "value": "grady1_s.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grady2_s.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'global_step': self.global_step, 'GT_state': self.gt_model.state_dict(), 'GR_state': self.gr_model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/epoch_{:0>3}_G_{:.3f}_P_{:.3f}.pth'.format(epoch, G_loss_avg, psnr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'global_step': self.global_step, 'GT_state': self.gt_model.state_dict(), 'GR_state': self.gr_model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/epoch_{:0>3}_G_{:.3f}_P_{:.3f}.pth'.format(epoch, G_loss_avg, psnr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_228": {
                "input": {
                    "value": "1 - score_fake + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_172": {
                "variable": {
                    "value": "test_loader_real20",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_real20",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(image_list_real20, gt_list_real20, transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "test_loader_sirwild",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_sirwild",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(image_list_sirwild, gt_list_sirwild)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "test_loader_sirpostcard",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_sirpostcard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(image_list_sirpostcard, gt_list_sirpostcard)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "test_loader_sirsolid",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_sirsolid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(image_list_sirsolid, gt_list_sirsolid)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "test_loader_real45",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_real45",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(image_list_real45, gt_list_real45, if_GT=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_198": {
                "variable": {
                    "value": "ckpt_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoint/pretrain.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/padding.py": {
        "torch": {
            "pad_24": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad(input, [0, int(cols_odd), 0, int(rows_odd)])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, int(cols_odd), 0, int(rows_odd)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad(input, [0, int(cols_odd), 0, int(rows_odd)])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(padding_rows // 2, padding_cols // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}