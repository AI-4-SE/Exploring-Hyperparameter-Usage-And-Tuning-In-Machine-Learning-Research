{
    "config.py": {
        "tensorflow": {}
    },
    "layers/CapsLayer.py": {
        "tensorflow": {
            "get_variable_95": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, int(self.prev_num_outputs_veclen * self.in_size * self.in_size / self.vec_len), 10, self.vec_len, self.vec_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=cfg.stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_102": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(input, [1, 1, 10, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 10, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_103": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('Weight', shape=(1, int(self.prev_num_outputs_veclen * self.in_size * self.in_size / self.vec_len), 10, self.vec_len, self.vec_len), dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=cfg.stddev))",
                            "Call"
                        ],
                        [
                            "tf.tile(W, [cfg.batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[cfg.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "u_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('Weight', shape=(1, int(self.prev_num_outputs_veclen * self.in_size * self.in_size / self.vec_len), 10, self.vec_len, self.vec_len), dtype=tf.float32, initializer=tf.random_normal_initializer(stddev=cfg.stddev))",
                            "Call"
                        ],
                        [
                            "tf.tile(W, [cfg.batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(input, [1, 1, 10, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_117": {
                "variable": {
                    "value": "u_hat_stopped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(W, input, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "stop_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "variable": {
                    "value": "vec_squared_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "c_IJ",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b_IJ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b_IJ + u_produce_v",
                            "BinOp"
                        ],
                        [
                            "tf.constant(np.zeros([cfg.batch_size, input.shape[1].value, self.num_outputs, 1, 1], dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_166": {
                "x": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_167": {
                "x": {
                    "value": "vec_squared_norm + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "capsules",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(input, [1, 1, 10, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.num_outputs * self.vec_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(input, [1, 1, 10, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(cfg.batch_size, -1, 1, input.shape[-2].value, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "random_normal_initializer_96": {
                "stddev": {
                    "value": "cfg.stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "'iter_' + str(r_iter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_131": {
                "variable": {
                    "value": "s_J",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_IJ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(b_IJ, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(W, input, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "s_J",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "s_J",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(c_IJ, u_hat)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_J, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(c_IJ, u_hat_stopped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_J, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_71": {
                "variable": {
                    "value": "b_IJ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros([cfg.batch_size, input.shape[1].value, self.num_outputs, 1, 1], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "capsules",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "capsules",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(input, self.num_outputs * self.vec_len, self.kernel_size, self.stride, padding='SAME', activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "squash(capsules)",
                            "Call"
                        ],
                        [
                            "routing(self, self.input, b_IJ)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(capsules, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_141": {
                "variable": {
                    "value": "s_J",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_IJ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(b_IJ, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_hat_stopped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u_hat, name='stop_gradient')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "s_J",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "s_J",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(c_IJ, u_hat)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_J, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(c_IJ, u_hat_stopped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(s_J, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_149": {
                "variable": {
                    "value": "v_J_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_J",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(s_J)",
                            "Call"
                        ],
                        [
                            "squash(s_J)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, int(self.prev_num_outputs_veclen * self.in_size * self.in_size / self.vec_len), 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "variable": {
                    "value": "u_produce_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat_stopped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u_hat, name='stop_gradient')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_J_tiled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(v_J, [1, int(self.prev_num_outputs_veclen * self.in_size * self.in_size / self.vec_len), 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "routing",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "layers/CapsuleLayers.py": {
        "tensorflow": {
            "matmul_134": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.expand_dims(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.permute_dimensions(y, (0, 1, 3, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule])",
                            "Call"
                        ],
                        [
                            "b + K.batch_dot(outputs, inputs_hat, [2, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/DeepCapsKerasLayers.py": {
        "tensorflow": {
            "transpose_332": {
                "variable": {
                    "value": "votes_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.reshape(conv, [input_shape[0], self.input_num_capsule, self.num_capsule, self.num_atoms, votes_shape[3], votes_shape[4]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "votes_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 0, 1, 2, 4, 5]",
                            "List"
                        ],
                        [
                            "[3, 0, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorArray_363": {
                "variable": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "num_routing",
                    "type": "Variable",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_365": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "logit_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.stack([input_shape[0], self.input_num_capsule, self.num_capsule, votes_shape[3], votes_shape[4]])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_367": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_368": {
                "variable": {
                    "value": "(_, logits, activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, logits, activations: i < num_routing",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i, logits, activations]",
                    "type": "List",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_581": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "range_215": {
                "variable": {
                    "value": "increasing",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "tf.shape(inputs)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[increasing, tf.cast(mask, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_221": {
                "variable": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([increasing, tf.cast(mask, tf.int32)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_266": {
                "variable": {
                    "value": "input_transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 4, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_279": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.conv3d(input_tensor_reshaped, self.W, strides=(self.input_num_atoms, self.strides, self.strides), padding=self.padding, data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv, [0, 2, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_295": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype=tf.float32, size=num_routing, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "activations.write(i, activation)",
                            "Call"
                        ],
                        [
                            "update_routing(votes=votes, biases=biases_replicated, logit_shape=logit_shape, num_dims=6, input_dim=self.input_num_capsule, output_dim=self.num_capsule, num_routing=self.routings)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 4, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "logit_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[a, b, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "variable": {
                    "value": "route_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [a, b, -1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_347": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "route_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logit_temp, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[a, b, c, d, e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_349": {
                "variable": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0, 4, 5]",
                            "List"
                        ],
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ]
                    ]
                }
            },
            "tile_358": {
                "variable": {
                    "value": "act_replicated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.expand_dims(activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_359": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "votes * act_replicated",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_551": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_423": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_556": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logit_shape[1]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "b + a",
                            "BinOp"
                        ],
                        [
                            "tf.zeros(shape=[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule])",
                            "Call"
                        ],
                        [
                            "b + K.batch_dot(outputs, inputs_hat, [2, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_350": {
                "input_tensor": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_463": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "rt",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.matmul(tf.transpose(inputs, [1, 0, 2]), wr), [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "K.reshape(u, (-1, self.ch_i, self.ch_j, self.n_j))",
                            "Call"
                        ],
                        [
                            "K.reshape(u, (-1, self.ch_i * self.ch_j * self.n_j))",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_216": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.one_hot(indices=K.argmax(x, 1), num_classes=x.get_shape().as_list()[1])",
                            "Call"
                        ],
                        [
                            "K.argmax(x, 1)",
                            "Call"
                        ],
                        [
                            "K.argmax(a, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_423": {
                "a": {
                    "value": "tf.transpose(inputs, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "wr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.reshape(self.w, (self.ch_i, self.n_i, self.ch_j * self.n_j))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_449": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bjk,bijk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squeeze(s)",
                            "Call"
                        ],
                        [
                            "K.stop_gradient(v)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.reshape(ub, (-1, self.ch_i, self.ch_j, self.n_j))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_215": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "layers/DeepCapsLayers.py": {
        "tensorflow": {
            "transpose_276": {
                "variable": {
                    "value": "votes_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(conv, shape=(input_shape[0], self.input_num_capsule, self.num_capsule, self.num_atoms, votes_shape[3], votes_shape[4]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "votes_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 0, 1, 2, 4, 5]",
                            "List"
                        ],
                        [
                            "[3, 0, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorArray_307": {
                "variable": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "num_routing",
                    "type": "Variable",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_309": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "logit_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([input_shape[0], self.input_num_capsule, self.num_capsule, votes_shape[3], votes_shape[4]])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_311": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_312": {
                "variable": {
                    "value": "(_, logits, activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, logits, activations: i < num_routing",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i, logits, activations]",
                    "type": "List",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_317": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activations.read(num_routing - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_445": {
                "variable": {
                    "value": "vec_squared_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_72": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_73": {
                "variable": {
                    "value": "self.bias_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_74": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_75": {
                "variable": {
                    "value": "self.activity_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activity_regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_76": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InputSpec_77": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "rank + 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.w_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_164": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_177": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_num_atoms, self.kernel_size, self.kernel_size, 1, self.num_capsule * self.num_atoms]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_180": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_capsule, self.num_atoms, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.initializers.constant(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "input_transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 4, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_184": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_transposed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "input_tensor_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_shape[0], 1, self.input_num_capsule * self.input_num_atoms, self.input_height, self.input_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_192": {
                "variable": {
                    "value": "votes_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.conv3d(input_tensor_reshaped, self.W, strides=(self.input_num_atoms, self.strides, self.strides), padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv, [0, 2, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_195": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.conv3d(input_tensor_reshaped, self.W, strides=(self.input_num_atoms, self.strides, self.strides), padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv, [0, 2, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.conv3d(input_tensor_reshaped, self.W, strides=(self.input_num_atoms, self.strides, self.strides), padding='same', data_format='channels_first')",
                            "Call"
                        ],
                        [
                            "tf.transpose(conv, [0, 2, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(input_shape[0], self.input_num_capsule, self.num_capsule, self.num_atoms, votes_shape[3], votes_shape[4])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "logit_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_shape[0], self.input_num_capsule, self.num_capsule, votes_shape[3], votes_shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_202": {
                "variable": {
                    "value": "biases_replicated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, conv_height.value, conv_width.value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_213": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(dtype=tf.float32, size=num_routing, clear_after_read=False)",
                            "Call"
                        ],
                        [
                            "activations.write(i, activation)",
                            "Call"
                        ],
                        [
                            "update_routing(votes=votes, biases=biases_replicated, logit_shape=logit_shape, num_dims=6, input_dim=self.input_num_capsule, output_dim=self.num_capsule, num_routing=self.routings)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 4, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "logit_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill(logit_shape, 0.0)",
                            "Call"
                        ],
                        [
                            "logits + distances",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[a, b, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_290": {
                "variable": {
                    "value": "route_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [a, b, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "route_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logit_temp, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[a, b, c, d, e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_293": {
                "variable": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "preactivate_unrolled",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "route * votes_trans",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "r_t_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0, 4, 5]",
                            "List"
                        ],
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_299": {
                "variable": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "squash(preactivate)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_302": {
                "variable": {
                    "value": "act_replicated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(num_dims, dtype=np.int32).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_303": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "votes * act_replicated",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_329": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ],
                        [
                            "'he_normal'",
                            "MethodArgument"
                        ],
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_378": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_422": {
                "variable": {
                    "value": "increasing",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "tf.shape(input)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "delta": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_423": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[increasing, tf.cast(mask, tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_428": {
                "variable": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([increasing, tf.cast(mask, tf.int32)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_shape[0:3], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(input, shape=(-1, self.h_i, self.w_i, self.ch_i * self.n_i))",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "tf.reshape(self.w, shape=self.kernel_size + (self.ch_i * self.n_i, self.ch_j * self.n_j))",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "self.dilation_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(outputs, shape=(-1, self.h_j, self.w_j, self.ch_j, self.n_j))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_339": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_capsule, self.channels, self.dim_capsule, self.input_dim_capsule]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_343": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_capsule, self.dim_capsule]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_348": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_capsule, self.input_num_capsule, self.dim_capsule, self.input_dim_capsule]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_352": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_capsule, self.dim_capsule]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_383": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logit_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule])",
                            "Call"
                        ],
                        [
                            "b + K.batch_dot(outputs, inputs_hat, [2, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_414": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(activations.read(num_routing - 1), dtype='float32')",
                            "Call"
                        ],
                        [
                            "logit_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_417": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.keras.backend.sum(tf.keras.backend.square(input), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_420": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.sqrt(tf.keras.backend.sum(tf.keras.backend.square(input), -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_445": {
                "x": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_446": {
                "x": {
                    "value": "vec_squared_norm + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "serialize_143": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_144": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_145": {
                "activation": {
                    "value": "self.activity_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_146": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_233": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_294": {
                "input_tensor": {
                    "value": "preact_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(preactivate_unrolled, r_t_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.h_i, self.w_i, self.ch_i * self.n_i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.kernel_size + (self.ch_i * self.n_i, self.ch_j * self.n_j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.conv2d(tf.reshape(input, shape=(-1, self.h_i, self.w_i, self.ch_i * self.n_i)), tf.reshape(self.w, shape=self.kernel_size + (self.ch_i * self.n_i, self.ch_j * self.n_j)), data_format='channels_last', strides=self.stride, padding=self.padding, dilation_rate=self.dilation_rate)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.reshape(outputs, shape=(-1, self.h_j, self.w_j, self.ch_j, self.n_j)))",
                            "Call"
                        ],
                        [
                            "squash(K.batch_dot(c, inputs_hat, [2, 2]) + self.B)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.h_j, self.w_j, self.ch_j, self.n_j)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_181": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_417": {
                "a": {
                    "value": "tf.keras.backend.square(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_423": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.argmax(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.argmax(a, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_417": {
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_422": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nsga/capsulelayers.py": {
        "tensorflow": {
            "zeros_140": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[K.shape(inputs_hat)[0], self.num_capsule, self.input_num_capsule])",
                            "Call"
                        ],
                        [
                            "b + K.batch_dot(outputs, inputs_hat, [2, 3])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nsga/chrlearn.py": {
        "tensorflow": {
            "ConfigProto_29": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nsga/chrlearn_complex.py": {
        "tensorflow": {
            "ConfigProto_28": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_32": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_153": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nsga/main.py": {
        "tensorflow": {
            "ConfigProto_34": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_590": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_658": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_627": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nsga/randlearn.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_30": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}