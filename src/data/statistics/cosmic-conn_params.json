{
    "cosmic_conn/evaluation/utils.py": {
        "sklearn": {
            "roc_curve_172": {
                "variable": {
                    "value": "(fpr, tpr, thres)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(label_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, ref.ravel().astype('uint8'))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predicted_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predicted_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, pdt.ravel())",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_173": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(label_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, ref.ravel().astype('uint8'))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "predicted_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predicted_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, pdt.ravel())",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_451": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(label_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, ref.ravel().astype('uint8'))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "predicted_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predicted_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, pdt.ravel())",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_453": {
                "variable": {
                    "value": "(fpr, tpr, thres)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(label_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, ref.ravel().astype('uint8'))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predicted_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predicted_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, pdt.ravel())",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_588": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(label_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, ref.ravel().astype('uint8'))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "predicted_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predicted_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, pdt.ravel())",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_590": {
                "variable": {
                    "value": "(fpr, tpr, thres)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(label_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, msk_ref.ravel().astype('uint8'))",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='uint8')",
                            "Call"
                        ],
                        [
                            "np.append(label_masks, ref.ravel().astype('uint8'))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predicted_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(predicted_masks).ravel()",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, msk_pdt.ravel())",
                            "Call"
                        ],
                        [
                            "np.array([], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.append(predicted_masks, pdt.ravel())",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_376": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hdul[1 + i].data for i in subset]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(frames).astype('float32')",
                            "Call"
                        ],
                        [
                            "frames - np.median(overscan, axis=(1, 2), keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(frames).view(-1, h, w)",
                            "Call"
                        ],
                        [
                            "subtract_sky(frames, remove_negative=False)",
                            "Call"
                        ],
                        [
                            "tensor2np(frames)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(masks).view(-1, h, w)",
                            "Call"
                        ],
                        [
                            "tensor2np(masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_378": {
                "variable": {
                    "value": "masks_ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks_ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(masks_ignore).view(-1, h, w)",
                            "Call"
                        ],
                        [
                            "tensor2np(masks_ignore)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_386": {
                "variable": {
                    "value": "medians",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "medians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.median(frames, dim=-3)[0].view(-1, h, w)",
                            "Call"
                        ],
                        [
                            "torch.tensor(medians).view(-1, h, w)",
                            "Call"
                        ],
                        [
                            "tensor2np(medians)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "median_384": {
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hdul[1 + i].data for i in subset]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(frames).astype('float32')",
                            "Call"
                        ],
                        [
                            "frames - np.median(overscan, axis=(1, 2), keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(frames).view(-1, h, w)",
                            "Call"
                        ],
                        [
                            "subtract_sky(frames, remove_negative=False)",
                            "Call"
                        ],
                        [
                            "tensor2np(frames)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/dl_framework/cosmic_conn.py": {
        "torch": {
            "zeros_like_205": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remove_nan(image)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_393": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames.to(self.device)",
                            "Call"
                        ],
                        [
                            "subtract_sky(frames, remove_negative=False)",
                            "Call"
                        ],
                        [
                            "frames.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "frames.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "[frames[i, idx] for i in range(b)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames).view(-1, 1, h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_394": {
                "variable": {
                    "value": "cr_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cr_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cr_masks.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "cr_masks.to(self.device)",
                            "Call"
                        ],
                        [
                            "cr_masks.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "[cr_masks[i, idx] for i in range(b)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cr_masks).view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "cr_masks * (1 - ignore_masks)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_51": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_65": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_66": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_126": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[int(i) for i in opt.milestones]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_146": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remove_nan(image)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_471": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict_mask': self.network.state_dict(), 'optimizer_mask': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{self.model_dir}/cr_checkpoint_{epoch}.pth.tar'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "BCELoss_95": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_172": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.load_model",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.model_dir, f'cr_checkpoint_{opt.continue_epoch}.pth.tar')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_190": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(opt.expr_dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "f'continue_{opt.continue_epoch}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "opt.continue_epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_198": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(opt.expr_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_415": {
                "variable": {
                    "value": "pdt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames.to(self.device)",
                            "Call"
                        ],
                        [
                            "subtract_sky(frames, remove_negative=False)",
                            "Call"
                        ],
                        [
                            "frames.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "frames.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "[frames[i, idx] for i in range(b)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames).view(-1, 1, h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_99": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_102": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "median_361": {
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames.to(self.device)",
                            "Call"
                        ],
                        [
                            "subtract_sky(frames, remove_negative=False)",
                            "Call"
                        ],
                        [
                            "frames.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "frames.view(-1, 1, h, w)",
                            "Call"
                        ],
                        [
                            "[frames[i, idx] for i in range(b)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames).view(-1, 1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/dl_framework/dataloader.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LCO_Dataset(opt, train_samples)",
                            "Call"
                        ],
                        [
                            "LCO_NRES_Dataset(opt, train_samples)",
                            "Call"
                        ],
                        [
                            "HST_dataset(train_samples, mini_batch=1, augment=5, max_size=opt.max_train_size, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "_worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "valid_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LCO_Dataset(opt, valid_samples, validate=True)",
                            "Call"
                        ],
                        [
                            "HST_dataset(valid_samples, mini_batch=64, augment=None, max_size=opt.max_valid_size, mode='validate')",
                            "Call"
                        ],
                        [
                            "LCO_NRES_Dataset(opt, valid_samples, validate=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "valid_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16 if opt.model == 'hst' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/dl_framework/parts.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.mpconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_50": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/dl_framework/unet.py": {
        "torch": {
            "ModuleDict_24": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'batch': nn.BatchNorm2d(out_ch, momentum=0.005, affine=True, track_running_stats=True), 'group': nn.GroupNorm(n_group, out_ch, affine=affine), 'instance': nn.InstanceNorm2d(out_ch, affine=affine)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_62": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'batch': nn.BatchNorm2d(out_ch, momentum=0.005), 'group': nn.GroupNorm(n_group, out_ch), 'instance': nn.InstanceNorm2d(out_ch, affine=False)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size=1, stride=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_99": {
                "variable": {
                    "value": "downs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'maxpool': nn.MaxPool2d(2), 'avgpool': nn.AvgPool2d(2), 'stride': nn.Conv2d(in_ch, in_ch, 3, 2, padding=1)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ModuleDict_107": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'unet': DoubleConv(in_ch, out_ch, norm, norm_setting), 'resnet': ResBlock(in_ch, out_ch, norm, norm_setting)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.down_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "downs[down_type]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.down_cov(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x2, x1], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.up3(x4, x3)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x1)",
                            "Call"
                        ],
                        [
                            "self.up2(x3, x2)",
                            "Call"
                        ],
                        [
                            "self.up1(x, x1)",
                            "Call"
                        ],
                        [
                            "self.outc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_126": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_29": {
                "num_groups": {
                    "value": "n_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(1, int(out_ch // channel))",
                            "Call"
                        ],
                        [
                            "group",
                            "Name"
                        ],
                        [
                            "max(1, int(out_ch // channel))",
                            "Call"
                        ],
                        [
                            "group",
                            "Name"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not no_affine",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_30": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not no_affine",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GroupNorm_65": {
                "num_groups": {
                    "value": "n_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(1, int(out_ch // channel))",
                            "Call"
                        ],
                        [
                            "group",
                            "Name"
                        ],
                        [
                            "max(1, int(out_ch // channel))",
                            "Call"
                        ],
                        [
                            "group",
                            "Name"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_66": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_101": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_102": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_130": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/dl_framework/utils_ml.py": {
        "torch": {
            "arange_88": {
                "variable": {
                    "value": "x_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_91": {
                "variable": {
                    "value": "xy_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grid, y_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "gaussian_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_138": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(p, eps, 1 - eps)",
                            "Call"
                        ],
                        [
                            "p.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_281": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.nan_to_num(image, copy=False, nan=0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float()",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_444": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stacks.shape[1]",
                            "Subscript"
                        ],
                        [
                            "[stacks[i, idx] for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames).unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_444": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "median_weighted_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "median_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "neg_189": {
                "input": {
                    "value": "torch.mean(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_208": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-BCE_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.nan_to_num(image, copy=False, nan=0.0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float()",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_271": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_273": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_458": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshaped.view(in_shape)",
                            "Call"
                        ],
                        [
                            "tensor.view(-1, in_shape[-2], in_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.clamp(tensor, 0.0, tensor.max())",
                            "Call"
                        ],
                        [
                            "tensor.view(in_shape)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "tensor.max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.repeat(channels, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_189": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * torch.log(p) + (1 - y) * torch.log(1 - p)",
                            "BinOp"
                        ],
                        [
                            "y * torch.log(p) + median_weighted_mask * ((1 - y) * torch.log(1 - p))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_202": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_206": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_210": {
                "input": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - pt) ** self.gamma * BCE_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_419": {
                "input": {
                    "value": "20 * (iou - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_51": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_123": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(p, eps, 1 - eps)",
                            "Call"
                        ],
                        [
                            "p.contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_142": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "mask_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "median_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "median_stack[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "median_curr - torch.median(median_curr)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "floor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(0, robust_std)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "ceil",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(median_curr.max().item(), 5 * robust_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "mask_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(median_curr, floor, ceil)",
                            "Call"
                        ],
                        [
                            "mask_curr / mask_curr.max()",
                            "BinOp"
                        ],
                        [
                            "gaussian_filter(mask_curr)",
                            "Call"
                        ],
                        [
                            "torch.clamp(mask_curr, imbalance_alpha, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "imbalance_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_186": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(p, eps, 1 - eps)",
                            "Call"
                        ],
                        [
                            "p.contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "(xy_grid - mean) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "median_160": {
                "input": {
                    "value": "median_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "median_stack[i:i + 1]",
                            "Subscript"
                        ],
                        [
                            "median_curr - torch.median(median_curr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_187": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/evaluation/Gemini_ROC_PR.py": {
        "torch": {
            "manual_seed_278": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/evaluation/LCO_ROC_PR.py": {
        "torch": {
            "manual_seed_258": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/evaluation/LCO_plot4banzai.py": {
        "torch": {
            "manual_seed_190": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/evaluation/NRES_ROC_PR.py": {
        "torch": {
            "manual_seed_187": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cosmic_conn/inference_cr.py": {
        "torch": {}
    },
    "cosmic_conn/train.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_160": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "paper_utils/model_search.py": {
        "torch": {
            "manual_seed_74": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/deployment_compile.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "profile_98": {
                "variable": {
                    "value": "prof",
                    "type": "variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "torch.profiler.schedule(wait=1, warmup=1, active=3, repeat=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "on_trace_ready": {
                    "value": "torch.profiler.tensorboard_trace_handler('./log')",
                    "type": "Call",
                    "possible_values": []
                },
                "record_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "profile_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "with_stack": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}