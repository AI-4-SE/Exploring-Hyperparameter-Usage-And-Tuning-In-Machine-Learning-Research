{
    "log_utils.py": {
        "tensorflow": {},
        "torch": {
            "save_128": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.log_dir, 'model_iter_{}.pth'.format(self.iteration))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.log_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.log_dir, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_131": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.log_dir, 'model_iter_{}.pth'.format(self.iteration))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.log_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.log_dir, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_136": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.log_dir, 'optimizer.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_156": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.log_dir, 'model_iter_{}.pth'.format(self.iteration))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.log_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.log_dir, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "criterion.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.new(mask.size(0), mask.size(1), 1).fill_(1), mask[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), mask.size(1), 1).fill_(1), mask[:, :, :-1]], 2).contiguous()",
                            "Call"
                        ],
                        [
                            "Variable(mask)",
                            "Call"
                        ],
                        [
                            "(target > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([Variable(mask.data.new(mask.size(0), 1).fill_(1)), mask[:, :-1]], 1))",
                            "Call"
                        ],
                        [
                            "mask.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask.view(-1, seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_53": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), mask.size(1), 1).fill_(1), mask[:, :, :-1]], 2).contiguous()",
                            "Call"
                        ],
                        [
                            "Variable(mask)",
                            "Call"
                        ],
                        [
                            "(target > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([Variable(mask.data.new(mask.size(0), 1).fill_(1)), mask[:, :-1]], 1))",
                            "Call"
                        ],
                        [
                            "mask.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask.view(-1, seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "[Variable(mask.data.new(mask.size(0), 1).fill_(1)), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), mask.size(1), 1).fill_(1), mask[:, :, :-1]], 2).contiguous()",
                            "Call"
                        ],
                        [
                            "Variable(mask)",
                            "Call"
                        ],
                        [
                            "(target > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([Variable(mask.data.new(mask.size(0), 1).fill_(1)), mask[:, :-1]], 1))",
                            "Call"
                        ],
                        [
                            "mask.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask.view(-1, seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_138": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), mask.size(1), 1).fill_(1), mask[:, :, :-1]], 2).contiguous()",
                            "Call"
                        ],
                        [
                            "Variable(mask)",
                            "Call"
                        ],
                        [
                            "(target > 0).float()",
                            "Call"
                        ],
                        [
                            "to_contiguous(torch.cat([Variable(mask.data.new(mask.size(0), 1).fill_(1)), mask[:, :-1]], 1))",
                            "Call"
                        ],
                        [
                            "mask.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask.view(-1, seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_137": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(-1, input.size(2), input.size(3))",
                            "Call"
                        ],
                        [
                            "to_contiguous(input).view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "DataLoader_246": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "opt.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_utils.py": {
        "torch": {}
    },
    "misc/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_110": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "misc/resnet_utils.py": {
        "torch": {
            "adaptive_avg_pool2d_26": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "[att_size, att_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_26": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "misc/utils.py": {
        "torch": {}
    },
    "misc/yellowfin.py": {
        "torch": {
            "SGD_55": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_153": {
                "input": {
                    "value": "curv_win[:valid_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_155": {
                "input": {
                    "value": "curv_win[:valid_end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "state['grad_avg'] * state['grad_avg']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "numel_235": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.add(group['weight_decay'], p.data)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_282": {
                "input": {
                    "value": "grad * grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/BaseModel.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.project_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_44": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_dim, self.hidden_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.init_s_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.init_c_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.baseline_estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed(last_word)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(word_emb, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "input_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_emb, imgs.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_100": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(out_d[:, 0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seq]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "seq_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seq_log_probs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_37": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "baseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in baseline]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_364": {
                "variable": {
                    "value": "seq[:all_outputs.shape[0], k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_outputs[:, best_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_365": {
                "variable": {
                    "value": "seq_log_probs[:all_costs.shape[0], k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_costs[:, best_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_39": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(sample_log_prob, last_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.logit(out_d[:, 0, :]))",
                            "Call"
                        ],
                        [
                            "log_probs + mask",
                            "BinOp"
                        ],
                        [
                            "log_probs + mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_196": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_197": {
                "variable": {
                    "value": "last_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(log_probs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs.data).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_147": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_149": {
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(log_probs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_probs.data).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_149": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(last_word_onehot.scatter_(1, last_word.data[:, None], 1.0) * penalize_value[:, None])",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, log_probs.size(-1)), 'float32')",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(mask)).cuda()",
                            "Call"
                        ],
                        [
                            "outputs != 0",
                            "Compare"
                        ],
                        [
                            "outputs != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_275": {
                "ndarray": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([_.unsqueeze(1) for _ in outputs], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_276": {
                "ndarray": {
                    "value": "new_state_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_d_k.data.cpu().numpy()[:, indexes, :]",
                            "Subscript"
                        ],
                        [
                            "state_d_k.data.cpu().numpy()[:, indexes, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_344": {
                "ndarray": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([_.unsqueeze(1) for _ in outputs], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_345": {
                "ndarray": {
                    "value": "new_state_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_d_k.data.cpu().numpy()[:, indexes, :]",
                            "Subscript"
                        ],
                        [
                            "state_d_k.data.cpu().numpy()[:, indexes, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/RewardModel.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.word_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[F.relu(conv(embedding)).squeeze(3) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "np.load('VIST/embedding.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.kernel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, self.word_embed_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softsign_45": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_56": {
                "input": {
                    "value": "conv(embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_57": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_47": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_18": {
                "ndarray": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/__init__.py": {
        "torch": {
            "load_30": {
                "f": {
                    "value": "os.path.join(opt.resume_from, 'model-best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "os.path.join(opt.resume_from, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "opt.start_from_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim_en",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projected_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim_de",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projected_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "projected_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(self.linear1(out_e)) + F.dropout(self.linear2(h_att))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.squeeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.visual_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feat_size, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.hin_dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.project_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_69": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_82": {
                "variable": {
                    "value": "self.position_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.story_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "num_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_72": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "input": {
                    "value": "self.linear2(h_att)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/extract_features.py": {
        "torch": {
            "load_41": {
                "f": {
                    "value": "os.path.join(params['model_root'], params['model'] + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "I.transpose([2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_79": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ],
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "opt.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ],
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ],
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.optim_alpha, opt.optim_beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.optim_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_39": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_61": {
                "f": {
                    "value": "optim_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.resume_from, 'optimizer.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(logger.log_dir, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_AREL.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ],
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "opt.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ],
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ],
                        [
                            "VISTDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "os.path.join(logger.log_dir, 'disc-model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_140": {
                "variable": {
                    "value": "avg_pos_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "disc(target.view(-1, target.size(2)), feature_fc.view(-1, feature_fc.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_141": {
                "variable": {
                    "value": "avg_neg_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "disc(seq.view(-1, seq.size(2)), feature_fc.view(-1, feature_fc.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_153": {
                "variable": {
                    "value": "avg_pos_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "disc(seq.view(-1, seq.size(2)), feature_fc.view(-1, feature_fc.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "[Variable(mask.data.new(mask.size(0), mask.size(1), 1).fill_(1)), mask[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "gt_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "disc(target.view(-1, target.size(2)), feature_fc.view(-1, feature_fc.size(2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_207": {
                "obj": {
                    "value": "disc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logger.log_dir, 'disc-model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_199": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(logger.log_dir, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}