{
    "convert_prediction_from_json_to_csv.py": {
        "tensorflow": {
            "Glob_83": {
                "variable": {
                    "value": "file_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "FLAGS.json_prediction_files_pattern",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "json_prediction_files_pattern",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Pattern specifying the list of JSON files that the command 'gcloud beta ml jobs submit prediction' outputs. These files are located in the output path of the prediction command and are prefixed with 'prediction.results'.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "csv_output_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The file to save the predictions converted to the CSV format.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_71": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_80": {
                "msg": {
                    "value": "Looking for prediction files with pattern: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.json_prediction_files_pattern",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_84": {
                "msg": {
                    "value": "Found files: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "file_paths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gfile.Glob(FLAGS.json_prediction_files_pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_86": {
                "msg": {
                    "value": "Writing submission file to: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.csv_output_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_100": {
                "msg": {
                    "value": "done",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_91": {
                "msg": {
                    "value": "processing file: %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "file_paths",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "eval.py": {
        "tensorflow": {
            "Variable_138": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_149": {
                "variable": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_input_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(model_input_raw.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/yt8m_model/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory to load the model files from. The tensorboard metrics files are also saved to this directory.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "eval_data_pattern",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"File glob defining the evaluation dataset in tensorflow.SequenceExample format. The SequenceExamples are expected to have an 'rgb' byte array sequence feature as well as a 'labels' int64 context feature.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_43": {
                "name": {
                    "value": "feature_names",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "mean_rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the feature to use for training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "feature_sizes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Length of the feature vectors.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_48": {
                "name": {
                    "value": "frame_features",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If set, then --eval_data_pattern must be frame-level features. Otherwise, --eval_data_pattern must be aggregated video-level features. The model must also be set appropriately (i.e. to read 3D batches VS 4D batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "LogisticModel",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Which architecture to use for the model. Options include 'Logistic', 'SingleMixtureMoe', and 'TwoLayerSigmoid'. See aggregated_models.py and frame_level_models.py for the model definitions.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many examples to process per batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "CrossEntropyLoss",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Loss computed on validation data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "num_readers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many threads to use for reading input files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "top_k",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many predictions to output per video.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "check_point",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Model checkpoint to load, -1 for latest.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_100": {
                "msg": {
                    "value": "Using batch size of  + str(batch_size) +  for evaluation.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_102": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "data_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_106": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gfile.Glob(data_pattern)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_144": {
                "name": {
                    "value": "model_input_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "model_input_raw",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_to_collection_164": {
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_165": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "result['loss']",
                            "Subscript"
                        ],
                        [
                            "label_loss_fn.calculate_loss(predictions, labels_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_166": {
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "result['predictions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_167": {
                "name": {
                    "value": "input_batch",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "model_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(model_input_raw, feature_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_168": {
                "name": {
                    "value": "video_id_batch",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "video_id_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection('video_id_batch')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_169": {
                "name": {
                    "value": "num_frames",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_to_collection_170": {
                "name": {
                    "value": "labels",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(labels_batch, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_171": {
                "name": {
                    "value": "summary_op",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.summary.merge_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_221": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_281": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_316": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_317": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_333": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "eval_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "'number of evaluation files: ' + str(len(files))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_join_111": {
                "tensors_list": {
                    "value": "eval_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[reader.prepare_reader(filename_queue) for _ in range(num_readers)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_158": {
                "name": {
                    "value": "model_activations",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "result['predictions']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_170": {
                "x": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_197": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_309": {
                "msg": {
                    "value": "built evaluation graph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_202": {
                "msg": {
                    "value": "'Loading checkpoint for eval: ' + latest_checkpoint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_209": {
                "msg": {
                    "value": "No checkpoint file found.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_213": {
                "msg": {
                    "value": "skip this checkpoint global_step_val=%s (same as the previous one).",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "global_step_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "latest_checkpoint.split('/')[-1].split('-')[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_224": {
                "key": {
                    "value": "tf.GraphKeys.QUEUE_RUNNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_228": {
                "msg": {
                    "value": "enter eval_once loop global_step_val = %s. ",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "global_step_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "latest_checkpoint.split('/')[-1].split('-')[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_310": {
                "key": {
                    "value": "video_id_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_311": {
                "key": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_312": {
                "key": {
                    "value": "labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_313": {
                "key": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_314": {
                "key": {
                    "value": "summary_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_251": {
                "msg": {
                    "value": "examples_processed: %d | %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "examples_processed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "examples_processed + labels_val.shape[0]",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "iterinfo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.AddGlobalStepSummary(summary_writer, global_step_val, iteration_info_dict, summary_scope='Eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_255": {
                "msg": {
                    "value": "Done with batched inference. Now calculating global performance metrics.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_268": {
                "msg": {
                    "value": "epochinfo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.AddEpochSummary(summary_writer, global_step_val, epoch_info_dict, summary_scope='Eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_271": {
                "msg": {
                    "value": "'Unexpected exception: ' + str(e)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "export_model.py": {
        "tensorflow": {
            "l2_normalize_96": {
                "variable": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_input_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(model_input_raw.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_37": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "sharded": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "serialized_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_70": {
                "variable": {
                    "value": "(video_id_output, top_indices_output, top_predictions_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: self.build_prediction_graph(x)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "serialized_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, shape=(None,))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string, shape=(None,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(tf.string, tf.int32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "serialized_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_111": {
                "variable": {
                    "value": "(top_predictions, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "result['predictions']",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "_TOP_PREDICTIONS_IN_OUTPUT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "Graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "build_signature_def_47": {
                "variable": {
                    "value": "signature",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method_name": {
                    "value": "signature_constants.PREDICT_METHOD_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "build_tensor_info_81": {
                "tensor": {
                    "value": "serialized_examples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, shape=(None,))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string, shape=(None,))",
                            "Call"
                        ]
                    ]
                }
            },
            "build_tensor_info_84": {
                "tensor": {
                    "value": "video_id_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "build_tensor_info_85": {
                "tensor": {
                    "value": "top_indices_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "build_tensor_info_86": {
                "tensor": {
                    "value": "top_predictions_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histogram_107": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frame_level_models.py": {
        "tensorflow": {
            "DEFINE_bool_33": {
                "name": {
                    "value": "gating_remove_diag",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Remove diag for self gating",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_35": {
                "name": {
                    "value": "lightvlad",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Light or full NetVLAD",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_37": {
                "name": {
                    "value": "vlagd",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "vlagd of vlad",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of frames per batch for DBoF.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_44": {
                "name": {
                    "value": "dbof_add_batch_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Adds batch normalization to the DBoF model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_46": {
                "name": {
                    "value": "sample_random_frames",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If true samples random frames (for frame level models). If false, a randomsequence of frames is sampled instead.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "dbof_cluster_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "16384",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the DBoF cluster layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "dbof_hidden_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the DBoF hidden layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_54": {
                "name": {
                    "value": "dbof_relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "add ReLU to hidden layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "dbof_var_features",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Variance features on top of Dbof cluster layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "dbof_activation",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "dbof activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_60": {
                "name": {
                    "value": "softdbof_maxpool",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "add max pool to soft dbof",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "netvlad_cluster_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the NetVLAD cluster layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_64": {
                "name": {
                    "value": "netvlad_relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "add ReLU to hidden layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "netvlad_dimred",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "NetVLAD output dimension reduction",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "gatednetvlad_dimred",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "GatedNetVLAD output dimension reduction",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_70": {
                "name": {
                    "value": "gating",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Gating for NetVLAD",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "hidden_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "size of hidden layer for BasicStatModel.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "netvlad_hidden_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the NetVLAD hidden layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "netvlad_hidden_size_video",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the NetVLAD video hidden layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "netvlad_hidden_size_audio",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the NetVLAD audio hidden layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_87": {
                "name": {
                    "value": "netvlad_add_batch_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Adds batch normalization to the DBoF model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "fv_cluster_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the NetVLAD cluster layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_93": {
                "name": {
                    "value": "fv_hidden_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of units in the NetVLAD hidden layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_95": {
                "name": {
                    "value": "fv_relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "ReLU after the NetFV hidden layer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_99": {
                "name": {
                    "value": "fv_couple_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Coupling cluster weights or not",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_102": {
                "name": {
                    "value": "fv_coupling_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Coupling factor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_106": {
                "name": {
                    "value": "dbof_pooling_method",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"The pooling method used in the DBoF cluster layer. Choices are 'average' and 'max'.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_109": {
                "name": {
                    "value": "video_level_classifier_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "MoeModel",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Some Frame-Level models can be decomposed into a generalized pooling operation followed by a classifier layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_113": {
                "name": {
                    "value": "lstm_cells",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of LSTM cells.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_114": {
                "name": {
                    "value": "lstm_layers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of LSTM layers.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_115": {
                "name": {
                    "value": "lstm_cells_video",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of LSTM cells (video).",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_116": {
                "name": {
                    "value": "lstm_cells_audio",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of LSTM cells (audio).",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_120": {
                "name": {
                    "value": "gru_cells",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GRU cells.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_121": {
                "name": {
                    "value": "gru_cells_video",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GRU cells (video).",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_122": {
                "name": {
                    "value": "gru_cells_audio",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GRU cells (audio).",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_123": {
                "name": {
                    "value": "gru_layers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GRU layers.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_124": {
                "name": {
                    "value": "lstm_random_sequence",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Random sequence input for lstm.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_126": {
                "name": {
                    "value": "gru_random_sequence",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Random sequence input for gru.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_128": {
                "name": {
                    "value": "gru_backward",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "BW reading for GRU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_129": {
                "name": {
                    "value": "lstm_backward",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "BW reading for LSTM",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_132": {
                "name": {
                    "value": "fc_dimred",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Adding FC dimred after pooling",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_174": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_175": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.cluster_size * self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_178": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_215": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_220": {
                "variable": {
                    "value": "a_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_222": {
                "variable": {
                    "value": "cluster_weights2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_226": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cluster_weights2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(FLAGS.fv_coupling_factor, cluster_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_228": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_232": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_233": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(a_sum, cluster_weights2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(a_sum, cluster_weights2)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_236": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.cluster_size * self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_239": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_255": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_273": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "gate_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gate_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.cluster_size, self.feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_281": {
                "variable": {
                    "value": "gate_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gate_weights', [1, self.cluster_size, self.feature_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gate_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "variable": {
                    "value": "vlagd",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_288": {
                "variable": {
                    "value": "vlagd",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlagd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vlagd, gate_weights)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlagd, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlagd, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "FLAGS.vlagd",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "gate_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gate_weights', [1, self.cluster_size, self.feature_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gate_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_290": {
                "variable": {
                    "value": "vlagd",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vlagd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vlagd, gate_weights)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlagd, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlagd, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "FLAGS.vlagd",
                            "Attribute"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_292": {
                "variable": {
                    "value": "vlagd",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlagd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vlagd, gate_weights)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlagd, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlagd, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "FLAGS.vlagd",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "vlagd",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vlagd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vlagd, gate_weights)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlagd, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlagd, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "FLAGS.vlagd",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.cluster_size * self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_295": {
                "variable": {
                    "value": "vlagd",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vlagd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vlagd, gate_weights)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlagd, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlagd, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlagd, 1)",
                            "Call"
                        ],
                        [
                            "FLAGS.vlagd",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_320": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size, cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_325": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_341": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_frames, cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "variable": {
                    "value": "activation_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_347": {
                "variable": {
                    "value": "activation_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_348": {
                "variable": {
                    "value": "activation_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation_max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_max(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_max, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_max, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_351": {
                "variable": {
                    "value": "dim_red",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dim_red",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size, feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_355": {
                "variable": {
                    "value": "cluster_weights_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size, cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_361": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation_max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_max(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_max, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_max, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "dim_red",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dim_red', [cluster_size, feature_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_362": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights_2', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_378": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_380": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "activation_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_sum, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_381": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_405": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size, cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_410": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_426": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_428": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_frames, cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_430": {
                "variable": {
                    "value": "activation_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_431": {
                "variable": {
                    "value": "activation_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_sum, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_462": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size, cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_467": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_495": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_frames, cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_498": {
                "variable": {
                    "value": "avg_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avg_activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.FramePooling(activation, 'average')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(avg_activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_501": {
                "variable": {
                    "value": "max_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.FramePooling(activation, 'max')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(max_activation, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_514": {
                "variable": {
                    "value": "cluster_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_518": {
                "variable": {
                    "value": "covar_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "covar_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=1.0, stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_522": {
                "variable": {
                    "value": "covar_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "covar_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('covar_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(mean=1.0, stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.square(covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.add(covar_weights, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_523": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1e-06]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_524": {
                "variable": {
                    "value": "covar_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "covar_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('covar_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(mean=1.0, stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.square(covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.add(covar_weights, eps)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([1e-06])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_527": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_542": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_545": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_547": {
                "variable": {
                    "value": "a_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_556": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cluster_weights2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(FLAGS.fv_coupling_factor, cluster_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_558": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_560": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_frames, self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_561": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_563": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_566": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.square(cluster_weights2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_568": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cluster_weights2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(FLAGS.fv_coupling_factor, cluster_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_569": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.square(reshaped_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_571": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_572": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[a2, fv2, tf.scalar_mul(-2, b2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_574": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.square(covar_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_575": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a_sum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(activation, -2, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_577": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.cluster_size * self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_579": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_580": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.cluster_size * self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_581": {
                "variable": {
                    "value": "fv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, tf.square(reshaped_input))",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.add_n([a2, fv2, tf.scalar_mul(-2, b2)])",
                            "Call"
                        ],
                        [
                            "tf.divide(fv2, tf.square(covar_weights))",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv2, a_sum)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv2, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv2, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_583": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(a_sum, cluster_weights2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(a_sum, cluster_weights2)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_584": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "covar_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('covar_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(mean=1.0, stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.square(covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.add(covar_weights, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_586": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_587": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.cluster_size * self.feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_588": {
                "variable": {
                    "value": "fv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fv1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv1, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(fv1, a)",
                            "Call"
                        ],
                        [
                            "tf.divide(fv1, covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv1, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fv1, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_632": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_643": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_670": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[vlad_video, vlad_audio]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_673": {
                "variable": {
                    "value": "hidden1_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vlad_dim, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_677": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vlad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, reshaped_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(vlad, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(vlad, a)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vlad, [-1, self.cluster_size * self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(vlad, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([vlad_video, vlad_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_780": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_789": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_813": {
                "variable": {
                    "value": "dbof",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dbof_video, dbof_audio]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_817": {
                "variable": {
                    "value": "hidden1_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dbof_dim, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_821": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dbof",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_892": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_901": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_922": {
                "variable": {
                    "value": "dbof",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dbof_video, dbof_audio]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_1007": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1016": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1037": {
                "variable": {
                    "value": "dbof",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dbof_video, dbof_audio]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiRNNCell_1108": {
                "variable": {
                    "value": "stacked_lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.BasicLSTMCell(lstm_size, forget_bias=1.0, state_is_tuple=False) for _ in range(number_of_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiRNNCell_1162": {
                "variable": {
                    "value": "stacked_GRU",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.GRUCell(gru_size) for _ in range(number_of_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_1221": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1230": {
                "variable": {
                    "value": "reshaped_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1251": {
                "variable": {
                    "value": "fv",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fv_video, fv_audio]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1254": {
                "variable": {
                    "value": "hidden1_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fv_dim, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1258": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([fv_video, fv_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_198": {
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_216": {
                "name": {
                    "value": "cluster_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_269": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_324": {
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_359": {
                "name": {
                    "value": "cluster_weights_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_weights_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights_2', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_372": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_409": {
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_420": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_434": {
                "variable": {
                    "value": "activation_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_435": {
                "variable": {
                    "value": "activation_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation_max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_max(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_max, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation_max, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_436": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[activation_sum, activation_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_466": {
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_477": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_487": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation[:, gate_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_488": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation[:, space_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(activation[:, gate_ind])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, activation)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "gates + gating_biases",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_493": {
                "name": {
                    "value": "cluster_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_503": {
                "values": {
                    "value": "[avg_activation, max_activation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_526": {
                "name": {
                    "value": "cluster_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_536": {
                "variable": {
                    "value": "cluster_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_543": {
                "name": {
                    "value": "cluster_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_550": {
                "variable": {
                    "value": "cluster_weights2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cluster_weights2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.feature_size, self.cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_554": {
                "variable": {
                    "value": "cluster_weights2",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "FLAGS.fv_coupling_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "cluster_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [feature_size, cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_590": {
                "values": {
                    "value": "[fv1, fv2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_688": {
                "variable": {
                    "value": "hidden1_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_695": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_699": {
                "variable": {
                    "value": "gating_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gating_weights_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(hidden1_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_703": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "gating_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gating_weights_2', [hidden1_size, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(hidden1_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gating_weights_2', [hidden1_size, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(hidden1_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_724": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(activation[:, gate_ind])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, activation)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "gates + gating_biases",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_726": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(activation[:, gate_ind])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, activation)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "gates + gating_biases",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_790": {
                "name": {
                    "value": "input_hist",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_820": {
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_831": {
                "variable": {
                    "value": "hidden1_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_838": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_839": {
                "name": {
                    "value": "hidden1_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_902": {
                "name": {
                    "value": "input_hist",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_927": {
                "variable": {
                    "value": "hidden1_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dbof_dim, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_931": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dbof",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1017": {
                "name": {
                    "value": "input_hist",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1042": {
                "variable": {
                    "value": "hidden1_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dbof_dim, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1046": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dbof",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([dbof_video, dbof_audio], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1102": {
                "variable": {
                    "value": "num_frames_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_sequence_1106": {
                "variable": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_1117": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "stacked_lstm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([tf.contrib.rnn.BasicLSTMCell(lstm_size, forget_bias=1.0, state_is_tuple=False) for _ in range(number_of_layers)], state_is_tuple=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1155": {
                "variable": {
                    "value": "num_frames_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(num_frames, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_sequence_1160": {
                "variable": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_1170": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "stacked_GRU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([tf.contrib.rnn.GRUCell(gru_size) for _ in range(number_of_layers)], state_is_tuple=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames_2, iterations)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(model_input, num_frames, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomFrames(model_input, num_frames, iterations)",
                            "Call"
                        ],
                        [
                            "utils.SampleRandomSequence(model_input, num_frames, iterations)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_1231": {
                "name": {
                    "value": "input_hist",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1268": {
                "variable": {
                    "value": "hidden1_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_1275": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1278": {
                "variable": {
                    "value": "gating_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gating_weights_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size, hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(hidden1_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1282": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "gating_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gating_weights_2', [hidden1_size, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(hidden1_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gating_weights_2', [hidden1_size, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(hidden1_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1297": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(activation[:, gate_ind])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, activation)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "gates + gating_biases",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1299": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(activation[:, gate_ind])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, activation)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "gates + gating_biases",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, gating_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_162": {
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_212": {
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_338": {
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_375": {
                "name": {
                    "value": "cluster_biases_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_423": {
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_480": {
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu6_491": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_539": {
                "name": {
                    "value": "cluster_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cluster_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases_2', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_biases', [self.cluster_size], initializer=tf.random_normal(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_566": {
                "x": {
                    "value": "cluster_weights2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('cluster_weights2', [1, self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(FLAGS.fv_coupling_factor, cluster_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_569": {
                "x": {
                    "value": "reshaped_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(reshaped_input, [-1, self.max_frames, self.feature_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(model_input, [-1, feature_size])",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(reshaped_input, center=True, scale=True, is_training=is_training, scope='input_bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_574": {
                "x": {
                    "value": "covar_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('covar_weights', [self.feature_size, self.cluster_size], initializer=tf.random_normal_initializer(mean=1.0, stddev=1 / math.sqrt(self.feature_size)))",
                            "Call"
                        ],
                        [
                            "tf.square(covar_weights)",
                            "Call"
                        ],
                        [
                            "tf.add(covar_weights, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_632": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_664": {
                "name_or_scope": {
                    "value": "video_VLAD",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_667": {
                "name_or_scope": {
                    "value": "audio_VLAD",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_691": {
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_719": {
                "variable": {
                    "value": "gating_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gating_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_780": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_807": {
                "name_or_scope": {
                    "value": "video_DBOF",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_810": {
                "name_or_scope": {
                    "value": "audio_DBOF",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_834": {
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_892": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_916": {
                "name_or_scope": {
                    "value": "video_DBOF",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_919": {
                "name_or_scope": {
                    "value": "audio_DBOF",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_930": {
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_941": {
                "variable": {
                    "value": "hidden1_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_948": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_949": {
                "name": {
                    "value": "hidden1_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1007": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1031": {
                "name_or_scope": {
                    "value": "video_DBOF",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1034": {
                "name_or_scope": {
                    "value": "audio_DBOF",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_1045": {
                "name": {
                    "value": "hidden1_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_weights', [vlad_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [dbof_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_weights', [fv_dim, hidden1_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(cluster_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1056": {
                "variable": {
                    "value": "hidden1_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden1_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_1063": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1064": {
                "name": {
                    "value": "hidden1_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1116": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1169": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1221": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1245": {
                "name_or_scope": {
                    "value": "video_FV",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1248": {
                "name_or_scope": {
                    "value": "audio_FV",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_1271": {
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1292": {
                "variable": {
                    "value": "gating_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gating_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cluster_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(stddev=1 / math.sqrt(feature_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_147": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_196": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_224": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_257": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_279": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_322": {
                "stddev": {
                    "value": "1 / math.sqrt(feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_353": {
                "stddev": {
                    "value": "1 / math.sqrt(feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_357": {
                "stddev": {
                    "value": "1 / math.sqrt(feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_407": {
                "stddev": {
                    "value": "1 / math.sqrt(feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_464": {
                "stddev": {
                    "value": "1 / math.sqrt(feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_516": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_520": {
                "mean": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_mul_572": {
                "scalar": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(fv1, cluster_weights2)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_675": {
                "stddev": {
                    "value": "1 / math.sqrt(cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_819": {
                "stddev": {
                    "value": "1 / math.sqrt(cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_944": {
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1059": {
                "name": {
                    "value": "hidden1_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "hidden1_biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('hidden1_biases', [hidden1_size], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1102": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_1110": {
                "num_units": {
                    "value": "lstm_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.lstm_cells",
                            "Attribute"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1155": {
                "input": {
                    "value": "num_frames",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(num_frames, 1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_1164": {
                "units": {
                    "value": "gru_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.gru_cells",
                            "Attribute"
                        ]
                    ]
                }
            },
            "random_normal_initializer_1256": {
                "stddev": {
                    "value": "1 / math.sqrt(cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_161": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_211": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_271": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_552": {
                "stddev": {
                    "value": "1 / math.sqrt(self.feature_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_690": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_701": {
                "stddev": {
                    "value": "1 / math.sqrt(hidden1_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_708": {
                "x": {
                    "value": "diagonals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_diag_part(gating_weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "activation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "activation + hidden1_biases",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation_max, dim_red)",
                            "Call"
                        ],
                        [
                            "tf.matmul(activation, cluster_weights_2)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn_2')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, activation_sum)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(activation, 1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.concat([activation_sum, activation_max], 1)",
                            "Call"
                        ],
                        [
                            "activation_sum",
                            "Name"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation[:, space_ind], gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, max_frames, cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(reshaped_input, cluster_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=self.is_training, scope='cluster_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activation)",
                            "Call"
                        ],
                        [
                            "tf.reshape(activation, [-1, self.max_frames, self.cluster_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(activation, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(vlad, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dbof, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "dbof",
                            "Name"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.matmul(fv, hidden1_weights)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(activation, center=True, scale=True, is_training=is_training, scope='hidden1_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(activation)",
                            "Call"
                        ],
                        [
                            "tf.multiply(activation, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_833": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_929": {
                "stddev": {
                    "value": "1 / math.sqrt(cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1044": {
                "stddev": {
                    "value": "1 / math.sqrt(cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1270": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1280": {
                "stddev": {
                    "value": "1 / math.sqrt(hidden1_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_943": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1058": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "tensorflow": {
            "DEFINE_string_36": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/yt8m_model/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory to load the model files from.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "output_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The file to save the predictions to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "input_data_pattern",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"File glob defining the evaluation dataset in tensorflow.SequenceExample format. The SequenceExamples are expected to have an 'rgb' byte array sequence feature as well as a 'labels' int64 context feature.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_47": {
                "name": {
                    "value": "frame_features",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If set, then --eval_data_pattern must be frame-level features. Otherwise, --eval_data_pattern must be aggregated video-level features. The model must also be set appropriately (i.e. to read 3D batches VS 4D batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8192",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many examples to process per batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "feature_names",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "mean_rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the feature to use for training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "feature_sizes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Length of the feature vectors.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "num_readers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many threads to use for reading input files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "top_k",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many predictions to output per video.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "check_point",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Model checkpoint to load, -1 for latest.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Glob_98": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "data_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_103": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gfile.Glob(data_pattern)",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_join_109": {
                "variable": {
                    "value": "(video_id_batch, video_batch, unused_labels, num_frames_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "examples_and_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[reader.prepare_reader(filename_queue) for _ in range(num_readers)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(video_ids)",
                            "Call"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_118": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "import_meta_graph_128": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "meta_graph_location",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "latest_checkpoint + '.meta'",
                            "BinOp"
                        ],
                        [
                            "FLAGS.train_dir + '/model.ckpt-' + str(FLAGS.check_point) + '.meta'",
                            "BinOp"
                        ]
                    ]
                },
                "clear_devices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Coordinator_148": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_149": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_177": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_97": {
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_102": {
                "msg": {
                    "value": "'number of input files: ' + str(len(files))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_129": {
                "msg": {
                    "value": "'restoring variables from ' + latest_checkpoint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_127": {
                "msg": {
                    "value": "'loading meta-graph: ' + meta_graph_location",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_131": {
                "key": {
                    "value": "input_batch_raw",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "key": {
                    "value": "num_frames",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_133": {
                "key": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variables_initializer_142": {
                "var_list": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_ref_145": {
                "key": {
                    "value": "tf.GraphKeys.LOCAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_161": {
                "msg": {
                    "value": "'num examples processed: ' + str(num_examples_processed) + ' elapsed seconds: ' + '{0:.2f}'.format(now - start_time)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_168": {
                "msg": {
                    "value": "'Done with inference. The output file was written to ' + out_file_location",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_140": {
                "ref": {
                    "value": "variable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(variables)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "DEFINE_float_24": {
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Ponderation for XENT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "float_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_61": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cross_entropy_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * (alpha * float_labels * tf.log(predictions + epsilon) + (1 - alpha) * (1 - float_labels) * tf.log(1 - predictions + epsilon))",
                            "BinOp"
                        ],
                        [
                            "tf.negative(cross_entropy_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "loss_xent",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "tf.reduce_sum(cross_entropy_loss, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "cross_entropy_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * (alpha * float_labels * tf.log(predictions + epsilon) + (1 - alpha) * (1 - float_labels) * tf.log(1 - predictions + epsilon))",
                            "BinOp"
                        ],
                        [
                            "tf.negative(cross_entropy_loss)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_59": {
                "x": {
                    "value": "predictions + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_60": {
                "x": {
                    "value": "1 - predictions + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils.py": {
        "tensorflow": {
            "tile_36": {
                "variable": {
                    "value": "frame_index_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(num_samples), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_38": {
                "variable": {
                    "value": "max_start_frame_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_frames - num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "start_frame_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.random_uniform([batch_size, 1]), tf.cast(max_start_frame_index + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_43": {
                "variable": {
                    "value": "frame_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start_frame_index + frame_index_offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(num_frames - 1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(batch_size), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_index, frame_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "frame_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.random_uniform([batch_size, num_samples]), tf.tile(tf.cast(num_frames, tf.float32), [1, num_samples]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_67": {
                "variable": {
                    "value": "batch_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(batch_size), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_index, frame_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_48": {
                "params": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([batch_index, frame_index], 2)",
                            "Call"
                        ],
                        [
                            "tf.stack([batch_index, frame_index], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_70": {
                "params": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([batch_index, frame_index], 2)",
                            "Call"
                        ],
                        [
                            "tf.stack([batch_index, frame_index], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_35": {
                "input": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "tf.range(num_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_40": {
                "x": {
                    "value": "tf.random_uniform([batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(max_start_frame_index + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_44": {
                "x": {
                    "value": "num_frames - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_64": {
                "x": {
                    "value": "tf.random_uniform([batch_size, num_samples])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.tile(tf.cast(num_frames, tf.float32), [1, num_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "input_tensor": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "max_start_frame_index + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_66": {
                "input": {
                    "value": "tf.cast(num_frames, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_90": {
                "input_tensor": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "readers.py": {
        "tensorflow": {
            "convert_to_tensor_38": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_39": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_42": {
                "variable": {
                    "value": "pad_shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "new_size - shape[axis]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_44": {
                "variable": {
                    "value": "shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "new_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(tensor))",
                            "Call"
                        ],
                        [
                            "tf.stack(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_47": {
                "variable": {
                    "value": "resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.slice(tensor, tf.zeros_like(shape), shape), tf.fill(tf.stack(pad_shape), tf.cast(fill_value, tensor.dtype))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_103": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_example_123": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'video_id': tf.FixedLenFeature([], tf.string), 'labels': tf.VarLenFeature(tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "concat_127": {
                "variable": {
                    "value": "concatenated_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features[feature_name] for feature_name in self.feature_names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "decoded_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.decode_raw(features, tf.uint8), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_187": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(decoded_features)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "max_frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TFRecordReader_208": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_217": {
                "variable": {
                    "value": "(contexts, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "{'video_id': tf.FixedLenFeature([], tf.string), 'labels': tf.VarLenFeature(tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "sequence_features": {
                    "value": "{feature_name: tf.FixedLenSequenceFeature([], dtype=tf.string) for feature_name in self.feature_names}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "cast_228": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sparse_to_dense(contexts['labels'].values, (self.num_classes,), 1, validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_258": {
                "variable": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(tf.shape(decoded_features)[0], max_frames)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "tf.minimum(num_frames, self.max_frames)",
                            "Call"
                        ],
                        [
                            "num_frames_in_this_feature",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "self.max_frames",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "video_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_matrices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] * num_features",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_265": {
                "variable": {
                    "value": "batch_video_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "contexts['video_id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_266": {
                "variable": {
                    "value": "batch_video_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "video_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(feature_matrices, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_267": {
                "variable": {
                    "value": "batch_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sparse_to_indicator(features['labels'], self.num_classes)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.sparse_to_dense(contexts['labels'].values, (self.num_classes,), 1, validate_indices=False), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "variable": {
                    "value": "batch_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(tf.shape(decoded_features)[0], max_frames)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "tf.minimum(num_frames, self.max_frames)",
                            "Call"
                        ],
                        [
                            "num_frames_in_this_feature",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_106": {
                "name": {
                    "value": "serialized_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "serialized_examples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_120": {
                "variable": {
                    "value": "feature_map[self.feature_names[feature_index]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_sizes[feature_index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_48": {
                "input_": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tensor)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "tf.zeros_like(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(tensor))",
                            "Call"
                        ],
                        [
                            "tf.stack(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_49": {
                "dims": {
                    "value": "tf.stack(pad_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(fill_value, tensor.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_117": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_118": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_130": {
                "shape": {
                    "value": "[tf.shape(serialized_examples)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "tf.decode_raw(features, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_to_dense_229": {
                "sparse_indices": {
                    "value": "contexts['labels'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(self.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "validate_indices": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(tf.shape(tensor))",
                            "Call"
                        ],
                        [
                            "tf.stack(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_49": {
                "values": {
                    "value": "pad_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_49": {
                "x": {
                    "value": "fill_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_184": {
                "input_bytes": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.parse_example(serialized_examples, features=feature_map)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_187": {
                "input": {
                    "value": "decoded_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(tf.decode_raw(features, tf.uint8), tf.float32), [-1, feature_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_253": {
                "x": {
                    "value": "num_frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(tf.shape(decoded_features)[0], max_frames)",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "tf.minimum(num_frames, self.max_frames)",
                            "Call"
                        ],
                        [
                            "num_frames_in_this_feature",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "num_frames_in_this_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_219": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_221": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_223": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_130": {
                "input": {
                    "value": "serialized_examples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Variable_219": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_221": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "base_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "learning_rate_decay_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000000",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learning_rate_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.95",
                            "MethodArgument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_241": {
                "variable": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_input_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(model_input_raw.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/yt8m_model/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory to save the model files in.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "train_data_pattern",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"File glob for the training dataset. If the files refer to Frame Level features (i.e. tensorflow.SequenceExample), then set --reader_type format. The (Sequence)Examples are expected to have 'rgb' byte array sequence feature as well as a 'labels' int64 context feature.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "feature_names",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "mean_rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the feature to use for training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "feature_sizes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Length of the feature vectors.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_51": {
                "name": {
                    "value": "frame_features",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If set, then --train_data_pattern must be frame-level features. Otherwise, --train_data_pattern must be aggregated video-level features. The model must also be set appropriately (i.e. to read 3D batches VS 4D batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "LogisticModel",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Which architecture to use for the model. Models are defined in models.py.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_61": {
                "name": {
                    "value": "start_new_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "If set, this will not resume from a checkpoint and will instead create a new model instance.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many examples to process per batch for training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "CrossEntropyLoss",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Which loss function to use for training the model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_71": {
                "name": {
                    "value": "regularization_penalty",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How much weight to give to the regularization loss (the label loss has a weight of 1).",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "base_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Which learning rate to start with.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "learning_rate_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor to be applied every learning_rate_decay_examples.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_80": {
                "name": {
                    "value": "learning_rate_decay_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Multiply current learning rate by learning_rate_decay every learning_rate_decay_examples.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_83": {
                "name": {
                    "value": "num_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many passes to make over the dataset before halting training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "max_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of iterations of the training loop.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_88": {
                "name": {
                    "value": "export_model_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The period, in number of steps, with which the model is exported for batch prediction.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_93": {
                "name": {
                    "value": "num_readers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "How many threads to use for reading input files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_95": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "AdamOptimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "What optimizer class to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_97": {
                "name": {
                    "value": "clip_gradient_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Norm to clip gradients to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_98": {
                "name": {
                    "value": "log_device_placement",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to write the device on which every op will run into the logs on startup.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_154": {
                "msg": {
                    "value": "Using batch size of  + str(batch_size) +  for training.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_156": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "data_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "string_input_producer_161": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gfile.Glob(data_pattern)",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_227": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(base_learning_rate, global_step * batch_size, learning_rate_decay_examples, learning_rate_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_237": {
                "name": {
                    "value": "model/input_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "model_input_raw",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_regularization_losses_265": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_274": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_319": {
                "variable": {
                    "value": "self.config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "log_device_placement",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Supervisor_362": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init_op": {
                    "value": "init_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.global_variables_initializer()",
                            "Call"
                        ]
                    ]
                },
                "is_chief": {
                    "value": "self.is_master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('global_step')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "save_model_secs": {
                    "value": "15 * 60",
                    "type": "BinOp",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "saver": {
                    "value": "saver",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.recover_model(meta_filename)",
                            "Call"
                        ],
                        [
                            "self.build_model(self.model, self.reader)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_487": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "train_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Server_585": {
                "server_or_cluster_def": {
                    "value": "tf.train.ClusterSpec(cluster)",
                    "type": "Call",
                    "possible_values": []
                },
                "protocol": {
                    "value": "grpc",
                    "type": "Constant",
                    "possible_values": []
                },
                "job_name": {
                    "value": "task.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "task_index": {
                    "value": "task.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_607": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_608": {
                "msg": {
                    "value": "%s: Tensorflow version: %s.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(task)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.__version__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "train_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_160": {
                "msg": {
                    "value": "Number of training files: %s.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(len(files))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_join_167": {
                "tensors_list": {
                    "value": "training_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[reader.prepare_reader(filename_queue) for _ in range(num_readers)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "FLAGS.batch_size * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_243": {
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_258": {
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "label_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "result['loss']",
                            "Subscript"
                        ],
                        [
                            "label_loss_fn.calculate_loss(predictions, labels_batch)",
                            "Call"
                        ],
                        [
                            "tf.identity(label_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_263": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_291": {
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ],
                        [
                            "tf.get_collection('global_step')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_292": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "label_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "result['loss']",
                            "Subscript"
                        ],
                        [
                            "label_loss_fn.calculate_loss(predictions, labels_batch)",
                            "Call"
                        ],
                        [
                            "tf.identity(label_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_293": {
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "predictions",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "result['predictions']",
                            "Subscript"
                        ],
                        [
                            "tf.get_collection('predictions')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_to_collection_294": {
                "name": {
                    "value": "input_batch_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "model_input_raw",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_to_collection_295": {
                "name": {
                    "value": "input_batch",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "model_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(model_input_raw, feature_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_296": {
                "name": {
                    "value": "num_frames",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_to_collection_297": {
                "name": {
                    "value": "labels",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(labels_batch, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_298": {
                "name": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.learning.create_train_op(final_loss, optimizer, global_step=global_step, clip_gradient_norm=clip_gradient_norm)",
                            "Call"
                        ],
                        [
                            "tf.get_collection('train_op')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_372": {
                "msg": {
                    "value": "%s: Starting managed session.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_430": {
                "msg": {
                    "value": "%s: Exited training loop.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_442": {
                "msg": {
                    "value": "%s: Exporting the model at step %s to %s.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "global_step_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "replica_device_setter_459": {
                "variable": {
                    "value": "device_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "ps_device": {
                    "value": "/job:ps",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_device": {
                    "value": "'/job:%s/task:%d' % (self.task.type, self.task.index)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "cluster": {
                    "value": "self.cluster",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_502": {
                "msg": {
                    "value": "%s: Restoring from meta graph file %s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "meta_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_meta_filename(start_new_model, self.train_dir)",
                            "Call"
                        ],
                        [
                            "latest_checkpoint + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "import_meta_graph_504": {
                "meta_graph_or_file": {
                    "value": "meta_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_meta_filename(start_new_model, self.train_dir)",
                            "Call"
                        ],
                        [
                            "latest_checkpoint + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_526": {
                "max_to_keep": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_562": {
                "msg": {
                    "value": "%s: Starting parameter server within cluster %s.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.cluster.as_dict()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ClusterSpec_586": {
                "cluster": {
                    "value": "cluster",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.ClusterSpec(cluster_data) if cluster_data else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ClusterSpec_600": {
                "cluster": {
                    "value": "cluster_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.get('cluster', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_251": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_267": {
                "inputs": {
                    "value": "reg_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.get_regularization_losses()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_270": {
                "name": {
                    "value": "reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "result['regularization_loss']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "reg_loss + tf.add_n(reg_losses)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_op_279": {
                "variable": {
                    "value": "barrier",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gradient_barrier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_297": {
                "x": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_360": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_455": {
                "msg": {
                    "value": "%s: Starting trainer within cluster %s.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.cluster.as_dict()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_471": {
                "msg": {
                    "value": "%s: Removing existing train directory.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DeleteRecursively_474": {
                "dirname": {
                    "value": "train_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_483": {
                "msg": {
                    "value": "\"%s: Flag 'start_new_model' is set. Building a new model.\"",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_489": {
                "msg": {
                    "value": "%s: No checkpoint file found. Building a new model.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_494": {
                "filename": {
                    "value": "meta_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_meta_filename(start_new_model, self.train_dir)",
                            "Call"
                        ],
                        [
                            "latest_checkpoint + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_495": {
                "msg": {
                    "value": "%s: No meta graph file found. Building a new model.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_278": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "update_ops + result['update_ops']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_281": {
                "variable": {
                    "value": "label_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "result['loss']",
                            "Subscript"
                        ],
                        [
                            "label_loss_fn.calculate_loss(predictions, labels_batch)",
                            "Call"
                        ],
                        [
                            "tf.identity(label_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_350": {
                "device_name": {
                    "value": "device_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.replica_device_setter(ps_device='/job:ps', worker_device='/job:%s/task:%d' % (self.task.type, self.task.index), cluster=self.cluster)",
                            "Call"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                }
            },
            "info_376": {
                "msg": {
                    "value": "%s: Entering training loop.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "error_476": {
                "msg": {
                    "value": "%s: Failed to delete directory  + train_dir +  when starting a new model. Please delete it manually and +  try again.",
                    "type": "BinOp",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_280": {
                "control_inputs": {
                    "value": "[barrier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_355": {
                "key": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_356": {
                "key": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_357": {
                "key": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_358": {
                "key": {
                    "value": "labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_359": {
                "key": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_427": {
                "msg": {
                    "value": "%s: Done training -- epoch limit reached.",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_395": {
                "msg": {
                    "value": "'%s: training step ' + str(global_step_val) + '| Hit@1: ' + '%.2f' % hit_at_one + ' PERR: ' + '%.2f' % perr + ' GAP: ' + '%.2f' % gap + ' Loss: ' + str(loss_val)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "*args": {
                    "value": "task_as_string(self.task)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "Summary_43": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "error_157": {
                "msg": {
                    "value": "length of the feature names (= + str(len(list_of_feature_names)) + ) != length of feature sizes (= + str(len(list_of_feature_sizes)) + )",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "video_level_models.py": {
        "tensorflow": {
            "DEFINE_integer_26": {
                "name": {
                    "value": "moe_num_mixtures",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "\"The number of mixtures (excluding the dummy 'expert') used for MoeModel.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_29": {
                "name": {
                    "value": "moe_l2",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 penalty for MoeModel.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "moe_low_rank_gating",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Low rank gating for MoeModel.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_35": {
                "name": {
                    "value": "moe_prob_gating",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Prob gating for MoeModel.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "moe_prob_gating_input",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "prob",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "input Prob gating for MoeModel.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "gating_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(gate_activations, [-1, num_mixtures + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "variable": {
                    "value": "expert_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(expert_activations, [-1, num_mixtures])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "probabilities_by_class_and_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gating_distribution[:, :num_mixtures] * expert_distribution",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probabilities_by_class_and_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gating_distribution[:, :num_mixtures] * expert_distribution, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(probabilities, gating_weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model_input, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, probabilities)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_prob_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_153": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(probabilities_by_class_and_batch, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.multiply(probabilities, gates)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(probabilities, gating_weights)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model_input, gating_weights)",
                            "Call"
                        ],
                        [
                            "gates - tf.multiply(diagonals, probabilities)",
                            "BinOp"
                        ],
                        [
                            "slim.batch_norm(gates, center=True, scale=True, is_training=is_training, scope='gating_prob_bn')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "gate_activations",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.fully_connected(model_input, vocab_size * (num_mixtures + 1), activation_fn=None, biases_initializer=None, weights_regularizer=slim.l2_regularizer(l2_penalty), scope='gates')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(gate_activations1, vocab_size * (num_mixtures + 1), activation_fn=None, biases_initializer=None, weights_regularizer=slim.l2_regularizer(l2_penalty), scope='gates2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_mixtures + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "expert_activations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(model_input, vocab_size * num_mixtures, activation_fn=None, weights_regularizer=slim.l2_regularizer(l2_penalty), scope='experts')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_mixtures]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "gating_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gating_prob_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(vocab_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "probabilities",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(probabilities_by_class_and_batch, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.multiply(probabilities, gates)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "gating_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gating_prob_weights', [vocab_size, vocab_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(vocab_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gating_prob_weights', [input_size, vocab_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(vocab_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_133": {
                "variable": {
                    "value": "gating_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gating_prob_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=1 / math.sqrt(vocab_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "model_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "gating_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gating_prob_weights', [vocab_size, vocab_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(vocab_size)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gating_prob_weights', [input_size, vocab_size], initializer=tf.random_normal_initializer(stddev=1 / math.sqrt(vocab_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_142": {
                "x": {
                    "value": "diagonals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_diag_part(gating_weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probabilities",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(probabilities_by_class_and_batch, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.multiply(probabilities, gates)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_130": {
                "stddev": {
                    "value": "1 / math.sqrt(vocab_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_135": {
                "stddev": {
                    "value": "1 / math.sqrt(vocab_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}